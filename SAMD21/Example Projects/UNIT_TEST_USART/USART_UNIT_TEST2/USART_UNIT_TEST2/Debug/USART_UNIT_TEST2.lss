
USART_UNIT_TEST2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004ac8  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  00004ac8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000210  20000068  00004b30  00010068  2**2
                  ALLOC
  3 .stack        00002000  20000278  00004d40  00010068  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010068  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010090  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001d512  00000000  00000000  000100eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002db7  00000000  00000000  0002d5fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006291  00000000  00000000  000303b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000478  00000000  00000000  00036645  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000005a8  00000000  00000000  00036abd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000198a8  00000000  00000000  00037065  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000affc  00000000  00000000  0005090d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008a98c  00000000  00000000  0005b909  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000133c  00000000  00000000  000e6298  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002278 	.word	0x20002278
       4:	0000246d 	.word	0x0000246d
       8:	00002469 	.word	0x00002469
       c:	00002469 	.word	0x00002469
	...
      2c:	00002469 	.word	0x00002469
	...
      38:	00002469 	.word	0x00002469
      3c:	00002469 	.word	0x00002469
      40:	00002469 	.word	0x00002469
      44:	00002469 	.word	0x00002469
      48:	00002469 	.word	0x00002469
      4c:	00002469 	.word	0x00002469
      50:	00002469 	.word	0x00002469
      54:	00002469 	.word	0x00002469
      58:	00002469 	.word	0x00002469
      5c:	00002469 	.word	0x00002469
      60:	00002469 	.word	0x00002469
      64:	00000a05 	.word	0x00000a05
      68:	00000a15 	.word	0x00000a15
      6c:	00000a25 	.word	0x00000a25
      70:	00000a35 	.word	0x00000a35
      74:	00000a45 	.word	0x00000a45
      78:	00000a55 	.word	0x00000a55
      7c:	00002469 	.word	0x00002469
      80:	00002469 	.word	0x00002469
      84:	00002469 	.word	0x00002469
      88:	00002469 	.word	0x00002469
      8c:	00002469 	.word	0x00002469
      90:	00002469 	.word	0x00002469
      94:	00002469 	.word	0x00002469
      98:	00002469 	.word	0x00002469
      9c:	00002469 	.word	0x00002469
      a0:	00002469 	.word	0x00002469
      a4:	00002469 	.word	0x00002469
      a8:	00002469 	.word	0x00002469
      ac:	00002469 	.word	0x00002469

000000b0 <__do_global_dtors_aux>:
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	20000068 	.word	0x20000068
      d0:	00000000 	.word	0x00000000
      d4:	00004ac8 	.word	0x00004ac8

000000d8 <frame_dummy>:
      d8:	b508      	push	{r3, lr}
      da:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x28>)
      e2:	4908      	ldr	r1, [pc, #32]	; (104 <frame_dummy+0x2c>)
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d003      	beq.n	f8 <frame_dummy+0x20>
      f0:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
      f2:	2b00      	cmp	r3, #0
      f4:	d000      	beq.n	f8 <frame_dummy+0x20>
      f6:	4798      	blx	r3
      f8:	bd08      	pop	{r3, pc}
      fa:	46c0      	nop			; (mov r8, r8)
      fc:	00000000 	.word	0x00000000
     100:	00004ac8 	.word	0x00004ac8
     104:	2000006c 	.word	0x2000006c
     108:	00004ac8 	.word	0x00004ac8
     10c:	00000000 	.word	0x00000000

00000110 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     110:	4b0c      	ldr	r3, [pc, #48]	; (144 <cpu_irq_enter_critical+0x34>)
     112:	681b      	ldr	r3, [r3, #0]
     114:	2b00      	cmp	r3, #0
     116:	d110      	bne.n	13a <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     118:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     11c:	2b00      	cmp	r3, #0
     11e:	d109      	bne.n	134 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     120:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     122:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     126:	2200      	movs	r2, #0
     128:	4b07      	ldr	r3, [pc, #28]	; (148 <cpu_irq_enter_critical+0x38>)
     12a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     12c:	2201      	movs	r2, #1
     12e:	4b07      	ldr	r3, [pc, #28]	; (14c <cpu_irq_enter_critical+0x3c>)
     130:	701a      	strb	r2, [r3, #0]
     132:	e002      	b.n	13a <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     134:	2200      	movs	r2, #0
     136:	4b05      	ldr	r3, [pc, #20]	; (14c <cpu_irq_enter_critical+0x3c>)
     138:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     13a:	4b02      	ldr	r3, [pc, #8]	; (144 <cpu_irq_enter_critical+0x34>)
     13c:	681a      	ldr	r2, [r3, #0]
     13e:	3201      	adds	r2, #1
     140:	601a      	str	r2, [r3, #0]
}
     142:	4770      	bx	lr
     144:	20000084 	.word	0x20000084
     148:	20000000 	.word	0x20000000
     14c:	20000088 	.word	0x20000088

00000150 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
     150:	b510      	push	{r4, lr}
     152:	b082      	sub	sp, #8
 * \internal
 * \brief Get pointer to current test.
 */
static inline struct test_case *test_get_case(void)
{
	return test_case_ptr;
     154:	4b17      	ldr	r3, [pc, #92]	; (1b4 <cpu_irq_leave_critical+0x64>)
     156:	6818      	ldr	r0, [r3, #0]
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);
     158:	2800      	cmp	r0, #0
     15a:	d00d      	beq.n	178 <cpu_irq_leave_critical+0x28>
     15c:	4b16      	ldr	r3, [pc, #88]	; (1b8 <cpu_irq_leave_critical+0x68>)
     15e:	681b      	ldr	r3, [r3, #0]
     160:	2b00      	cmp	r3, #0
     162:	d114      	bne.n	18e <cpu_irq_leave_critical+0x3e>
     164:	4b15      	ldr	r3, [pc, #84]	; (1bc <cpu_irq_leave_critical+0x6c>)
     166:	9300      	str	r3, [sp, #0]
     168:	4b15      	ldr	r3, [pc, #84]	; (1c0 <cpu_irq_leave_critical+0x70>)
     16a:	9301      	str	r3, [sp, #4]
     16c:	2101      	movs	r1, #1
     16e:	4a15      	ldr	r2, [pc, #84]	; (1c4 <cpu_irq_leave_critical+0x74>)
     170:	234c      	movs	r3, #76	; 0x4c
     172:	4c15      	ldr	r4, [pc, #84]	; (1c8 <cpu_irq_leave_critical+0x78>)
     174:	47a0      	blx	r4
     176:	e00a      	b.n	18e <cpu_irq_leave_critical+0x3e>
     178:	4b0f      	ldr	r3, [pc, #60]	; (1b8 <cpu_irq_leave_critical+0x68>)
     17a:	681b      	ldr	r3, [r3, #0]
     17c:	2b00      	cmp	r3, #0
     17e:	d106      	bne.n	18e <cpu_irq_leave_critical+0x3e>
     180:	4812      	ldr	r0, [pc, #72]	; (1cc <cpu_irq_leave_critical+0x7c>)
     182:	490f      	ldr	r1, [pc, #60]	; (1c0 <cpu_irq_leave_critical+0x70>)
     184:	4a0f      	ldr	r2, [pc, #60]	; (1c4 <cpu_irq_leave_critical+0x74>)
     186:	234c      	movs	r3, #76	; 0x4c
     188:	4c11      	ldr	r4, [pc, #68]	; (1d0 <cpu_irq_leave_critical+0x80>)
     18a:	47a0      	blx	r4
     18c:	e7fe      	b.n	18c <cpu_irq_leave_critical+0x3c>

	cpu_irq_critical_section_counter--;
     18e:	4b0a      	ldr	r3, [pc, #40]	; (1b8 <cpu_irq_leave_critical+0x68>)
     190:	681a      	ldr	r2, [r3, #0]
     192:	3a01      	subs	r2, #1
     194:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     196:	681b      	ldr	r3, [r3, #0]
     198:	2b00      	cmp	r3, #0
     19a:	d109      	bne.n	1b0 <cpu_irq_leave_critical+0x60>
     19c:	4b0d      	ldr	r3, [pc, #52]	; (1d4 <cpu_irq_leave_critical+0x84>)
     19e:	781b      	ldrb	r3, [r3, #0]
     1a0:	2b00      	cmp	r3, #0
     1a2:	d005      	beq.n	1b0 <cpu_irq_leave_critical+0x60>
		cpu_irq_enable();
     1a4:	2201      	movs	r2, #1
     1a6:	4b0c      	ldr	r3, [pc, #48]	; (1d8 <cpu_irq_leave_critical+0x88>)
     1a8:	701a      	strb	r2, [r3, #0]
     1aa:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     1ae:	b662      	cpsie	i
	}
}
     1b0:	b002      	add	sp, #8
     1b2:	bd10      	pop	{r4, pc}
     1b4:	2000008c 	.word	0x2000008c
     1b8:	20000084 	.word	0x20000084
     1bc:	00004444 	.word	0x00004444
     1c0:	0000445c 	.word	0x0000445c
     1c4:	0000440c 	.word	0x0000440c
     1c8:	0000020d 	.word	0x0000020d
     1cc:	00004484 	.word	0x00004484
     1d0:	000033cd 	.word	0x000033cd
     1d4:	20000088 	.word	0x20000088
     1d8:	20000000 	.word	0x20000000

000001dc <test_call>:
 * \return #TEST_PASS if \a func was executed successfully, or the
 * result value passed to test_fail() on failure.
 */
static int test_call(void (*func)(const struct test_case *),
		const struct test_case *test)
{
     1dc:	b510      	push	{r4, lr}
     1de:	b082      	sub	sp, #8
     1e0:	9000      	str	r0, [sp, #0]
     1e2:	9101      	str	r1, [sp, #4]
	int ret = 0;

	if (!func) {
     1e4:	2800      	cmp	r0, #0
     1e6:	d00a      	beq.n	1fe <test_call+0x22>
	/*
	 * The first call to setjmp() always return 0. However, if the
	 * call to func() below goes wrong, we'll return here again with
	 * a nonzero value.
	 */
	ret = setjmp(test_failure_jmpbuf);
     1e8:	4806      	ldr	r0, [pc, #24]	; (204 <test_call+0x28>)
     1ea:	4b07      	ldr	r3, [pc, #28]	; (208 <test_call+0x2c>)
     1ec:	4798      	blx	r3
     1ee:	1c04      	adds	r4, r0, #0
	if (ret) {
     1f0:	2c00      	cmp	r4, #0
     1f2:	d105      	bne.n	200 <test_call+0x24>
		return ret;
	}

	func(test);
     1f4:	9801      	ldr	r0, [sp, #4]
     1f6:	9b00      	ldr	r3, [sp, #0]
     1f8:	4798      	blx	r3

	return TEST_PASS;
     1fa:	1c20      	adds	r0, r4, #0
     1fc:	e000      	b.n	200 <test_call+0x24>
		const struct test_case *test)
{
	int ret = 0;

	if (!func) {
		return TEST_PASS;
     1fe:	2000      	movs	r0, #0
	}

	func(test);

	return TEST_PASS;
}
     200:	b002      	add	sp, #8
     202:	bd10      	pop	{r4, pc}
     204:	20000090 	.word	0x20000090
     208:	000034eb 	.word	0x000034eb

0000020c <test_case_fail>:
 * \param ... Values to insert into failure message.
 */
void test_case_fail(const struct test_case *test, int result,
		const char *file, unsigned int line,
		const char *fmt, ...)
{
     20c:	b570      	push	{r4, r5, r6, lr}
     20e:	b082      	sub	sp, #8
     210:	1c0e      	adds	r6, r1, #0
     212:	ac06      	add	r4, sp, #24
     214:	cc02      	ldmia	r4!, {r1}
	va_list ap;

	dbg_error("Test '%s' failed at %s:%u:\r\n\t", test->name, file, line);
     216:	68c1      	ldr	r1, [r0, #12]
     218:	4832      	ldr	r0, [pc, #200]	; (2e4 <test_case_fail+0xd8>)
     21a:	4d33      	ldr	r5, [pc, #204]	; (2e8 <test_case_fail+0xdc>)
     21c:	47a8      	blx	r5

	va_start(ap, fmt);
     21e:	9401      	str	r4, [sp, #4]
	dbg_vprintf_pgm(fmt, ap);
     220:	4d32      	ldr	r5, [pc, #200]	; (2ec <test_case_fail+0xe0>)
     222:	682b      	ldr	r3, [r5, #0]
     224:	6898      	ldr	r0, [r3, #8]
     226:	9906      	ldr	r1, [sp, #24]
     228:	1c22      	adds	r2, r4, #0
     22a:	4b31      	ldr	r3, [pc, #196]	; (2f0 <test_case_fail+0xe4>)
     22c:	4798      	blx	r3
	va_end(ap);
	dbg_putchar('\r');
     22e:	6828      	ldr	r0, [r5, #0]
     230:	6882      	ldr	r2, [r0, #8]
     232:	6893      	ldr	r3, [r2, #8]
     234:	3b01      	subs	r3, #1
     236:	6093      	str	r3, [r2, #8]
     238:	2b00      	cmp	r3, #0
     23a:	da19      	bge.n	270 <test_case_fail+0x64>
     23c:	6882      	ldr	r2, [r0, #8]
     23e:	6893      	ldr	r3, [r2, #8]
     240:	6991      	ldr	r1, [r2, #24]
     242:	428b      	cmp	r3, r1
     244:	db10      	blt.n	268 <test_case_fail+0x5c>
     246:	6813      	ldr	r3, [r2, #0]
     248:	220d      	movs	r2, #13
     24a:	701a      	strb	r2, [r3, #0]
     24c:	4b27      	ldr	r3, [pc, #156]	; (2ec <test_case_fail+0xe0>)
     24e:	6818      	ldr	r0, [r3, #0]
     250:	6882      	ldr	r2, [r0, #8]
     252:	6813      	ldr	r3, [r2, #0]
     254:	7819      	ldrb	r1, [r3, #0]
     256:	290a      	cmp	r1, #10
     258:	d002      	beq.n	260 <test_case_fail+0x54>
     25a:	3301      	adds	r3, #1
     25c:	6013      	str	r3, [r2, #0]
     25e:	e011      	b.n	284 <test_case_fail+0x78>
     260:	210a      	movs	r1, #10
     262:	4b24      	ldr	r3, [pc, #144]	; (2f4 <test_case_fail+0xe8>)
     264:	4798      	blx	r3
     266:	e00d      	b.n	284 <test_case_fail+0x78>
     268:	210d      	movs	r1, #13
     26a:	4b22      	ldr	r3, [pc, #136]	; (2f4 <test_case_fail+0xe8>)
     26c:	4798      	blx	r3
     26e:	e009      	b.n	284 <test_case_fail+0x78>
     270:	6883      	ldr	r3, [r0, #8]
     272:	681b      	ldr	r3, [r3, #0]
     274:	220d      	movs	r2, #13
     276:	701a      	strb	r2, [r3, #0]
     278:	4b1c      	ldr	r3, [pc, #112]	; (2ec <test_case_fail+0xe0>)
     27a:	681b      	ldr	r3, [r3, #0]
     27c:	689b      	ldr	r3, [r3, #8]
     27e:	681a      	ldr	r2, [r3, #0]
     280:	3201      	adds	r2, #1
     282:	601a      	str	r2, [r3, #0]
	dbg_putchar('\n');
     284:	4b19      	ldr	r3, [pc, #100]	; (2ec <test_case_fail+0xe0>)
     286:	6818      	ldr	r0, [r3, #0]
     288:	6882      	ldr	r2, [r0, #8]
     28a:	6893      	ldr	r3, [r2, #8]
     28c:	3b01      	subs	r3, #1
     28e:	6093      	str	r3, [r2, #8]
     290:	2b00      	cmp	r3, #0
     292:	da19      	bge.n	2c8 <test_case_fail+0xbc>
     294:	6882      	ldr	r2, [r0, #8]
     296:	6893      	ldr	r3, [r2, #8]
     298:	6991      	ldr	r1, [r2, #24]
     29a:	428b      	cmp	r3, r1
     29c:	db10      	blt.n	2c0 <test_case_fail+0xb4>
     29e:	6813      	ldr	r3, [r2, #0]
     2a0:	220a      	movs	r2, #10
     2a2:	701a      	strb	r2, [r3, #0]
     2a4:	4b11      	ldr	r3, [pc, #68]	; (2ec <test_case_fail+0xe0>)
     2a6:	6818      	ldr	r0, [r3, #0]
     2a8:	6882      	ldr	r2, [r0, #8]
     2aa:	6813      	ldr	r3, [r2, #0]
     2ac:	7819      	ldrb	r1, [r3, #0]
     2ae:	290a      	cmp	r1, #10
     2b0:	d002      	beq.n	2b8 <test_case_fail+0xac>
     2b2:	3301      	adds	r3, #1
     2b4:	6013      	str	r3, [r2, #0]
     2b6:	e011      	b.n	2dc <test_case_fail+0xd0>
     2b8:	210a      	movs	r1, #10
     2ba:	4b0e      	ldr	r3, [pc, #56]	; (2f4 <test_case_fail+0xe8>)
     2bc:	4798      	blx	r3
     2be:	e00d      	b.n	2dc <test_case_fail+0xd0>
     2c0:	210a      	movs	r1, #10
     2c2:	4b0c      	ldr	r3, [pc, #48]	; (2f4 <test_case_fail+0xe8>)
     2c4:	4798      	blx	r3
     2c6:	e009      	b.n	2dc <test_case_fail+0xd0>
     2c8:	6883      	ldr	r3, [r0, #8]
     2ca:	681b      	ldr	r3, [r3, #0]
     2cc:	220a      	movs	r2, #10
     2ce:	701a      	strb	r2, [r3, #0]
     2d0:	4b06      	ldr	r3, [pc, #24]	; (2ec <test_case_fail+0xe0>)
     2d2:	681b      	ldr	r3, [r3, #0]
     2d4:	689b      	ldr	r3, [r3, #8]
     2d6:	681a      	ldr	r2, [r3, #0]
     2d8:	3201      	adds	r2, #1
     2da:	601a      	str	r2, [r3, #0]

	/*
	 * This will cause the setjmp() call in test_call() to return
	 * TEST_FAIL.
	 */
	longjmp(test_failure_jmpbuf, result);
     2dc:	4806      	ldr	r0, [pc, #24]	; (2f8 <test_case_fail+0xec>)
     2de:	1c31      	adds	r1, r6, #0
     2e0:	4b06      	ldr	r3, [pc, #24]	; (2fc <test_case_fail+0xf0>)
     2e2:	4798      	blx	r3
     2e4:	000044a8 	.word	0x000044a8
     2e8:	000033cd 	.word	0x000033cd
     2ec:	20000064 	.word	0x20000064
     2f0:	000038a1 	.word	0x000038a1
     2f4:	00003bd1 	.word	0x00003bd1
     2f8:	20000090 	.word	0x20000090
     2fc:	00003503 	.word	0x00003503

00000300 <test_suite_run>:
 * the array.
 *
 * \return The number of tests that didn't pass.
 */
int test_suite_run(const struct test_suite *suite)
{
     300:	b5f0      	push	{r4, r5, r6, r7, lr}
     302:	465f      	mov	r7, fp
     304:	4656      	mov	r6, sl
     306:	464d      	mov	r5, r9
     308:	4644      	mov	r4, r8
     30a:	b4f0      	push	{r4, r5, r6, r7}
     30c:	b085      	sub	sp, #20
     30e:	1c07      	adds	r7, r0, #0
	unsigned int nr_failures = 0;
	unsigned int nr_errors = 0;
	unsigned int i;
	int          ret;

	dbg_info("Running test suite '%s'...\r\n", suite->name);
     310:	483a      	ldr	r0, [pc, #232]	; (3fc <test_suite_run+0xfc>)
     312:	68b9      	ldr	r1, [r7, #8]
     314:	4b3a      	ldr	r3, [pc, #232]	; (400 <test_suite_run+0x100>)
     316:	4798      	blx	r3

	for (i = 0; i < suite->nr_tests; i++) {
     318:	683a      	ldr	r2, [r7, #0]
     31a:	2a00      	cmp	r2, #0
     31c:	d05b      	beq.n	3d6 <test_suite_run+0xd6>
     31e:	2500      	movs	r5, #0
 * \return The number of tests that didn't pass.
 */
int test_suite_run(const struct test_suite *suite)
{
	unsigned int nr_failures = 0;
	unsigned int nr_errors = 0;
     320:	2600      	movs	r6, #0
     322:	9603      	str	r6, [sp, #12]
 *
 * \return The number of tests that didn't pass.
 */
int test_suite_run(const struct test_suite *suite)
{
	unsigned int nr_failures = 0;
     324:	46b0      	mov	r8, r6
 * \internal
 * \brief Set pointer to current test.
 */
static inline void test_set_case(const struct test_case *test)
{
	test_case_ptr = (struct test_case *)test;
     326:	4b37      	ldr	r3, [pc, #220]	; (404 <test_suite_run+0x104>)
     328:	469b      	mov	fp, r3
// Store test pointer for access by test_get_data()
#if defined(_ASSERT_ENABLE_) && defined(TEST_SUITE_DEFINE_ASSERT_MACRO)
	test_set_case(test);
#endif

	dbg_info("Running test: %s\r\n", test->name);
     32a:	4e37      	ldr	r6, [pc, #220]	; (408 <test_suite_run+0x108>)
     32c:	46b2      	mov	sl, r6
	dbg_info("Running test suite '%s'...\r\n", suite->name);

	for (i = 0; i < suite->nr_tests; i++) {
		const struct test_case *test;

		test = suite->tests[i];
     32e:	00ab      	lsls	r3, r5, #2
     330:	687a      	ldr	r2, [r7, #4]
     332:	589c      	ldr	r4, [r3, r2]
     334:	465b      	mov	r3, fp
     336:	601c      	str	r4, [r3, #0]
// Store test pointer for access by test_get_data()
#if defined(_ASSERT_ENABLE_) && defined(TEST_SUITE_DEFINE_ASSERT_MACRO)
	test_set_case(test);
#endif

	dbg_info("Running test: %s\r\n", test->name);
     338:	4650      	mov	r0, sl
     33a:	68e1      	ldr	r1, [r4, #12]
     33c:	4e30      	ldr	r6, [pc, #192]	; (400 <test_suite_run+0x100>)
     33e:	47b0      	blx	r6
	if (test->setup) {
     340:	6822      	ldr	r2, [r4, #0]
     342:	2a00      	cmp	r2, #0
     344:	d00f      	beq.n	366 <test_suite_run+0x66>
		int ret;
		dbg("Setting up fixture\r\n");
     346:	4831      	ldr	r0, [pc, #196]	; (40c <test_suite_run+0x10c>)
     348:	4b31      	ldr	r3, [pc, #196]	; (410 <test_suite_run+0x110>)
     34a:	4798      	blx	r3
		ret = test_call(test->setup, test);
     34c:	6820      	ldr	r0, [r4, #0]
     34e:	1c21      	adds	r1, r4, #0
     350:	4b30      	ldr	r3, [pc, #192]	; (414 <test_suite_run+0x114>)
     352:	4798      	blx	r3
     354:	1e06      	subs	r6, r0, #0
		if (ret) {
     356:	d006      	beq.n	366 <test_suite_run+0x66>
 * \param result Result value of test stage.
 */
static void test_report_failure(const struct test_case *test, const char *stage,
		int result)
{
	dbg_error("Test '%s' failed during '%s': %d\r\n", test->name, stage,
     358:	68e1      	ldr	r1, [r4, #12]
     35a:	482f      	ldr	r0, [pc, #188]	; (418 <test_suite_run+0x118>)
     35c:	4a2f      	ldr	r2, [pc, #188]	; (41c <test_suite_run+0x11c>)
     35e:	1c33      	adds	r3, r6, #0
     360:	4c27      	ldr	r4, [pc, #156]	; (400 <test_suite_run+0x100>)
     362:	47a0      	blx	r4
     364:	e028      	b.n	3b8 <test_suite_run+0xb8>
			test_report_failure(test, "setup", ret);
			return ret;
		}
	}

	result = test_call(test->run, test);
     366:	6860      	ldr	r0, [r4, #4]
     368:	1c21      	adds	r1, r4, #0
     36a:	4b2a      	ldr	r3, [pc, #168]	; (414 <test_suite_run+0x114>)
     36c:	4798      	blx	r3
     36e:	9002      	str	r0, [sp, #8]
	if (result) {
     370:	2800      	cmp	r0, #0
     372:	d005      	beq.n	380 <test_suite_run+0x80>
 * \param result Result value of test stage.
 */
static void test_report_failure(const struct test_case *test, const char *stage,
		int result)
{
	dbg_error("Test '%s' failed during '%s': %d\r\n", test->name, stage,
     374:	4828      	ldr	r0, [pc, #160]	; (418 <test_suite_run+0x118>)
     376:	68e1      	ldr	r1, [r4, #12]
     378:	4a29      	ldr	r2, [pc, #164]	; (420 <test_suite_run+0x120>)
     37a:	9b02      	ldr	r3, [sp, #8]
     37c:	4e20      	ldr	r6, [pc, #128]	; (400 <test_suite_run+0x100>)
     37e:	47b0      	blx	r6
	result = test_call(test->run, test);
	if (result) {
		test_report_failure(test, "test", result);
	}

	if (test->cleanup) {
     380:	68a2      	ldr	r2, [r4, #8]
     382:	2a00      	cmp	r2, #0
     384:	d014      	beq.n	3b0 <test_suite_run+0xb0>
		int ret;
		dbg("Cleaning up fixture\r\n");
     386:	4827      	ldr	r0, [pc, #156]	; (424 <test_suite_run+0x124>)
     388:	4b21      	ldr	r3, [pc, #132]	; (410 <test_suite_run+0x110>)
     38a:	4798      	blx	r3
		ret = test_call(test->cleanup, test);
     38c:	68a0      	ldr	r0, [r4, #8]
     38e:	1c21      	adds	r1, r4, #0
     390:	4b20      	ldr	r3, [pc, #128]	; (414 <test_suite_run+0x114>)
     392:	4798      	blx	r3
     394:	4681      	mov	r9, r0
		if (ret && !result) {
     396:	2800      	cmp	r0, #0
     398:	d00a      	beq.n	3b0 <test_suite_run+0xb0>
     39a:	9e02      	ldr	r6, [sp, #8]
     39c:	2e00      	cmp	r6, #0
     39e:	d107      	bne.n	3b0 <test_suite_run+0xb0>
 * \param result Result value of test stage.
 */
static void test_report_failure(const struct test_case *test, const char *stage,
		int result)
{
	dbg_error("Test '%s' failed during '%s': %d\r\n", test->name, stage,
     3a0:	68e1      	ldr	r1, [r4, #12]
     3a2:	481d      	ldr	r0, [pc, #116]	; (418 <test_suite_run+0x118>)
     3a4:	4a20      	ldr	r2, [pc, #128]	; (428 <test_suite_run+0x128>)
     3a6:	464b      	mov	r3, r9
     3a8:	4c15      	ldr	r4, [pc, #84]	; (400 <test_suite_run+0x100>)
     3aa:	47a0      	blx	r4
		int ret;
		dbg("Cleaning up fixture\r\n");
		ret = test_call(test->cleanup, test);
		if (ret && !result) {
			test_report_failure(test, "cleanup", ret);
			result = ret;
     3ac:	464e      	mov	r6, r9
     3ae:	9602      	str	r6, [sp, #8]
     3b0:	2200      	movs	r2, #0
     3b2:	4b14      	ldr	r3, [pc, #80]	; (404 <test_suite_run+0x104>)
     3b4:	601a      	str	r2, [r3, #0]
// Test is done, clear the stored test pointer
#if defined(_ASSERT_ENABLE_) && defined(TEST_SUITE_DEFINE_ASSERT_MACRO)
	test_set_case(NULL);
#endif

	return result;
     3b6:	9e02      	ldr	r6, [sp, #8]
	for (i = 0; i < suite->nr_tests; i++) {
		const struct test_case *test;

		test = suite->tests[i];
		ret = test_case_run(test);
		if (ret < TEST_PASS) {
     3b8:	2e00      	cmp	r6, #0
     3ba:	da03      	bge.n	3c4 <test_suite_run+0xc4>
			nr_errors++;
     3bc:	9e03      	ldr	r6, [sp, #12]
     3be:	3601      	adds	r6, #1
     3c0:	9603      	str	r6, [sp, #12]
     3c2:	e003      	b.n	3cc <test_suite_run+0xcc>
		} else if (ret > TEST_PASS) {
			nr_failures++;
     3c4:	17f3      	asrs	r3, r6, #31
     3c6:	1b9e      	subs	r6, r3, r6
     3c8:	0ff6      	lsrs	r6, r6, #31
     3ca:	44b0      	add	r8, r6
	unsigned int i;
	int          ret;

	dbg_info("Running test suite '%s'...\r\n", suite->name);

	for (i = 0; i < suite->nr_tests; i++) {
     3cc:	3501      	adds	r5, #1
     3ce:	683a      	ldr	r2, [r7, #0]
     3d0:	42aa      	cmp	r2, r5
     3d2:	d8ac      	bhi.n	32e <test_suite_run+0x2e>
     3d4:	e002      	b.n	3dc <test_suite_run+0xdc>
 * \return The number of tests that didn't pass.
 */
int test_suite_run(const struct test_suite *suite)
{
	unsigned int nr_failures = 0;
	unsigned int nr_errors = 0;
     3d6:	2600      	movs	r6, #0
     3d8:	9603      	str	r6, [sp, #12]
 *
 * \return The number of tests that didn't pass.
 */
int test_suite_run(const struct test_suite *suite)
{
	unsigned int nr_failures = 0;
     3da:	46b0      	mov	r8, r6
		} else if (ret > TEST_PASS) {
			nr_failures++;
		}
	}

	dbg_info("Test suite '%s' complete: %u tests, %u failures, %u errors\r\n\r\n",
     3dc:	68b9      	ldr	r1, [r7, #8]
     3de:	9e03      	ldr	r6, [sp, #12]
     3e0:	9600      	str	r6, [sp, #0]
     3e2:	4812      	ldr	r0, [pc, #72]	; (42c <test_suite_run+0x12c>)
     3e4:	4643      	mov	r3, r8
     3e6:	4c06      	ldr	r4, [pc, #24]	; (400 <test_suite_run+0x100>)
     3e8:	47a0      	blx	r4
			suite->name, suite->nr_tests, nr_failures, nr_errors);

	return nr_errors + nr_failures;
     3ea:	1c30      	adds	r0, r6, #0
     3ec:	4440      	add	r0, r8
}
     3ee:	b005      	add	sp, #20
     3f0:	bc3c      	pop	{r2, r3, r4, r5}
     3f2:	4690      	mov	r8, r2
     3f4:	4699      	mov	r9, r3
     3f6:	46a2      	mov	sl, r4
     3f8:	46ab      	mov	fp, r5
     3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3fc:	000044c8 	.word	0x000044c8
     400:	000033cd 	.word	0x000033cd
     404:	2000008c 	.word	0x2000008c
     408:	000044e8 	.word	0x000044e8
     40c:	000044fc 	.word	0x000044fc
     410:	000034c5 	.word	0x000034c5
     414:	000001dd 	.word	0x000001dd
     418:	00004510 	.word	0x00004510
     41c:	00004534 	.word	0x00004534
     420:	0000453c 	.word	0x0000453c
     424:	00004544 	.word	0x00004544
     428:	0000455c 	.word	0x0000455c
     42c:	00004564 	.word	0x00004564

00000430 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     430:	b5f0      	push	{r4, r5, r6, r7, lr}
     432:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     434:	ac01      	add	r4, sp, #4
     436:	2501      	movs	r5, #1
     438:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     43a:	2700      	movs	r7, #0
     43c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     43e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     440:	203e      	movs	r0, #62	; 0x3e
     442:	1c21      	adds	r1, r4, #0
     444:	4e06      	ldr	r6, [pc, #24]	; (460 <system_board_init+0x30>)
     446:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     448:	2280      	movs	r2, #128	; 0x80
     44a:	05d2      	lsls	r2, r2, #23
     44c:	4b05      	ldr	r3, [pc, #20]	; (464 <system_board_init+0x34>)
     44e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     450:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     452:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     454:	200f      	movs	r0, #15
     456:	1c21      	adds	r1, r4, #0
     458:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     45a:	b003      	add	sp, #12
     45c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     45e:	46c0      	nop			; (mov r8, r8)
     460:	00000469 	.word	0x00000469
     464:	41004480 	.word	0x41004480

00000468 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     468:	b570      	push	{r4, r5, r6, lr}
     46a:	b084      	sub	sp, #16
     46c:	1c05      	adds	r5, r0, #0
     46e:	1c0c      	adds	r4, r1, #0
 * \internal
 * \brief Get pointer to current test.
 */
static inline struct test_case *test_get_case(void)
{
	return test_case_ptr;
     470:	4b13      	ldr	r3, [pc, #76]	; (4c0 <port_pin_set_config+0x58>)
     472:	6818      	ldr	r0, [r3, #0]
	/* Sanity check arguments */
	Assert(config);
     474:	2800      	cmp	r0, #0
     476:	d00b      	beq.n	490 <port_pin_set_config+0x28>
     478:	2900      	cmp	r1, #0
     47a:	d112      	bne.n	4a2 <port_pin_set_config+0x3a>
     47c:	4a11      	ldr	r2, [pc, #68]	; (4c4 <port_pin_set_config+0x5c>)
     47e:	9200      	str	r2, [sp, #0]
     480:	4a11      	ldr	r2, [pc, #68]	; (4c8 <port_pin_set_config+0x60>)
     482:	9201      	str	r2, [sp, #4]
     484:	2101      	movs	r1, #1
     486:	4a11      	ldr	r2, [pc, #68]	; (4cc <port_pin_set_config+0x64>)
     488:	2341      	movs	r3, #65	; 0x41
     48a:	4e11      	ldr	r6, [pc, #68]	; (4d0 <port_pin_set_config+0x68>)
     48c:	47b0      	blx	r6
     48e:	e008      	b.n	4a2 <port_pin_set_config+0x3a>
     490:	2900      	cmp	r1, #0
     492:	d106      	bne.n	4a2 <port_pin_set_config+0x3a>
     494:	480f      	ldr	r0, [pc, #60]	; (4d4 <port_pin_set_config+0x6c>)
     496:	490c      	ldr	r1, [pc, #48]	; (4c8 <port_pin_set_config+0x60>)
     498:	4a0c      	ldr	r2, [pc, #48]	; (4cc <port_pin_set_config+0x64>)
     49a:	2341      	movs	r3, #65	; 0x41
     49c:	4c0e      	ldr	r4, [pc, #56]	; (4d8 <port_pin_set_config+0x70>)
     49e:	47a0      	blx	r4
     4a0:	e7fe      	b.n	4a0 <port_pin_set_config+0x38>
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     4a2:	a903      	add	r1, sp, #12
     4a4:	2280      	movs	r2, #128	; 0x80
     4a6:	700a      	strb	r2, [r1, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     4a8:	7822      	ldrb	r2, [r4, #0]
     4aa:	704a      	strb	r2, [r1, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     4ac:	7862      	ldrb	r2, [r4, #1]
     4ae:	708a      	strb	r2, [r1, #2]
	pinmux_config.powersave    = config->powersave;
     4b0:	78a2      	ldrb	r2, [r4, #2]
     4b2:	70ca      	strb	r2, [r1, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     4b4:	1c28      	adds	r0, r5, #0
     4b6:	4b09      	ldr	r3, [pc, #36]	; (4dc <port_pin_set_config+0x74>)
     4b8:	4798      	blx	r3
}
     4ba:	b004      	add	sp, #16
     4bc:	bd70      	pop	{r4, r5, r6, pc}
     4be:	46c0      	nop			; (mov r8, r8)
     4c0:	2000008c 	.word	0x2000008c
     4c4:	00004444 	.word	0x00004444
     4c8:	000045c8 	.word	0x000045c8
     4cc:	000045a4 	.word	0x000045a4
     4d0:	0000020d 	.word	0x0000020d
     4d4:	00004484 	.word	0x00004484
     4d8:	000033cd 	.word	0x000033cd
     4dc:	000023c5 	.word	0x000023c5

000004e0 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     4e0:	b510      	push	{r4, lr}
     4e2:	1c03      	adds	r3, r0, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     4e4:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     4e6:	2040      	movs	r0, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     4e8:	4299      	cmp	r1, r3
     4ea:	d30c      	bcc.n	506 <_sercom_get_sync_baud_val+0x26>
     4ec:	2400      	movs	r4, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     4ee:	1ac9      	subs	r1, r1, r3
		baud_calculated++;
     4f0:	1c60      	adds	r0, r4, #1
     4f2:	b280      	uxth	r0, r0
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     4f4:	428b      	cmp	r3, r1
     4f6:	d801      	bhi.n	4fc <_sercom_get_sync_baud_val+0x1c>
		clock_value = clock_value - baudrate;
		baud_calculated++;
     4f8:	1c04      	adds	r4, r0, #0
     4fa:	e7f8      	b.n	4ee <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     4fc:	2040      	movs	r0, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     4fe:	2cff      	cmp	r4, #255	; 0xff
     500:	d801      	bhi.n	506 <_sercom_get_sync_baud_val+0x26>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     502:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     504:	2000      	movs	r0, #0
	}
}
     506:	bd10      	pop	{r4, pc}

00000508 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     508:	b5f0      	push	{r4, r5, r6, r7, lr}
     50a:	465f      	mov	r7, fp
     50c:	4656      	mov	r6, sl
     50e:	464d      	mov	r5, r9
     510:	4644      	mov	r4, r8
     512:	b4f0      	push	{r4, r5, r6, r7}
     514:	b087      	sub	sp, #28
     516:	1c06      	adds	r6, r0, #0
     518:	1c0d      	adds	r5, r1, #0
     51a:	9204      	str	r2, [sp, #16]
     51c:	aa10      	add	r2, sp, #64	; 0x40
     51e:	7810      	ldrb	r0, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     520:	1c32      	adds	r2, r6, #0
     522:	4342      	muls	r2, r0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     524:	2440      	movs	r4, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     526:	428a      	cmp	r2, r1
     528:	d900      	bls.n	52c <_sercom_get_async_baud_val+0x24>
     52a:	e0b3      	b.n	694 <_sercom_get_async_baud_val+0x18c>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     52c:	2b00      	cmp	r3, #0
     52e:	d14b      	bne.n	5c8 <_sercom_get_async_baud_val+0xc0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     530:	2100      	movs	r1, #0
     532:	1c32      	adds	r2, r6, #0
     534:	4c5e      	ldr	r4, [pc, #376]	; (6b0 <_sercom_get_async_baud_val+0x1a8>)
     536:	47a0      	blx	r4
     538:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     53a:	1c2e      	adds	r6, r5, #0
     53c:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     53e:	2000      	movs	r0, #0
     540:	2100      	movs	r1, #0
     542:	2200      	movs	r2, #0
     544:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     546:	243f      	movs	r4, #63	; 0x3f
     548:	46a4      	mov	ip, r4
		bit_shift = (uint64_t)1 << i;
     54a:	2501      	movs	r5, #1
     54c:	46a8      	mov	r8, r5
     54e:	9002      	str	r0, [sp, #8]
     550:	9103      	str	r1, [sp, #12]
     552:	4661      	mov	r1, ip
     554:	3920      	subs	r1, #32
     556:	d403      	bmi.n	560 <_sercom_get_async_baud_val+0x58>
     558:	4640      	mov	r0, r8
     55a:	4088      	lsls	r0, r1
     55c:	4681      	mov	r9, r0
     55e:	e005      	b.n	56c <_sercom_get_async_baud_val+0x64>
     560:	2120      	movs	r1, #32
     562:	4665      	mov	r5, ip
     564:	1b4c      	subs	r4, r1, r5
     566:	4640      	mov	r0, r8
     568:	40e0      	lsrs	r0, r4
     56a:	4681      	mov	r9, r0
     56c:	4641      	mov	r1, r8
     56e:	4664      	mov	r4, ip
     570:	40a1      	lsls	r1, r4
     572:	468a      	mov	sl, r1

		r = r << 1;
     574:	1c10      	adds	r0, r2, #0
     576:	1c19      	adds	r1, r3, #0
     578:	1880      	adds	r0, r0, r2
     57a:	4159      	adcs	r1, r3
     57c:	1c02      	adds	r2, r0, #0
     57e:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     580:	465d      	mov	r5, fp
     582:	464c      	mov	r4, r9
     584:	4225      	tst	r5, r4
     586:	d002      	beq.n	58e <_sercom_get_async_baud_val+0x86>
			r |= 0x01;
     588:	4642      	mov	r2, r8
     58a:	4302      	orrs	r2, r0
     58c:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     58e:	429f      	cmp	r7, r3
     590:	d80c      	bhi.n	5ac <_sercom_get_async_baud_val+0xa4>
     592:	d101      	bne.n	598 <_sercom_get_async_baud_val+0x90>
     594:	4296      	cmp	r6, r2
     596:	d809      	bhi.n	5ac <_sercom_get_async_baud_val+0xa4>
			r = r - d;
     598:	1b92      	subs	r2, r2, r6
     59a:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     59c:	4650      	mov	r0, sl
     59e:	9d02      	ldr	r5, [sp, #8]
     5a0:	4328      	orrs	r0, r5
     5a2:	4649      	mov	r1, r9
     5a4:	9c03      	ldr	r4, [sp, #12]
     5a6:	4321      	orrs	r1, r4
     5a8:	9002      	str	r0, [sp, #8]
     5aa:	9103      	str	r1, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     5ac:	4665      	mov	r5, ip
     5ae:	3d01      	subs	r5, #1
     5b0:	46ac      	mov	ip, r5
     5b2:	d2ce      	bcs.n	552 <_sercom_get_async_baud_val+0x4a>
     5b4:	9802      	ldr	r0, [sp, #8]
     5b6:	9903      	ldr	r1, [sp, #12]

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
     5b8:	4b3c      	ldr	r3, [pc, #240]	; (6ac <_sercom_get_async_baud_val+0x1a4>)
     5ba:	4a3b      	ldr	r2, [pc, #236]	; (6a8 <_sercom_get_async_baud_val+0x1a0>)
     5bc:	1a12      	subs	r2, r2, r0
     5be:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     5c0:	0c12      	lsrs	r2, r2, #16
     5c2:	041b      	lsls	r3, r3, #16
     5c4:	431a      	orrs	r2, r3
     5c6:	e062      	b.n	68e <_sercom_get_async_baud_val+0x186>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     5c8:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     5ca:	2b01      	cmp	r3, #1
     5cc:	d15f      	bne.n	68e <_sercom_get_async_baud_val+0x186>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     5ce:	0f4f      	lsrs	r7, r1, #29
     5d0:	46b9      	mov	r9, r7
     5d2:	00cd      	lsls	r5, r1, #3
     5d4:	46ab      	mov	fp, r5
			temp2 = ((uint64_t)baudrate * sample_num);
     5d6:	2100      	movs	r1, #0
     5d8:	1c32      	adds	r2, r6, #0
     5da:	2300      	movs	r3, #0
     5dc:	4c34      	ldr	r4, [pc, #208]	; (6b0 <_sercom_get_async_baud_val+0x1a8>)
     5de:	47a0      	blx	r4
     5e0:	1c06      	adds	r6, r0, #0
     5e2:	1c0f      	adds	r7, r1, #0
     5e4:	2300      	movs	r3, #0
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     5e6:	2501      	movs	r5, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     5e8:	9602      	str	r6, [sp, #8]
     5ea:	9703      	str	r7, [sp, #12]
     5ec:	469a      	mov	sl, r3
     5ee:	4650      	mov	r0, sl
     5f0:	b2c0      	uxtb	r0, r0
     5f2:	9005      	str	r0, [sp, #20]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     5f4:	2100      	movs	r1, #0
     5f6:	4688      	mov	r8, r1
     5f8:	2200      	movs	r2, #0
     5fa:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     5fc:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     5fe:	1c27      	adds	r7, r4, #0
     600:	3f20      	subs	r7, #32
     602:	d403      	bmi.n	60c <_sercom_get_async_baud_val+0x104>
     604:	1c2e      	adds	r6, r5, #0
     606:	40be      	lsls	r6, r7
     608:	9601      	str	r6, [sp, #4]
     60a:	e004      	b.n	616 <_sercom_get_async_baud_val+0x10e>
     60c:	2020      	movs	r0, #32
     60e:	1b07      	subs	r7, r0, r4
     610:	1c29      	adds	r1, r5, #0
     612:	40f9      	lsrs	r1, r7
     614:	9101      	str	r1, [sp, #4]
     616:	1c2e      	adds	r6, r5, #0
     618:	40a6      	lsls	r6, r4
     61a:	9600      	str	r6, [sp, #0]

		r = r << 1;
     61c:	1c10      	adds	r0, r2, #0
     61e:	1c19      	adds	r1, r3, #0
     620:	1880      	adds	r0, r0, r2
     622:	4159      	adcs	r1, r3
     624:	1c02      	adds	r2, r0, #0
     626:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     628:	465f      	mov	r7, fp
     62a:	4037      	ands	r7, r6
     62c:	46bc      	mov	ip, r7
     62e:	9e01      	ldr	r6, [sp, #4]
     630:	464f      	mov	r7, r9
     632:	403e      	ands	r6, r7
     634:	4667      	mov	r7, ip
     636:	433e      	orrs	r6, r7
     638:	d002      	beq.n	640 <_sercom_get_async_baud_val+0x138>
			r |= 0x01;
     63a:	1c2a      	adds	r2, r5, #0
     63c:	4302      	orrs	r2, r0
     63e:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     640:	9803      	ldr	r0, [sp, #12]
     642:	4298      	cmp	r0, r3
     644:	d80b      	bhi.n	65e <_sercom_get_async_baud_val+0x156>
     646:	d102      	bne.n	64e <_sercom_get_async_baud_val+0x146>
     648:	9902      	ldr	r1, [sp, #8]
     64a:	4291      	cmp	r1, r2
     64c:	d807      	bhi.n	65e <_sercom_get_async_baud_val+0x156>
			r = r - d;
     64e:	9e02      	ldr	r6, [sp, #8]
     650:	9f03      	ldr	r7, [sp, #12]
     652:	1b92      	subs	r2, r2, r6
     654:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     656:	4647      	mov	r7, r8
     658:	9800      	ldr	r0, [sp, #0]
     65a:	4307      	orrs	r7, r0
     65c:	46b8      	mov	r8, r7
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     65e:	3c01      	subs	r4, #1
     660:	d2cd      	bcs.n	5fe <_sercom_get_async_baud_val+0xf6>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     662:	4641      	mov	r1, r8
     664:	4652      	mov	r2, sl
     666:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     668:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     66a:	4c12      	ldr	r4, [pc, #72]	; (6b4 <_sercom_get_async_baud_val+0x1ac>)
     66c:	42a3      	cmp	r3, r4
     66e:	d908      	bls.n	682 <_sercom_get_async_baud_val+0x17a>
     670:	9a05      	ldr	r2, [sp, #20]
     672:	3201      	adds	r2, #1
     674:	b2d2      	uxtb	r2, r2
     676:	9205      	str	r2, [sp, #20]
     678:	2601      	movs	r6, #1
     67a:	44b2      	add	sl, r6
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     67c:	4657      	mov	r7, sl
     67e:	2f08      	cmp	r7, #8
     680:	d1b5      	bne.n	5ee <_sercom_get_async_baud_val+0xe6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     682:	2440      	movs	r4, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     684:	9805      	ldr	r0, [sp, #20]
     686:	2808      	cmp	r0, #8
     688:	d004      	beq.n	694 <_sercom_get_async_baud_val+0x18c>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     68a:	0342      	lsls	r2, r0, #13
     68c:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     68e:	9c04      	ldr	r4, [sp, #16]
     690:	8022      	strh	r2, [r4, #0]
	return STATUS_OK;
     692:	2400      	movs	r4, #0
}
     694:	1c20      	adds	r0, r4, #0
     696:	b007      	add	sp, #28
     698:	bc3c      	pop	{r2, r3, r4, r5}
     69a:	4690      	mov	r8, r2
     69c:	4699      	mov	r9, r3
     69e:	46a2      	mov	sl, r4
     6a0:	46ab      	mov	fp, r5
     6a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6a4:	46c0      	nop			; (mov r8, r8)
     6a6:	46c0      	nop			; (mov r8, r8)
     6a8:	00000000 	.word	0x00000000
     6ac:	00000001 	.word	0x00000001
     6b0:	00003319 	.word	0x00003319
     6b4:	00001fff 	.word	0x00001fff

000006b8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     6b8:	b510      	push	{r4, lr}
     6ba:	b082      	sub	sp, #8
     6bc:	1c04      	adds	r4, r0, #0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
     6be:	4b0f      	ldr	r3, [pc, #60]	; (6fc <sercom_set_gclk_generator+0x44>)
     6c0:	781b      	ldrb	r3, [r3, #0]
     6c2:	2b00      	cmp	r3, #0
     6c4:	d001      	beq.n	6ca <sercom_set_gclk_generator+0x12>
     6c6:	2900      	cmp	r1, #0
     6c8:	d00d      	beq.n	6e6 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     6ca:	a901      	add	r1, sp, #4
     6cc:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     6ce:	2013      	movs	r0, #19
     6d0:	4b0b      	ldr	r3, [pc, #44]	; (700 <sercom_set_gclk_generator+0x48>)
     6d2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     6d4:	2013      	movs	r0, #19
     6d6:	4b0b      	ldr	r3, [pc, #44]	; (704 <sercom_set_gclk_generator+0x4c>)
     6d8:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
     6da:	4b08      	ldr	r3, [pc, #32]	; (6fc <sercom_set_gclk_generator+0x44>)
     6dc:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     6de:	2201      	movs	r2, #1
     6e0:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     6e2:	2000      	movs	r0, #0
     6e4:	e007      	b.n	6f6 <sercom_set_gclk_generator+0x3e>
	} else if (generator_source == _sercom_config.generator_source) {
     6e6:	4b05      	ldr	r3, [pc, #20]	; (6fc <sercom_set_gclk_generator+0x44>)
     6e8:	785a      	ldrb	r2, [r3, #1]
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
     6ea:	201d      	movs	r0, #29
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config. */
		return STATUS_OK;
     6ec:	1b14      	subs	r4, r2, r4
     6ee:	1e62      	subs	r2, r4, #1
     6f0:	4194      	sbcs	r4, r2
     6f2:	4264      	negs	r4, r4
     6f4:	4020      	ands	r0, r4
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     6f6:	b002      	add	sp, #8
     6f8:	bd10      	pop	{r4, pc}
     6fa:	46c0      	nop			; (mov r8, r8)
     6fc:	200000ec 	.word	0x200000ec
     700:	00002201 	.word	0x00002201
     704:	00002115 	.word	0x00002115

00000708 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
     708:	b510      	push	{r4, lr}
     70a:	b082      	sub	sp, #8
	switch ((uintptr_t)sercom_module) {
     70c:	4b49      	ldr	r3, [pc, #292]	; (834 <_sercom_get_default_pad+0x12c>)
     70e:	4298      	cmp	r0, r3
     710:	d02d      	beq.n	76e <_sercom_get_default_pad+0x66>
     712:	d806      	bhi.n	722 <_sercom_get_default_pad+0x1a>
     714:	4b48      	ldr	r3, [pc, #288]	; (838 <_sercom_get_default_pad+0x130>)
     716:	4298      	cmp	r0, r3
     718:	d00d      	beq.n	736 <_sercom_get_default_pad+0x2e>
     71a:	4b48      	ldr	r3, [pc, #288]	; (83c <_sercom_get_default_pad+0x134>)
     71c:	4298      	cmp	r0, r3
     71e:	d017      	beq.n	750 <_sercom_get_default_pad+0x48>
     720:	e061      	b.n	7e6 <_sercom_get_default_pad+0xde>
     722:	4b47      	ldr	r3, [pc, #284]	; (840 <_sercom_get_default_pad+0x138>)
     724:	4298      	cmp	r0, r3
     726:	d040      	beq.n	7aa <_sercom_get_default_pad+0xa2>
     728:	4b46      	ldr	r3, [pc, #280]	; (844 <_sercom_get_default_pad+0x13c>)
     72a:	4298      	cmp	r0, r3
     72c:	d04c      	beq.n	7c8 <_sercom_get_default_pad+0xc0>
     72e:	4b46      	ldr	r3, [pc, #280]	; (848 <_sercom_get_default_pad+0x140>)
     730:	4298      	cmp	r0, r3
     732:	d158      	bne.n	7e6 <_sercom_get_default_pad+0xde>
     734:	e02a      	b.n	78c <_sercom_get_default_pad+0x84>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     736:	2901      	cmp	r1, #1
     738:	d06f      	beq.n	81a <_sercom_get_default_pad+0x112>
     73a:	2900      	cmp	r1, #0
     73c:	d06b      	beq.n	816 <_sercom_get_default_pad+0x10e>
     73e:	2902      	cmp	r1, #2
     740:	d002      	beq.n	748 <_sercom_get_default_pad+0x40>
     742:	2903      	cmp	r1, #3
     744:	d002      	beq.n	74c <_sercom_get_default_pad+0x44>
     746:	e04e      	b.n	7e6 <_sercom_get_default_pad+0xde>
     748:	4840      	ldr	r0, [pc, #256]	; (84c <_sercom_get_default_pad+0x144>)
     74a:	e071      	b.n	830 <_sercom_get_default_pad+0x128>
     74c:	4840      	ldr	r0, [pc, #256]	; (850 <_sercom_get_default_pad+0x148>)
     74e:	e06f      	b.n	830 <_sercom_get_default_pad+0x128>
     750:	2901      	cmp	r1, #1
     752:	d064      	beq.n	81e <_sercom_get_default_pad+0x116>
     754:	2900      	cmp	r1, #0
     756:	d004      	beq.n	762 <_sercom_get_default_pad+0x5a>
     758:	2902      	cmp	r1, #2
     75a:	d004      	beq.n	766 <_sercom_get_default_pad+0x5e>
     75c:	2903      	cmp	r1, #3
     75e:	d004      	beq.n	76a <_sercom_get_default_pad+0x62>
     760:	e041      	b.n	7e6 <_sercom_get_default_pad+0xde>
     762:	2003      	movs	r0, #3
     764:	e064      	b.n	830 <_sercom_get_default_pad+0x128>
     766:	483b      	ldr	r0, [pc, #236]	; (854 <_sercom_get_default_pad+0x14c>)
     768:	e062      	b.n	830 <_sercom_get_default_pad+0x128>
     76a:	483b      	ldr	r0, [pc, #236]	; (858 <_sercom_get_default_pad+0x150>)
     76c:	e060      	b.n	830 <_sercom_get_default_pad+0x128>
     76e:	2901      	cmp	r1, #1
     770:	d057      	beq.n	822 <_sercom_get_default_pad+0x11a>
     772:	2900      	cmp	r1, #0
     774:	d004      	beq.n	780 <_sercom_get_default_pad+0x78>
     776:	2902      	cmp	r1, #2
     778:	d004      	beq.n	784 <_sercom_get_default_pad+0x7c>
     77a:	2903      	cmp	r1, #3
     77c:	d004      	beq.n	788 <_sercom_get_default_pad+0x80>
     77e:	e032      	b.n	7e6 <_sercom_get_default_pad+0xde>
     780:	4836      	ldr	r0, [pc, #216]	; (85c <_sercom_get_default_pad+0x154>)
     782:	e055      	b.n	830 <_sercom_get_default_pad+0x128>
     784:	4836      	ldr	r0, [pc, #216]	; (860 <_sercom_get_default_pad+0x158>)
     786:	e053      	b.n	830 <_sercom_get_default_pad+0x128>
     788:	4836      	ldr	r0, [pc, #216]	; (864 <_sercom_get_default_pad+0x15c>)
     78a:	e051      	b.n	830 <_sercom_get_default_pad+0x128>
     78c:	2901      	cmp	r1, #1
     78e:	d04a      	beq.n	826 <_sercom_get_default_pad+0x11e>
     790:	2900      	cmp	r1, #0
     792:	d004      	beq.n	79e <_sercom_get_default_pad+0x96>
     794:	2902      	cmp	r1, #2
     796:	d004      	beq.n	7a2 <_sercom_get_default_pad+0x9a>
     798:	2903      	cmp	r1, #3
     79a:	d004      	beq.n	7a6 <_sercom_get_default_pad+0x9e>
     79c:	e023      	b.n	7e6 <_sercom_get_default_pad+0xde>
     79e:	4832      	ldr	r0, [pc, #200]	; (868 <_sercom_get_default_pad+0x160>)
     7a0:	e046      	b.n	830 <_sercom_get_default_pad+0x128>
     7a2:	4832      	ldr	r0, [pc, #200]	; (86c <_sercom_get_default_pad+0x164>)
     7a4:	e044      	b.n	830 <_sercom_get_default_pad+0x128>
     7a6:	4832      	ldr	r0, [pc, #200]	; (870 <_sercom_get_default_pad+0x168>)
     7a8:	e042      	b.n	830 <_sercom_get_default_pad+0x128>
     7aa:	2901      	cmp	r1, #1
     7ac:	d03d      	beq.n	82a <_sercom_get_default_pad+0x122>
     7ae:	2900      	cmp	r1, #0
     7b0:	d004      	beq.n	7bc <_sercom_get_default_pad+0xb4>
     7b2:	2902      	cmp	r1, #2
     7b4:	d004      	beq.n	7c0 <_sercom_get_default_pad+0xb8>
     7b6:	2903      	cmp	r1, #3
     7b8:	d004      	beq.n	7c4 <_sercom_get_default_pad+0xbc>
     7ba:	e014      	b.n	7e6 <_sercom_get_default_pad+0xde>
     7bc:	482d      	ldr	r0, [pc, #180]	; (874 <_sercom_get_default_pad+0x16c>)
     7be:	e037      	b.n	830 <_sercom_get_default_pad+0x128>
     7c0:	482d      	ldr	r0, [pc, #180]	; (878 <_sercom_get_default_pad+0x170>)
     7c2:	e035      	b.n	830 <_sercom_get_default_pad+0x128>
     7c4:	482d      	ldr	r0, [pc, #180]	; (87c <_sercom_get_default_pad+0x174>)
     7c6:	e033      	b.n	830 <_sercom_get_default_pad+0x128>
     7c8:	2901      	cmp	r1, #1
     7ca:	d030      	beq.n	82e <_sercom_get_default_pad+0x126>
     7cc:	2900      	cmp	r1, #0
     7ce:	d004      	beq.n	7da <_sercom_get_default_pad+0xd2>
     7d0:	2902      	cmp	r1, #2
     7d2:	d004      	beq.n	7de <_sercom_get_default_pad+0xd6>
     7d4:	2903      	cmp	r1, #3
     7d6:	d004      	beq.n	7e2 <_sercom_get_default_pad+0xda>
     7d8:	e005      	b.n	7e6 <_sercom_get_default_pad+0xde>
     7da:	4829      	ldr	r0, [pc, #164]	; (880 <_sercom_get_default_pad+0x178>)
     7dc:	e028      	b.n	830 <_sercom_get_default_pad+0x128>
     7de:	4829      	ldr	r0, [pc, #164]	; (884 <_sercom_get_default_pad+0x17c>)
     7e0:	e026      	b.n	830 <_sercom_get_default_pad+0x128>
     7e2:	4829      	ldr	r0, [pc, #164]	; (888 <_sercom_get_default_pad+0x180>)
     7e4:	e024      	b.n	830 <_sercom_get_default_pad+0x128>
     7e6:	4b29      	ldr	r3, [pc, #164]	; (88c <_sercom_get_default_pad+0x184>)
     7e8:	6818      	ldr	r0, [r3, #0]
	}

	Assert(false);
     7ea:	2800      	cmp	r0, #0
     7ec:	d00b      	beq.n	806 <_sercom_get_default_pad+0xfe>
     7ee:	4b28      	ldr	r3, [pc, #160]	; (890 <_sercom_get_default_pad+0x188>)
     7f0:	9300      	str	r3, [sp, #0]
     7f2:	4b28      	ldr	r3, [pc, #160]	; (894 <_sercom_get_default_pad+0x18c>)
     7f4:	9301      	str	r3, [sp, #4]
     7f6:	2101      	movs	r1, #1
     7f8:	4a27      	ldr	r2, [pc, #156]	; (898 <_sercom_get_default_pad+0x190>)
     7fa:	2386      	movs	r3, #134	; 0x86
     7fc:	005b      	lsls	r3, r3, #1
     7fe:	4c27      	ldr	r4, [pc, #156]	; (89c <_sercom_get_default_pad+0x194>)
     800:	47a0      	blx	r4
	return 0;
     802:	2000      	movs	r0, #0
     804:	e014      	b.n	830 <_sercom_get_default_pad+0x128>
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
     806:	4826      	ldr	r0, [pc, #152]	; (8a0 <_sercom_get_default_pad+0x198>)
     808:	4922      	ldr	r1, [pc, #136]	; (894 <_sercom_get_default_pad+0x18c>)
     80a:	4a23      	ldr	r2, [pc, #140]	; (898 <_sercom_get_default_pad+0x190>)
     80c:	2386      	movs	r3, #134	; 0x86
     80e:	005b      	lsls	r3, r3, #1
     810:	4c24      	ldr	r4, [pc, #144]	; (8a4 <_sercom_get_default_pad+0x19c>)
     812:	47a0      	blx	r4
     814:	e7fe      	b.n	814 <_sercom_get_default_pad+0x10c>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     816:	4824      	ldr	r0, [pc, #144]	; (8a8 <_sercom_get_default_pad+0x1a0>)
     818:	e00a      	b.n	830 <_sercom_get_default_pad+0x128>
     81a:	4824      	ldr	r0, [pc, #144]	; (8ac <_sercom_get_default_pad+0x1a4>)
     81c:	e008      	b.n	830 <_sercom_get_default_pad+0x128>
     81e:	4824      	ldr	r0, [pc, #144]	; (8b0 <_sercom_get_default_pad+0x1a8>)
     820:	e006      	b.n	830 <_sercom_get_default_pad+0x128>
     822:	4824      	ldr	r0, [pc, #144]	; (8b4 <_sercom_get_default_pad+0x1ac>)
     824:	e004      	b.n	830 <_sercom_get_default_pad+0x128>
     826:	4824      	ldr	r0, [pc, #144]	; (8b8 <_sercom_get_default_pad+0x1b0>)
     828:	e002      	b.n	830 <_sercom_get_default_pad+0x128>
     82a:	4824      	ldr	r0, [pc, #144]	; (8bc <_sercom_get_default_pad+0x1b4>)
     82c:	e000      	b.n	830 <_sercom_get_default_pad+0x128>
     82e:	4824      	ldr	r0, [pc, #144]	; (8c0 <_sercom_get_default_pad+0x1b8>)
	}

	Assert(false);
	return 0;
}
     830:	b002      	add	sp, #8
     832:	bd10      	pop	{r4, pc}
     834:	42001000 	.word	0x42001000
     838:	42000800 	.word	0x42000800
     83c:	42000c00 	.word	0x42000c00
     840:	42001800 	.word	0x42001800
     844:	42001c00 	.word	0x42001c00
     848:	42001400 	.word	0x42001400
     84c:	00060003 	.word	0x00060003
     850:	00070003 	.word	0x00070003
     854:	001e0003 	.word	0x001e0003
     858:	001f0003 	.word	0x001f0003
     85c:	00080003 	.word	0x00080003
     860:	000a0003 	.word	0x000a0003
     864:	000b0003 	.word	0x000b0003
     868:	00100003 	.word	0x00100003
     86c:	00120003 	.word	0x00120003
     870:	00130003 	.word	0x00130003
     874:	000c0003 	.word	0x000c0003
     878:	000e0003 	.word	0x000e0003
     87c:	000f0003 	.word	0x000f0003
     880:	00160003 	.word	0x00160003
     884:	00180003 	.word	0x00180003
     888:	00190003 	.word	0x00190003
     88c:	2000008c 	.word	0x2000008c
     890:	00004444 	.word	0x00004444
     894:	00004618 	.word	0x00004618
     898:	000045f0 	.word	0x000045f0
     89c:	0000020d 	.word	0x0000020d
     8a0:	00004484 	.word	0x00004484
     8a4:	000033cd 	.word	0x000033cd
     8a8:	00040003 	.word	0x00040003
     8ac:	00050003 	.word	0x00050003
     8b0:	00010003 	.word	0x00010003
     8b4:	00090003 	.word	0x00090003
     8b8:	00110003 	.word	0x00110003
     8bc:	000d0003 	.word	0x000d0003
     8c0:	00170003 	.word	0x00170003

000008c4 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     8c4:	b570      	push	{r4, r5, r6, lr}
     8c6:	b088      	sub	sp, #32
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     8c8:	a902      	add	r1, sp, #8
     8ca:	4a18      	ldr	r2, [pc, #96]	; (92c <_sercom_get_sercom_inst_index+0x68>)
     8cc:	1c0b      	adds	r3, r1, #0
     8ce:	ca70      	ldmia	r2!, {r4, r5, r6}
     8d0:	c370      	stmia	r3!, {r4, r5, r6}
     8d2:	ca32      	ldmia	r2!, {r1, r4, r5}
     8d4:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     8d6:	9e02      	ldr	r6, [sp, #8]
     8d8:	4286      	cmp	r6, r0
     8da:	d006      	beq.n	8ea <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     8dc:	2301      	movs	r3, #1
     8de:	009a      	lsls	r2, r3, #2
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     8e0:	a902      	add	r1, sp, #8
     8e2:	5852      	ldr	r2, [r2, r1]
     8e4:	4282      	cmp	r2, r0
     8e6:	d103      	bne.n	8f0 <_sercom_get_sercom_inst_index+0x2c>
     8e8:	e000      	b.n	8ec <_sercom_get_sercom_inst_index+0x28>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     8ea:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     8ec:	b2d8      	uxtb	r0, r3
     8ee:	e01a      	b.n	926 <_sercom_get_sercom_inst_index+0x62>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     8f0:	3301      	adds	r3, #1
     8f2:	2b06      	cmp	r3, #6
     8f4:	d1f3      	bne.n	8de <_sercom_get_sercom_inst_index+0x1a>
     8f6:	4b0e      	ldr	r3, [pc, #56]	; (930 <_sercom_get_sercom_inst_index+0x6c>)
     8f8:	6818      	ldr	r0, [r3, #0]
			return i;
		}
	}

	/* Invalid data given. */
	Assert(false);
     8fa:	2800      	cmp	r0, #0
     8fc:	d00b      	beq.n	916 <_sercom_get_sercom_inst_index+0x52>
     8fe:	4b0d      	ldr	r3, [pc, #52]	; (934 <_sercom_get_sercom_inst_index+0x70>)
     900:	9300      	str	r3, [sp, #0]
     902:	4b0d      	ldr	r3, [pc, #52]	; (938 <_sercom_get_sercom_inst_index+0x74>)
     904:	9301      	str	r3, [sp, #4]
     906:	2101      	movs	r1, #1
     908:	4a0c      	ldr	r2, [pc, #48]	; (93c <_sercom_get_sercom_inst_index+0x78>)
     90a:	2393      	movs	r3, #147	; 0x93
     90c:	005b      	lsls	r3, r3, #1
     90e:	4c0c      	ldr	r4, [pc, #48]	; (940 <_sercom_get_sercom_inst_index+0x7c>)
     910:	47a0      	blx	r4
	return 0;
     912:	2000      	movs	r0, #0
     914:	e007      	b.n	926 <_sercom_get_sercom_inst_index+0x62>
			return i;
		}
	}

	/* Invalid data given. */
	Assert(false);
     916:	480b      	ldr	r0, [pc, #44]	; (944 <_sercom_get_sercom_inst_index+0x80>)
     918:	4907      	ldr	r1, [pc, #28]	; (938 <_sercom_get_sercom_inst_index+0x74>)
     91a:	4a08      	ldr	r2, [pc, #32]	; (93c <_sercom_get_sercom_inst_index+0x78>)
     91c:	2393      	movs	r3, #147	; 0x93
     91e:	005b      	lsls	r3, r3, #1
     920:	4c09      	ldr	r4, [pc, #36]	; (948 <_sercom_get_sercom_inst_index+0x84>)
     922:	47a0      	blx	r4
     924:	e7fe      	b.n	924 <_sercom_get_sercom_inst_index+0x60>
	return 0;
}
     926:	b008      	add	sp, #32
     928:	bd70      	pop	{r4, r5, r6, pc}
     92a:	46c0      	nop			; (mov r8, r8)
     92c:	000045d8 	.word	0x000045d8
     930:	2000008c 	.word	0x2000008c
     934:	00004444 	.word	0x00004444
     938:	00004618 	.word	0x00004618
     93c:	000045f0 	.word	0x000045f0
     940:	0000020d 	.word	0x0000020d
     944:	00004484 	.word	0x00004484
     948:	000033cd 	.word	0x000033cd

0000094c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
     94c:	b510      	push	{r4, lr}
     94e:	b082      	sub	sp, #8
     950:	4b0b      	ldr	r3, [pc, #44]	; (980 <_sercom_default_handler+0x34>)
     952:	6818      	ldr	r0, [r3, #0]
	Assert(false);
     954:	2800      	cmp	r0, #0
     956:	d009      	beq.n	96c <_sercom_default_handler+0x20>
     958:	4b0a      	ldr	r3, [pc, #40]	; (984 <_sercom_default_handler+0x38>)
     95a:	9300      	str	r3, [sp, #0]
     95c:	4b0a      	ldr	r3, [pc, #40]	; (988 <_sercom_default_handler+0x3c>)
     95e:	9301      	str	r3, [sp, #4]
     960:	2101      	movs	r1, #1
     962:	4a0a      	ldr	r2, [pc, #40]	; (98c <_sercom_default_handler+0x40>)
     964:	2341      	movs	r3, #65	; 0x41
     966:	4c0a      	ldr	r4, [pc, #40]	; (990 <_sercom_default_handler+0x44>)
     968:	47a0      	blx	r4
     96a:	e006      	b.n	97a <_sercom_default_handler+0x2e>
     96c:	4809      	ldr	r0, [pc, #36]	; (994 <_sercom_default_handler+0x48>)
     96e:	4906      	ldr	r1, [pc, #24]	; (988 <_sercom_default_handler+0x3c>)
     970:	4a06      	ldr	r2, [pc, #24]	; (98c <_sercom_default_handler+0x40>)
     972:	2341      	movs	r3, #65	; 0x41
     974:	4c08      	ldr	r4, [pc, #32]	; (998 <_sercom_default_handler+0x4c>)
     976:	47a0      	blx	r4
     978:	e7fe      	b.n	978 <_sercom_default_handler+0x2c>
}
     97a:	b002      	add	sp, #8
     97c:	bd10      	pop	{r4, pc}
     97e:	46c0      	nop			; (mov r8, r8)
     980:	2000008c 	.word	0x2000008c
     984:	00004444 	.word	0x00004444
     988:	00004618 	.word	0x00004618
     98c:	00004628 	.word	0x00004628
     990:	0000020d 	.word	0x0000020d
     994:	00004484 	.word	0x00004484
     998:	000033cd 	.word	0x000033cd

0000099c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     99c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
     99e:	4b0a      	ldr	r3, [pc, #40]	; (9c8 <_sercom_set_handler+0x2c>)
     9a0:	781b      	ldrb	r3, [r3, #0]
     9a2:	2b00      	cmp	r3, #0
     9a4:	d10c      	bne.n	9c0 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     9a6:	4f09      	ldr	r7, [pc, #36]	; (9cc <_sercom_set_handler+0x30>)
     9a8:	4e09      	ldr	r6, [pc, #36]	; (9d0 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     9aa:	4d0a      	ldr	r5, [pc, #40]	; (9d4 <_sercom_set_handler+0x38>)
     9ac:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     9ae:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     9b0:	195a      	adds	r2, r3, r5
     9b2:	6014      	str	r4, [r2, #0]
     9b4:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     9b6:	2b18      	cmp	r3, #24
     9b8:	d1f9      	bne.n	9ae <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
     9ba:	2201      	movs	r2, #1
     9bc:	4b02      	ldr	r3, [pc, #8]	; (9c8 <_sercom_set_handler+0x2c>)
     9be:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     9c0:	0080      	lsls	r0, r0, #2
     9c2:	4b02      	ldr	r3, [pc, #8]	; (9cc <_sercom_set_handler+0x30>)
     9c4:	50c1      	str	r1, [r0, r3]
}
     9c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9c8:	200000f0 	.word	0x200000f0
     9cc:	200000f4 	.word	0x200000f4
     9d0:	0000094d 	.word	0x0000094d
     9d4:	20000130 	.word	0x20000130

000009d8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     9d8:	b510      	push	{r4, lr}
     9da:	b082      	sub	sp, #8
     9dc:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     9de:	4668      	mov	r0, sp
     9e0:	4905      	ldr	r1, [pc, #20]	; (9f8 <_sercom_get_interrupt_vector+0x20>)
     9e2:	2206      	movs	r2, #6
     9e4:	4b05      	ldr	r3, [pc, #20]	; (9fc <_sercom_get_interrupt_vector+0x24>)
     9e6:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     9e8:	1c20      	adds	r0, r4, #0
     9ea:	4b05      	ldr	r3, [pc, #20]	; (a00 <_sercom_get_interrupt_vector+0x28>)
     9ec:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     9ee:	466b      	mov	r3, sp
     9f0:	5618      	ldrsb	r0, [r3, r0]
}
     9f2:	b002      	add	sp, #8
     9f4:	bd10      	pop	{r4, pc}
     9f6:	46c0      	nop			; (mov r8, r8)
     9f8:	00004620 	.word	0x00004620
     9fc:	000033a9 	.word	0x000033a9
     a00:	000008c5 	.word	0x000008c5

00000a04 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     a04:	b508      	push	{r3, lr}
     a06:	4b02      	ldr	r3, [pc, #8]	; (a10 <SERCOM0_Handler+0xc>)
     a08:	681b      	ldr	r3, [r3, #0]
     a0a:	2000      	movs	r0, #0
     a0c:	4798      	blx	r3
     a0e:	bd08      	pop	{r3, pc}
     a10:	200000f4 	.word	0x200000f4

00000a14 <SERCOM1_Handler>:
     a14:	b508      	push	{r3, lr}
     a16:	4b02      	ldr	r3, [pc, #8]	; (a20 <SERCOM1_Handler+0xc>)
     a18:	685b      	ldr	r3, [r3, #4]
     a1a:	2001      	movs	r0, #1
     a1c:	4798      	blx	r3
     a1e:	bd08      	pop	{r3, pc}
     a20:	200000f4 	.word	0x200000f4

00000a24 <SERCOM2_Handler>:
     a24:	b508      	push	{r3, lr}
     a26:	4b02      	ldr	r3, [pc, #8]	; (a30 <SERCOM2_Handler+0xc>)
     a28:	689b      	ldr	r3, [r3, #8]
     a2a:	2002      	movs	r0, #2
     a2c:	4798      	blx	r3
     a2e:	bd08      	pop	{r3, pc}
     a30:	200000f4 	.word	0x200000f4

00000a34 <SERCOM3_Handler>:
     a34:	b508      	push	{r3, lr}
     a36:	4b02      	ldr	r3, [pc, #8]	; (a40 <SERCOM3_Handler+0xc>)
     a38:	68db      	ldr	r3, [r3, #12]
     a3a:	2003      	movs	r0, #3
     a3c:	4798      	blx	r3
     a3e:	bd08      	pop	{r3, pc}
     a40:	200000f4 	.word	0x200000f4

00000a44 <SERCOM4_Handler>:
     a44:	b508      	push	{r3, lr}
     a46:	4b02      	ldr	r3, [pc, #8]	; (a50 <SERCOM4_Handler+0xc>)
     a48:	691b      	ldr	r3, [r3, #16]
     a4a:	2004      	movs	r0, #4
     a4c:	4798      	blx	r3
     a4e:	bd08      	pop	{r3, pc}
     a50:	200000f4 	.word	0x200000f4

00000a54 <SERCOM5_Handler>:
     a54:	b508      	push	{r3, lr}
     a56:	4b02      	ldr	r3, [pc, #8]	; (a60 <SERCOM5_Handler+0xc>)
     a58:	695b      	ldr	r3, [r3, #20]
     a5a:	2005      	movs	r0, #5
     a5c:	4798      	blx	r3
     a5e:	bd08      	pop	{r3, pc}
     a60:	200000f4 	.word	0x200000f4

00000a64 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     a64:	b5f0      	push	{r4, r5, r6, r7, lr}
     a66:	465f      	mov	r7, fp
     a68:	4656      	mov	r6, sl
     a6a:	464d      	mov	r5, r9
     a6c:	4644      	mov	r4, r8
     a6e:	b4f0      	push	{r4, r5, r6, r7}
     a70:	b091      	sub	sp, #68	; 0x44
     a72:	1c04      	adds	r4, r0, #0
     a74:	1c0e      	adds	r6, r1, #0
     a76:	1c15      	adds	r5, r2, #0
     a78:	4bc6      	ldr	r3, [pc, #792]	; (d94 <usart_init+0x330>)
     a7a:	6818      	ldr	r0, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
     a7c:	2800      	cmp	r0, #0
     a7e:	d010      	beq.n	aa2 <usart_init+0x3e>
     a80:	2c00      	cmp	r4, #0
     a82:	d118      	bne.n	ab6 <usart_init+0x52>
     a84:	4bc4      	ldr	r3, [pc, #784]	; (d98 <usart_init+0x334>)
     a86:	9300      	str	r3, [sp, #0]
     a88:	4bc4      	ldr	r3, [pc, #784]	; (d9c <usart_init+0x338>)
     a8a:	9301      	str	r3, [sp, #4]
     a8c:	2101      	movs	r1, #1
     a8e:	4ac4      	ldr	r2, [pc, #784]	; (da0 <usart_init+0x33c>)
     a90:	2383      	movs	r3, #131	; 0x83
     a92:	005b      	lsls	r3, r3, #1
     a94:	4fc3      	ldr	r7, [pc, #780]	; (da4 <usart_init+0x340>)
     a96:	47b8      	blx	r7
     a98:	4bbe      	ldr	r3, [pc, #760]	; (d94 <usart_init+0x330>)
     a9a:	6818      	ldr	r0, [r3, #0]
	Assert(hw);
     a9c:	2800      	cmp	r0, #0
     a9e:	d10a      	bne.n	ab6 <usart_init+0x52>
     aa0:	e01b      	b.n	ada <usart_init+0x76>
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
	/* Sanity check arguments */
	Assert(module);
     aa2:	2c00      	cmp	r4, #0
     aa4:	d119      	bne.n	ada <usart_init+0x76>
     aa6:	48c0      	ldr	r0, [pc, #768]	; (da8 <usart_init+0x344>)
     aa8:	49bc      	ldr	r1, [pc, #752]	; (d9c <usart_init+0x338>)
     aaa:	4abd      	ldr	r2, [pc, #756]	; (da0 <usart_init+0x33c>)
     aac:	2383      	movs	r3, #131	; 0x83
     aae:	005b      	lsls	r3, r3, #1
     ab0:	4cbe      	ldr	r4, [pc, #760]	; (dac <usart_init+0x348>)
     ab2:	47a0      	blx	r4
     ab4:	e7fe      	b.n	ab4 <usart_init+0x50>
	Assert(hw);
     ab6:	2e00      	cmp	r6, #0
     ab8:	d000      	beq.n	abc <usart_init+0x58>
     aba:	e2ee      	b.n	109a <usart_init+0x636>
     abc:	4bb6      	ldr	r3, [pc, #728]	; (d98 <usart_init+0x334>)
     abe:	9300      	str	r3, [sp, #0]
     ac0:	4bbb      	ldr	r3, [pc, #748]	; (db0 <usart_init+0x34c>)
     ac2:	9301      	str	r3, [sp, #4]
     ac4:	2101      	movs	r1, #1
     ac6:	4ab6      	ldr	r2, [pc, #728]	; (da0 <usart_init+0x33c>)
     ac8:	2308      	movs	r3, #8
     aca:	33ff      	adds	r3, #255	; 0xff
     acc:	4fb5      	ldr	r7, [pc, #724]	; (da4 <usart_init+0x340>)
     ace:	47b8      	blx	r7
     ad0:	4bb0      	ldr	r3, [pc, #704]	; (d94 <usart_init+0x330>)
     ad2:	6818      	ldr	r0, [r3, #0]
	Assert(config);
     ad4:	2800      	cmp	r0, #0
     ad6:	d10a      	bne.n	aee <usart_init+0x8a>
     ad8:	e016      	b.n	b08 <usart_init+0xa4>
		Sercom *const hw,
		const struct usart_config *const config)
{
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
     ada:	2e00      	cmp	r6, #0
     adc:	d114      	bne.n	b08 <usart_init+0xa4>
     ade:	48b2      	ldr	r0, [pc, #712]	; (da8 <usart_init+0x344>)
     ae0:	49b3      	ldr	r1, [pc, #716]	; (db0 <usart_init+0x34c>)
     ae2:	4aaf      	ldr	r2, [pc, #700]	; (da0 <usart_init+0x33c>)
     ae4:	2308      	movs	r3, #8
     ae6:	33ff      	adds	r3, #255	; 0xff
     ae8:	4cb0      	ldr	r4, [pc, #704]	; (dac <usart_init+0x348>)
     aea:	47a0      	blx	r4
     aec:	e7fe      	b.n	aec <usart_init+0x88>
	Assert(config);
     aee:	2d00      	cmp	r5, #0
     af0:	d114      	bne.n	b1c <usart_init+0xb8>
     af2:	4ba9      	ldr	r3, [pc, #676]	; (d98 <usart_init+0x334>)
     af4:	9300      	str	r3, [sp, #0]
     af6:	4baf      	ldr	r3, [pc, #700]	; (db4 <usart_init+0x350>)
     af8:	9301      	str	r3, [sp, #4]
     afa:	2101      	movs	r1, #1
     afc:	4aa8      	ldr	r2, [pc, #672]	; (da0 <usart_init+0x33c>)
     afe:	2384      	movs	r3, #132	; 0x84
     b00:	005b      	lsls	r3, r3, #1
     b02:	4fa8      	ldr	r7, [pc, #672]	; (da4 <usart_init+0x340>)
     b04:	47b8      	blx	r7
     b06:	e009      	b.n	b1c <usart_init+0xb8>
     b08:	2d00      	cmp	r5, #0
     b0a:	d107      	bne.n	b1c <usart_init+0xb8>
     b0c:	48a6      	ldr	r0, [pc, #664]	; (da8 <usart_init+0x344>)
     b0e:	49a9      	ldr	r1, [pc, #676]	; (db4 <usart_init+0x350>)
     b10:	4aa3      	ldr	r2, [pc, #652]	; (da0 <usart_init+0x33c>)
     b12:	2384      	movs	r3, #132	; 0x84
     b14:	005b      	lsls	r3, r3, #1
     b16:	4ca5      	ldr	r4, [pc, #660]	; (dac <usart_init+0x348>)
     b18:	47a0      	blx	r4
     b1a:	e7fe      	b.n	b1a <usart_init+0xb6>

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     b1c:	6026      	str	r6, [r4, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     b1e:	1c30      	adds	r0, r6, #0
     b20:	4ba5      	ldr	r3, [pc, #660]	; (db8 <usart_init+0x354>)
     b22:	4798      	blx	r3
     b24:	1c02      	adds	r2, r0, #0
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     b26:	6833      	ldr	r3, [r6, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     b28:	2005      	movs	r0, #5
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     b2a:	07d9      	lsls	r1, r3, #31
     b2c:	d500      	bpl.n	b30 <usart_init+0xcc>
     b2e:	e2b7      	b.n	10a0 <usart_init+0x63c>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     b30:	6833      	ldr	r3, [r6, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     b32:	201c      	movs	r0, #28
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     b34:	079f      	lsls	r7, r3, #30
     b36:	d500      	bpl.n	b3a <usart_init+0xd6>
     b38:	e2b2      	b.n	10a0 <usart_init+0x63c>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     b3a:	4ba0      	ldr	r3, [pc, #640]	; (dbc <usart_init+0x358>)
     b3c:	6a18      	ldr	r0, [r3, #32]

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     b3e:	1c91      	adds	r1, r2, #2
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     b40:	2701      	movs	r7, #1
     b42:	408f      	lsls	r7, r1
     b44:	1c39      	adds	r1, r7, #0
     b46:	4301      	orrs	r1, r0
     b48:	6219      	str	r1, [r3, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     b4a:	a90f      	add	r1, sp, #60	; 0x3c
     b4c:	272d      	movs	r7, #45	; 0x2d
     b4e:	5deb      	ldrb	r3, [r5, r7]
     b50:	700b      	strb	r3, [r1, #0]
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     b52:	3214      	adds	r2, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     b54:	b2d2      	uxtb	r2, r2
     b56:	4690      	mov	r8, r2
     b58:	1c10      	adds	r0, r2, #0
     b5a:	4b99      	ldr	r3, [pc, #612]	; (dc0 <usart_init+0x35c>)
     b5c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     b5e:	4640      	mov	r0, r8
     b60:	4b98      	ldr	r3, [pc, #608]	; (dc4 <usart_init+0x360>)
     b62:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     b64:	5de8      	ldrb	r0, [r5, r7]
     b66:	2100      	movs	r1, #0
     b68:	4b97      	ldr	r3, [pc, #604]	; (dc8 <usart_init+0x364>)
     b6a:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     b6c:	7aeb      	ldrb	r3, [r5, #11]
     b6e:	7163      	strb	r3, [r4, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     b70:	2324      	movs	r3, #36	; 0x24
     b72:	5ceb      	ldrb	r3, [r5, r3]
     b74:	71a3      	strb	r3, [r4, #6]
	module->transmitter_enabled = config->transmitter_enable;
     b76:	2325      	movs	r3, #37	; 0x25
     b78:	5ceb      	ldrb	r3, [r5, r3]
     b7a:	71e3      	strb	r3, [r4, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
     b7c:	7eeb      	ldrb	r3, [r5, #27]
     b7e:	7223      	strb	r3, [r4, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     b80:	7f2b      	ldrb	r3, [r5, #28]
     b82:	7263      	strb	r3, [r4, #9]
     b84:	4b83      	ldr	r3, [pc, #524]	; (d94 <usart_init+0x330>)
     b86:	6818      	ldr	r0, [r3, #0]
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
	/* Sanity check arguments */
	Assert(module);
     b88:	2800      	cmp	r0, #0
     b8a:	d00f      	beq.n	bac <usart_init+0x148>
     b8c:	2c00      	cmp	r4, #0
     b8e:	d116      	bne.n	bbe <usart_init+0x15a>
     b90:	4b81      	ldr	r3, [pc, #516]	; (d98 <usart_init+0x334>)
     b92:	9300      	str	r3, [sp, #0]
     b94:	4b81      	ldr	r3, [pc, #516]	; (d9c <usart_init+0x338>)
     b96:	9301      	str	r3, [sp, #4]
     b98:	2101      	movs	r1, #1
     b9a:	4a81      	ldr	r2, [pc, #516]	; (da0 <usart_init+0x33c>)
     b9c:	233d      	movs	r3, #61	; 0x3d
     b9e:	4f81      	ldr	r7, [pc, #516]	; (da4 <usart_init+0x340>)
     ba0:	47b8      	blx	r7
     ba2:	4b7c      	ldr	r3, [pc, #496]	; (d94 <usart_init+0x330>)
     ba4:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
     ba6:	2800      	cmp	r0, #0
     ba8:	d016      	beq.n	bd8 <usart_init+0x174>
     baa:	e008      	b.n	bbe <usart_init+0x15a>
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
	/* Sanity check arguments */
	Assert(module);
     bac:	2c00      	cmp	r4, #0
     bae:	d113      	bne.n	bd8 <usart_init+0x174>
     bb0:	487d      	ldr	r0, [pc, #500]	; (da8 <usart_init+0x344>)
     bb2:	497a      	ldr	r1, [pc, #488]	; (d9c <usart_init+0x338>)
     bb4:	4a7a      	ldr	r2, [pc, #488]	; (da0 <usart_init+0x33c>)
     bb6:	233d      	movs	r3, #61	; 0x3d
     bb8:	4c7c      	ldr	r4, [pc, #496]	; (dac <usart_init+0x348>)
     bba:	47a0      	blx	r4
     bbc:	e7fe      	b.n	bbc <usart_init+0x158>
	Assert(module->hw);
     bbe:	6821      	ldr	r1, [r4, #0]
     bc0:	2900      	cmp	r1, #0
     bc2:	d113      	bne.n	bec <usart_init+0x188>
     bc4:	4b74      	ldr	r3, [pc, #464]	; (d98 <usart_init+0x334>)
     bc6:	9300      	str	r3, [sp, #0]
     bc8:	4b80      	ldr	r3, [pc, #512]	; (dcc <usart_init+0x368>)
     bca:	9301      	str	r3, [sp, #4]
     bcc:	2101      	movs	r1, #1
     bce:	4a74      	ldr	r2, [pc, #464]	; (da0 <usart_init+0x33c>)
     bd0:	233e      	movs	r3, #62	; 0x3e
     bd2:	4f74      	ldr	r7, [pc, #464]	; (da4 <usart_init+0x340>)
     bd4:	47b8      	blx	r7
     bd6:	e009      	b.n	bec <usart_init+0x188>
     bd8:	6822      	ldr	r2, [r4, #0]
     bda:	2a00      	cmp	r2, #0
     bdc:	d106      	bne.n	bec <usart_init+0x188>
     bde:	4872      	ldr	r0, [pc, #456]	; (da8 <usart_init+0x344>)
     be0:	497a      	ldr	r1, [pc, #488]	; (dcc <usart_init+0x368>)
     be2:	4a6f      	ldr	r2, [pc, #444]	; (da0 <usart_init+0x33c>)
     be4:	233e      	movs	r3, #62	; 0x3e
     be6:	4c71      	ldr	r4, [pc, #452]	; (dac <usart_init+0x348>)
     be8:	47a0      	blx	r4
     bea:	e7fe      	b.n	bea <usart_init+0x186>

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     bec:	6823      	ldr	r3, [r4, #0]
     bee:	469a      	mov	sl, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     bf0:	1c18      	adds	r0, r3, #0
     bf2:	4b71      	ldr	r3, [pc, #452]	; (db8 <usart_init+0x354>)
     bf4:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     bf6:	3014      	adds	r0, #20

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;
     bf8:	2200      	movs	r2, #0
     bfa:	466b      	mov	r3, sp
     bfc:	84da      	strh	r2, [r3, #38]	; 0x26

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
     bfe:	8a2f      	ldrh	r7, [r5, #16]
     c00:	9702      	str	r7, [sp, #8]
     c02:	2380      	movs	r3, #128	; 0x80
     c04:	01db      	lsls	r3, r3, #7
     c06:	429f      	cmp	r7, r3
     c08:	d025      	beq.n	c56 <usart_init+0x1f2>
     c0a:	2380      	movs	r3, #128	; 0x80
     c0c:	01db      	lsls	r3, r3, #7
     c0e:	429f      	cmp	r7, r3
     c10:	d804      	bhi.n	c1c <usart_init+0x1b8>
     c12:	2380      	movs	r3, #128	; 0x80
     c14:	019b      	lsls	r3, r3, #6
     c16:	429f      	cmp	r7, r3
     c18:	d013      	beq.n	c42 <usart_init+0x1de>
     c1a:	e008      	b.n	c2e <usart_init+0x1ca>
     c1c:	23c0      	movs	r3, #192	; 0xc0
     c1e:	01db      	lsls	r3, r3, #7
     c20:	9902      	ldr	r1, [sp, #8]
     c22:	4299      	cmp	r1, r3
     c24:	d012      	beq.n	c4c <usart_init+0x1e8>
     c26:	2380      	movs	r3, #128	; 0x80
     c28:	021b      	lsls	r3, r3, #8
     c2a:	4299      	cmp	r1, r3
     c2c:	d004      	beq.n	c38 <usart_init+0x1d4>
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     c2e:	2210      	movs	r2, #16
     c30:	4691      	mov	r9, r2
	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     c32:	2300      	movs	r3, #0
     c34:	4698      	mov	r8, r3
     c36:	e012      	b.n	c5e <usart_init+0x1fa>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     c38:	2703      	movs	r7, #3
     c3a:	46b9      	mov	r9, r7
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     c3c:	2100      	movs	r1, #0
     c3e:	4688      	mov	r8, r1
     c40:	e00d      	b.n	c5e <usart_init+0x1fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     c42:	2210      	movs	r2, #16
     c44:	4691      	mov	r9, r2
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     c46:	2301      	movs	r3, #1
     c48:	4698      	mov	r8, r3
     c4a:	e008      	b.n	c5e <usart_init+0x1fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     c4c:	2708      	movs	r7, #8
     c4e:	46b9      	mov	r9, r7
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     c50:	2101      	movs	r1, #1
     c52:	4688      	mov	r8, r1
     c54:	e003      	b.n	c5e <usart_init+0x1fa>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     c56:	2208      	movs	r2, #8
     c58:	4691      	mov	r9, r2
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     c5a:	2300      	movs	r3, #0
     c5c:	4698      	mov	r8, r3
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     c5e:	682f      	ldr	r7, [r5, #0]
     c60:	9703      	str	r7, [sp, #12]
		(uint32_t)config->mux_setting |
     c62:	68ef      	ldr	r7, [r5, #12]
     c64:	9704      	str	r7, [sp, #16]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     c66:	696f      	ldr	r7, [r5, #20]
     c68:	9705      	str	r7, [sp, #20]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     c6a:	7e2f      	ldrb	r7, [r5, #24]
     c6c:	9706      	str	r7, [sp, #24]
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     c6e:	2326      	movs	r3, #38	; 0x26
     c70:	5ceb      	ldrb	r3, [r5, r3]
     c72:	9307      	str	r3, [sp, #28]

	enum status_code status_code = STATUS_OK;

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
     c74:	686b      	ldr	r3, [r5, #4]
     c76:	2b00      	cmp	r3, #0
     c78:	d013      	beq.n	ca2 <usart_init+0x23e>
     c7a:	2280      	movs	r2, #128	; 0x80
     c7c:	0552      	lsls	r2, r2, #21
     c7e:	4293      	cmp	r3, r2
     c80:	d12c      	bne.n	cdc <usart_init+0x278>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     c82:	2327      	movs	r3, #39	; 0x27
     c84:	5ceb      	ldrb	r3, [r5, r3]
     c86:	2b00      	cmp	r3, #0
     c88:	d12c      	bne.n	ce4 <usart_init+0x280>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     c8a:	6a29      	ldr	r1, [r5, #32]
     c8c:	4688      	mov	r8, r1
     c8e:	b2c0      	uxtb	r0, r0
     c90:	4b4f      	ldr	r3, [pc, #316]	; (dd0 <usart_init+0x36c>)
     c92:	4798      	blx	r3
     c94:	1c01      	adds	r1, r0, #0
     c96:	4640      	mov	r0, r8
     c98:	466a      	mov	r2, sp
     c9a:	3226      	adds	r2, #38	; 0x26
     c9c:	4b4d      	ldr	r3, [pc, #308]	; (dd4 <usart_init+0x370>)
     c9e:	4798      	blx	r3
     ca0:	e01d      	b.n	cde <usart_init+0x27a>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     ca2:	2327      	movs	r3, #39	; 0x27
     ca4:	5ceb      	ldrb	r3, [r5, r3]
     ca6:	2b00      	cmp	r3, #0
     ca8:	d009      	beq.n	cbe <usart_init+0x25a>
				status_code =
     caa:	464a      	mov	r2, r9
     cac:	9200      	str	r2, [sp, #0]
     cae:	6a28      	ldr	r0, [r5, #32]
     cb0:	6aa9      	ldr	r1, [r5, #40]	; 0x28
     cb2:	466a      	mov	r2, sp
     cb4:	3226      	adds	r2, #38	; 0x26
     cb6:	4643      	mov	r3, r8
     cb8:	4f47      	ldr	r7, [pc, #284]	; (dd8 <usart_init+0x374>)
     cba:	47b8      	blx	r7
     cbc:	e00f      	b.n	cde <usart_init+0x27a>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     cbe:	6a29      	ldr	r1, [r5, #32]
     cc0:	468b      	mov	fp, r1
     cc2:	b2c0      	uxtb	r0, r0
     cc4:	4b42      	ldr	r3, [pc, #264]	; (dd0 <usart_init+0x36c>)
     cc6:	4798      	blx	r3
     cc8:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     cca:	464a      	mov	r2, r9
     ccc:	9200      	str	r2, [sp, #0]
     cce:	4658      	mov	r0, fp
     cd0:	466a      	mov	r2, sp
     cd2:	3226      	adds	r2, #38	; 0x26
     cd4:	4643      	mov	r3, r8
     cd6:	4f40      	ldr	r7, [pc, #256]	; (dd8 <usart_init+0x374>)
     cd8:	47b8      	blx	r7
     cda:	e000      	b.n	cde <usart_init+0x27a>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     cdc:	2000      	movs	r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     cde:	2800      	cmp	r0, #0
     ce0:	d000      	beq.n	ce4 <usart_init+0x280>
     ce2:	e1dd      	b.n	10a0 <usart_init+0x63c>
		/* Abort */
		return status_code;
	}

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
     ce4:	7e6b      	ldrb	r3, [r5, #25]
     ce6:	2b00      	cmp	r3, #0
     ce8:	d002      	beq.n	cf0 <usart_init+0x28c>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     cea:	7eab      	ldrb	r3, [r5, #26]
     cec:	4651      	mov	r1, sl
     cee:	738b      	strb	r3, [r1, #14]
     cf0:	4b28      	ldr	r3, [pc, #160]	; (d94 <usart_init+0x330>)
     cf2:	6818      	ldr	r0, [r3, #0]
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);
     cf4:	2800      	cmp	r0, #0
     cf6:	d00b      	beq.n	d10 <usart_init+0x2ac>
     cf8:	2c00      	cmp	r4, #0
     cfa:	d112      	bne.n	d22 <usart_init+0x2be>
     cfc:	4b26      	ldr	r3, [pc, #152]	; (d98 <usart_init+0x334>)
     cfe:	9300      	str	r3, [sp, #0]
     d00:	4b26      	ldr	r3, [pc, #152]	; (d9c <usart_init+0x338>)
     d02:	9301      	str	r3, [sp, #4]
     d04:	2101      	movs	r1, #1
     d06:	4a35      	ldr	r2, [pc, #212]	; (ddc <usart_init+0x378>)
     d08:	4b35      	ldr	r3, [pc, #212]	; (de0 <usart_init+0x37c>)
     d0a:	4f26      	ldr	r7, [pc, #152]	; (da4 <usart_init+0x340>)
     d0c:	47b8      	blx	r7
     d0e:	e008      	b.n	d22 <usart_init+0x2be>
     d10:	2c00      	cmp	r4, #0
     d12:	d106      	bne.n	d22 <usart_init+0x2be>
     d14:	4824      	ldr	r0, [pc, #144]	; (da8 <usart_init+0x344>)
     d16:	4921      	ldr	r1, [pc, #132]	; (d9c <usart_init+0x338>)
     d18:	4a30      	ldr	r2, [pc, #192]	; (ddc <usart_init+0x378>)
     d1a:	4b31      	ldr	r3, [pc, #196]	; (de0 <usart_init+0x37c>)
     d1c:	4c23      	ldr	r4, [pc, #140]	; (dac <usart_init+0x348>)
     d1e:	47a0      	blx	r4
     d20:	e7fe      	b.n	d20 <usart_init+0x2bc>
     d22:	491c      	ldr	r1, [pc, #112]	; (d94 <usart_init+0x330>)
     d24:	4688      	mov	r8, r1
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
     d26:	9f02      	ldr	r7, [sp, #8]
     d28:	46a9      	mov	r9, r5
     d2a:	4642      	mov	r2, r8
     d2c:	6810      	ldr	r0, [r2, #0]
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
	/* Sanity check arguments */
	Assert(module);
     d2e:	2800      	cmp	r0, #0
     d30:	d00f      	beq.n	d52 <usart_init+0x2ee>
     d32:	2c00      	cmp	r4, #0
     d34:	d116      	bne.n	d64 <usart_init+0x300>
     d36:	4b18      	ldr	r3, [pc, #96]	; (d98 <usart_init+0x334>)
     d38:	9300      	str	r3, [sp, #0]
     d3a:	4b18      	ldr	r3, [pc, #96]	; (d9c <usart_init+0x338>)
     d3c:	9301      	str	r3, [sp, #4]
     d3e:	2101      	movs	r1, #1
     d40:	4a26      	ldr	r2, [pc, #152]	; (ddc <usart_init+0x378>)
     d42:	4b28      	ldr	r3, [pc, #160]	; (de4 <usart_init+0x380>)
     d44:	4d17      	ldr	r5, [pc, #92]	; (da4 <usart_init+0x340>)
     d46:	47a8      	blx	r5
     d48:	4b12      	ldr	r3, [pc, #72]	; (d94 <usart_init+0x330>)
     d4a:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
     d4c:	2800      	cmp	r0, #0
     d4e:	d109      	bne.n	d64 <usart_init+0x300>
     d50:	e015      	b.n	d7e <usart_init+0x31a>
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
	/* Sanity check arguments */
	Assert(module);
     d52:	2c00      	cmp	r4, #0
     d54:	d113      	bne.n	d7e <usart_init+0x31a>
     d56:	4814      	ldr	r0, [pc, #80]	; (da8 <usart_init+0x344>)
     d58:	4910      	ldr	r1, [pc, #64]	; (d9c <usart_init+0x338>)
     d5a:	4a20      	ldr	r2, [pc, #128]	; (ddc <usart_init+0x378>)
     d5c:	4b21      	ldr	r3, [pc, #132]	; (de4 <usart_init+0x380>)
     d5e:	4c13      	ldr	r4, [pc, #76]	; (dac <usart_init+0x348>)
     d60:	47a0      	blx	r4
     d62:	e7fe      	b.n	d62 <usart_init+0x2fe>
	Assert(module->hw);
     d64:	6821      	ldr	r1, [r4, #0]
     d66:	2900      	cmp	r1, #0
     d68:	d140      	bne.n	dec <usart_init+0x388>
     d6a:	4a0b      	ldr	r2, [pc, #44]	; (d98 <usart_init+0x334>)
     d6c:	9200      	str	r2, [sp, #0]
     d6e:	4b17      	ldr	r3, [pc, #92]	; (dcc <usart_init+0x368>)
     d70:	9301      	str	r3, [sp, #4]
     d72:	2101      	movs	r1, #1
     d74:	4a19      	ldr	r2, [pc, #100]	; (ddc <usart_init+0x378>)
     d76:	4b1c      	ldr	r3, [pc, #112]	; (de8 <usart_init+0x384>)
     d78:	4d0a      	ldr	r5, [pc, #40]	; (da4 <usart_init+0x340>)
     d7a:	47a8      	blx	r5
     d7c:	e036      	b.n	dec <usart_init+0x388>
     d7e:	6821      	ldr	r1, [r4, #0]
     d80:	2900      	cmp	r1, #0
     d82:	d133      	bne.n	dec <usart_init+0x388>
     d84:	4808      	ldr	r0, [pc, #32]	; (da8 <usart_init+0x344>)
     d86:	4911      	ldr	r1, [pc, #68]	; (dcc <usart_init+0x368>)
     d88:	4a14      	ldr	r2, [pc, #80]	; (ddc <usart_init+0x378>)
     d8a:	4b17      	ldr	r3, [pc, #92]	; (de8 <usart_init+0x384>)
     d8c:	4c07      	ldr	r4, [pc, #28]	; (dac <usart_init+0x348>)
     d8e:	47a0      	blx	r4
     d90:	e7fe      	b.n	d90 <usart_init+0x32c>
     d92:	46c0      	nop			; (mov r8, r8)
     d94:	2000008c 	.word	0x2000008c
     d98:	00004444 	.word	0x00004444
     d9c:	0000468c 	.word	0x0000468c
     da0:	0000465c 	.word	0x0000465c
     da4:	0000020d 	.word	0x0000020d
     da8:	00004484 	.word	0x00004484
     dac:	000033cd 	.word	0x000033cd
     db0:	0000469c 	.word	0x0000469c
     db4:	000045c8 	.word	0x000045c8
     db8:	000008c5 	.word	0x000008c5
     dbc:	40000400 	.word	0x40000400
     dc0:	00002201 	.word	0x00002201
     dc4:	00002115 	.word	0x00002115
     dc8:	000006b9 	.word	0x000006b9
     dcc:	00004694 	.word	0x00004694
     dd0:	00002279 	.word	0x00002279
     dd4:	000004e1 	.word	0x000004e1
     dd8:	00000509 	.word	0x00000509
     ddc:	000046a0 	.word	0x000046a0
     de0:	000002fe 	.word	0x000002fe
     de4:	000002e9 	.word	0x000002e9
     de8:	000002ea 	.word	0x000002ea

	SercomUsart *const usart_hw = &(module->hw->USART);
     dec:	6823      	ldr	r3, [r4, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     dee:	69db      	ldr	r3, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     df0:	2b00      	cmp	r3, #0
     df2:	d19a      	bne.n	d2a <usart_init+0x2c6>
     df4:	9702      	str	r7, [sp, #8]
     df6:	464d      	mov	r5, r9

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     df8:	466b      	mov	r3, sp
     dfa:	3326      	adds	r3, #38	; 0x26
     dfc:	881b      	ldrh	r3, [r3, #0]
     dfe:	4652      	mov	r2, sl
     e00:	8193      	strh	r3, [r2, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     e02:	9b04      	ldr	r3, [sp, #16]
     e04:	9f03      	ldr	r7, [sp, #12]
     e06:	433b      	orrs	r3, r7
		(uint32_t)config->mux_setting |
     e08:	9f05      	ldr	r7, [sp, #20]
     e0a:	433b      	orrs	r3, r7
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
     e0c:	6869      	ldr	r1, [r5, #4]
     e0e:	430b      	orrs	r3, r1
		config->sample_rate |
     e10:	9f02      	ldr	r7, [sp, #8]
     e12:	431f      	orrs	r7, r3
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     e14:	9a06      	ldr	r2, [sp, #24]
     e16:	0213      	lsls	r3, r2, #8
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     e18:	431f      	orrs	r7, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     e1a:	9907      	ldr	r1, [sp, #28]
     e1c:	074b      	lsls	r3, r1, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= config->transfer_mode;
     e1e:	431f      	orrs	r7, r3
     e20:	46bb      	mov	fp, r7

	if (config->use_external_clock == false) {
     e22:	2327      	movs	r3, #39	; 0x27
     e24:	5ceb      	ldrb	r3, [r5, r3]
     e26:	2b00      	cmp	r3, #0
     e28:	d102      	bne.n	e30 <usart_init+0x3cc>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     e2a:	2304      	movs	r3, #4
     e2c:	431f      	orrs	r7, r3
     e2e:	46bb      	mov	fp, r7
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     e30:	7e6a      	ldrb	r2, [r5, #25]
     e32:	0292      	lsls	r2, r2, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     e34:	7f2b      	ldrb	r3, [r5, #28]
     e36:	025b      	lsls	r3, r3, #9
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
     e38:	431a      	orrs	r2, r3
     e3a:	7ae9      	ldrb	r1, [r5, #11]
     e3c:	7aab      	ldrb	r3, [r5, #10]
     e3e:	430b      	orrs	r3, r1
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     e40:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     e42:	7f6b      	ldrb	r3, [r5, #29]
     e44:	021b      	lsls	r3, r3, #8
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     e46:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     e48:	2324      	movs	r3, #36	; 0x24
     e4a:	5ceb      	ldrb	r3, [r5, r3]
     e4c:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     e4e:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     e50:	2325      	movs	r3, #37	; 0x25
     e52:	5ceb      	ldrb	r3, [r5, r3]
     e54:	041b      	lsls	r3, r3, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
     e56:	431a      	orrs	r2, r3
     e58:	4690      	mov	r8, r2
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     e5a:	892b      	ldrh	r3, [r5, #8]
     e5c:	2bff      	cmp	r3, #255	; 0xff
     e5e:	d011      	beq.n	e84 <usart_init+0x420>
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     e60:	7eea      	ldrb	r2, [r5, #27]
     e62:	2a00      	cmp	r2, #0
     e64:	d005      	beq.n	e72 <usart_init+0x40e>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
     e66:	22a0      	movs	r2, #160	; 0xa0
     e68:	04d2      	lsls	r2, r2, #19
     e6a:	465f      	mov	r7, fp
     e6c:	4317      	orrs	r7, r2
     e6e:	46bb      	mov	fp, r7
     e70:	e004      	b.n	e7c <usart_init+0x418>
		} else {
			ctrla |= SERCOM_USART_CTRLA_FORM(1);
     e72:	2280      	movs	r2, #128	; 0x80
     e74:	0452      	lsls	r2, r2, #17
     e76:	4659      	mov	r1, fp
     e78:	4311      	orrs	r1, r2
     e7a:	468b      	mov	fp, r1
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
#endif
		ctrlb |= config->parity;
     e7c:	4642      	mov	r2, r8
     e7e:	431a      	orrs	r2, r3
     e80:	4690      	mov	r8, r2
     e82:	e007      	b.n	e94 <usart_init+0x430>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
     e84:	7eeb      	ldrb	r3, [r5, #27]
     e86:	2b00      	cmp	r3, #0
     e88:	d004      	beq.n	e94 <usart_init+0x430>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     e8a:	2380      	movs	r3, #128	; 0x80
     e8c:	04db      	lsls	r3, r3, #19
     e8e:	465f      	mov	r7, fp
     e90:	431f      	orrs	r7, r3
     e92:	46bb      	mov	fp, r7
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     e94:	232c      	movs	r3, #44	; 0x2c
     e96:	5ceb      	ldrb	r3, [r5, r3]
     e98:	2b00      	cmp	r3, #0
     e9a:	d103      	bne.n	ea4 <usart_init+0x440>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     e9c:	4b84      	ldr	r3, [pc, #528]	; (10b0 <usart_init+0x64c>)
     e9e:	789b      	ldrb	r3, [r3, #2]
     ea0:	0799      	lsls	r1, r3, #30
     ea2:	d503      	bpl.n	eac <usart_init+0x448>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     ea4:	2380      	movs	r3, #128	; 0x80
     ea6:	465a      	mov	r2, fp
     ea8:	431a      	orrs	r2, r3
     eaa:	4693      	mov	fp, r2
     eac:	4b81      	ldr	r3, [pc, #516]	; (10b4 <usart_init+0x650>)
     eae:	6818      	ldr	r0, [r3, #0]
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);
     eb0:	2800      	cmp	r0, #0
     eb2:	d00b      	beq.n	ecc <usart_init+0x468>
     eb4:	2c00      	cmp	r4, #0
     eb6:	d112      	bne.n	ede <usart_init+0x47a>
     eb8:	4b7f      	ldr	r3, [pc, #508]	; (10b8 <usart_init+0x654>)
     eba:	9300      	str	r3, [sp, #0]
     ebc:	4b7f      	ldr	r3, [pc, #508]	; (10bc <usart_init+0x658>)
     ebe:	9301      	str	r3, [sp, #4]
     ec0:	2101      	movs	r1, #1
     ec2:	4a7f      	ldr	r2, [pc, #508]	; (10c0 <usart_init+0x65c>)
     ec4:	4b7f      	ldr	r3, [pc, #508]	; (10c4 <usart_init+0x660>)
     ec6:	4f80      	ldr	r7, [pc, #512]	; (10c8 <usart_init+0x664>)
     ec8:	47b8      	blx	r7
     eca:	e008      	b.n	ede <usart_init+0x47a>
     ecc:	2c00      	cmp	r4, #0
     ece:	d106      	bne.n	ede <usart_init+0x47a>
     ed0:	487e      	ldr	r0, [pc, #504]	; (10cc <usart_init+0x668>)
     ed2:	497a      	ldr	r1, [pc, #488]	; (10bc <usart_init+0x658>)
     ed4:	4a7a      	ldr	r2, [pc, #488]	; (10c0 <usart_init+0x65c>)
     ed6:	4b7b      	ldr	r3, [pc, #492]	; (10c4 <usart_init+0x660>)
     ed8:	4c7d      	ldr	r4, [pc, #500]	; (10d0 <usart_init+0x66c>)
     eda:	47a0      	blx	r4
     edc:	e7fe      	b.n	edc <usart_init+0x478>
     ede:	4975      	ldr	r1, [pc, #468]	; (10b4 <usart_init+0x650>)
     ee0:	4689      	mov	r9, r1
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
     ee2:	465f      	mov	r7, fp
     ee4:	9503      	str	r5, [sp, #12]
     ee6:	464a      	mov	r2, r9
     ee8:	6810      	ldr	r0, [r2, #0]
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
	/* Sanity check arguments */
	Assert(module);
     eea:	2800      	cmp	r0, #0
     eec:	d00f      	beq.n	f0e <usart_init+0x4aa>
     eee:	2c00      	cmp	r4, #0
     ef0:	d116      	bne.n	f20 <usart_init+0x4bc>
     ef2:	4b71      	ldr	r3, [pc, #452]	; (10b8 <usart_init+0x654>)
     ef4:	9300      	str	r3, [sp, #0]
     ef6:	4b71      	ldr	r3, [pc, #452]	; (10bc <usart_init+0x658>)
     ef8:	9301      	str	r3, [sp, #4]
     efa:	2101      	movs	r1, #1
     efc:	4a70      	ldr	r2, [pc, #448]	; (10c0 <usart_init+0x65c>)
     efe:	4b75      	ldr	r3, [pc, #468]	; (10d4 <usart_init+0x670>)
     f00:	4d71      	ldr	r5, [pc, #452]	; (10c8 <usart_init+0x664>)
     f02:	47a8      	blx	r5
     f04:	4b6b      	ldr	r3, [pc, #428]	; (10b4 <usart_init+0x650>)
     f06:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
     f08:	2800      	cmp	r0, #0
     f0a:	d109      	bne.n	f20 <usart_init+0x4bc>
     f0c:	e015      	b.n	f3a <usart_init+0x4d6>
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
	/* Sanity check arguments */
	Assert(module);
     f0e:	2c00      	cmp	r4, #0
     f10:	d113      	bne.n	f3a <usart_init+0x4d6>
     f12:	486e      	ldr	r0, [pc, #440]	; (10cc <usart_init+0x668>)
     f14:	4969      	ldr	r1, [pc, #420]	; (10bc <usart_init+0x658>)
     f16:	4a6a      	ldr	r2, [pc, #424]	; (10c0 <usart_init+0x65c>)
     f18:	4b6e      	ldr	r3, [pc, #440]	; (10d4 <usart_init+0x670>)
     f1a:	4c6d      	ldr	r4, [pc, #436]	; (10d0 <usart_init+0x66c>)
     f1c:	47a0      	blx	r4
     f1e:	e7fe      	b.n	f1e <usart_init+0x4ba>
	Assert(module->hw);
     f20:	6821      	ldr	r1, [r4, #0]
     f22:	2900      	cmp	r1, #0
     f24:	d113      	bne.n	f4e <usart_init+0x4ea>
     f26:	4a64      	ldr	r2, [pc, #400]	; (10b8 <usart_init+0x654>)
     f28:	9200      	str	r2, [sp, #0]
     f2a:	4b6b      	ldr	r3, [pc, #428]	; (10d8 <usart_init+0x674>)
     f2c:	9301      	str	r3, [sp, #4]
     f2e:	2101      	movs	r1, #1
     f30:	4a63      	ldr	r2, [pc, #396]	; (10c0 <usart_init+0x65c>)
     f32:	4b6a      	ldr	r3, [pc, #424]	; (10dc <usart_init+0x678>)
     f34:	4d64      	ldr	r5, [pc, #400]	; (10c8 <usart_init+0x664>)
     f36:	47a8      	blx	r5
     f38:	e009      	b.n	f4e <usart_init+0x4ea>
     f3a:	6821      	ldr	r1, [r4, #0]
     f3c:	2900      	cmp	r1, #0
     f3e:	d106      	bne.n	f4e <usart_init+0x4ea>
     f40:	4862      	ldr	r0, [pc, #392]	; (10cc <usart_init+0x668>)
     f42:	4965      	ldr	r1, [pc, #404]	; (10d8 <usart_init+0x674>)
     f44:	4a5e      	ldr	r2, [pc, #376]	; (10c0 <usart_init+0x65c>)
     f46:	4b65      	ldr	r3, [pc, #404]	; (10dc <usart_init+0x678>)
     f48:	4c61      	ldr	r4, [pc, #388]	; (10d0 <usart_init+0x66c>)
     f4a:	47a0      	blx	r4
     f4c:	e7fe      	b.n	f4c <usart_init+0x4e8>

	SercomUsart *const usart_hw = &(module->hw->USART);
     f4e:	6823      	ldr	r3, [r4, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     f50:	69db      	ldr	r3, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     f52:	2b00      	cmp	r3, #0
     f54:	d1c7      	bne.n	ee6 <usart_init+0x482>
     f56:	46bb      	mov	fp, r7
     f58:	9d03      	ldr	r5, [sp, #12]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     f5a:	4642      	mov	r2, r8
     f5c:	4653      	mov	r3, sl
     f5e:	605a      	str	r2, [r3, #4]
     f60:	4b54      	ldr	r3, [pc, #336]	; (10b4 <usart_init+0x650>)
     f62:	6818      	ldr	r0, [r3, #0]
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);
     f64:	2800      	cmp	r0, #0
     f66:	d00b      	beq.n	f80 <usart_init+0x51c>
     f68:	2c00      	cmp	r4, #0
     f6a:	d112      	bne.n	f92 <usart_init+0x52e>
     f6c:	4b52      	ldr	r3, [pc, #328]	; (10b8 <usart_init+0x654>)
     f6e:	9300      	str	r3, [sp, #0]
     f70:	4b52      	ldr	r3, [pc, #328]	; (10bc <usart_init+0x658>)
     f72:	9301      	str	r3, [sp, #4]
     f74:	2101      	movs	r1, #1
     f76:	4a52      	ldr	r2, [pc, #328]	; (10c0 <usart_init+0x65c>)
     f78:	4b52      	ldr	r3, [pc, #328]	; (10c4 <usart_init+0x660>)
     f7a:	4f53      	ldr	r7, [pc, #332]	; (10c8 <usart_init+0x664>)
     f7c:	47b8      	blx	r7
     f7e:	e008      	b.n	f92 <usart_init+0x52e>
     f80:	2c00      	cmp	r4, #0
     f82:	d106      	bne.n	f92 <usart_init+0x52e>
     f84:	4851      	ldr	r0, [pc, #324]	; (10cc <usart_init+0x668>)
     f86:	494d      	ldr	r1, [pc, #308]	; (10bc <usart_init+0x658>)
     f88:	4a4d      	ldr	r2, [pc, #308]	; (10c0 <usart_init+0x65c>)
     f8a:	4b4e      	ldr	r3, [pc, #312]	; (10c4 <usart_init+0x660>)
     f8c:	4c50      	ldr	r4, [pc, #320]	; (10d0 <usart_init+0x66c>)
     f8e:	47a0      	blx	r4
     f90:	e7fe      	b.n	f90 <usart_init+0x52c>
     f92:	4948      	ldr	r1, [pc, #288]	; (10b4 <usart_init+0x650>)
     f94:	4688      	mov	r8, r1
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
     f96:	465f      	mov	r7, fp
     f98:	46a9      	mov	r9, r5
     f9a:	4642      	mov	r2, r8
     f9c:	6810      	ldr	r0, [r2, #0]
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
	/* Sanity check arguments */
	Assert(module);
     f9e:	2800      	cmp	r0, #0
     fa0:	d00f      	beq.n	fc2 <usart_init+0x55e>
     fa2:	2c00      	cmp	r4, #0
     fa4:	d116      	bne.n	fd4 <usart_init+0x570>
     fa6:	4b44      	ldr	r3, [pc, #272]	; (10b8 <usart_init+0x654>)
     fa8:	9300      	str	r3, [sp, #0]
     faa:	4b44      	ldr	r3, [pc, #272]	; (10bc <usart_init+0x658>)
     fac:	9301      	str	r3, [sp, #4]
     fae:	2101      	movs	r1, #1
     fb0:	4a43      	ldr	r2, [pc, #268]	; (10c0 <usart_init+0x65c>)
     fb2:	4b48      	ldr	r3, [pc, #288]	; (10d4 <usart_init+0x670>)
     fb4:	4d44      	ldr	r5, [pc, #272]	; (10c8 <usart_init+0x664>)
     fb6:	47a8      	blx	r5
     fb8:	4b3e      	ldr	r3, [pc, #248]	; (10b4 <usart_init+0x650>)
     fba:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
     fbc:	2800      	cmp	r0, #0
     fbe:	d109      	bne.n	fd4 <usart_init+0x570>
     fc0:	e015      	b.n	fee <usart_init+0x58a>
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
	/* Sanity check arguments */
	Assert(module);
     fc2:	2c00      	cmp	r4, #0
     fc4:	d113      	bne.n	fee <usart_init+0x58a>
     fc6:	4841      	ldr	r0, [pc, #260]	; (10cc <usart_init+0x668>)
     fc8:	493c      	ldr	r1, [pc, #240]	; (10bc <usart_init+0x658>)
     fca:	4a3d      	ldr	r2, [pc, #244]	; (10c0 <usart_init+0x65c>)
     fcc:	4b41      	ldr	r3, [pc, #260]	; (10d4 <usart_init+0x670>)
     fce:	4c40      	ldr	r4, [pc, #256]	; (10d0 <usart_init+0x66c>)
     fd0:	47a0      	blx	r4
     fd2:	e7fe      	b.n	fd2 <usart_init+0x56e>
	Assert(module->hw);
     fd4:	6821      	ldr	r1, [r4, #0]
     fd6:	2900      	cmp	r1, #0
     fd8:	d113      	bne.n	1002 <usart_init+0x59e>
     fda:	4a37      	ldr	r2, [pc, #220]	; (10b8 <usart_init+0x654>)
     fdc:	9200      	str	r2, [sp, #0]
     fde:	4b3e      	ldr	r3, [pc, #248]	; (10d8 <usart_init+0x674>)
     fe0:	9301      	str	r3, [sp, #4]
     fe2:	2101      	movs	r1, #1
     fe4:	4a36      	ldr	r2, [pc, #216]	; (10c0 <usart_init+0x65c>)
     fe6:	4b3d      	ldr	r3, [pc, #244]	; (10dc <usart_init+0x678>)
     fe8:	4d37      	ldr	r5, [pc, #220]	; (10c8 <usart_init+0x664>)
     fea:	47a8      	blx	r5
     fec:	e009      	b.n	1002 <usart_init+0x59e>
     fee:	6821      	ldr	r1, [r4, #0]
     ff0:	2900      	cmp	r1, #0
     ff2:	d106      	bne.n	1002 <usart_init+0x59e>
     ff4:	4835      	ldr	r0, [pc, #212]	; (10cc <usart_init+0x668>)
     ff6:	4938      	ldr	r1, [pc, #224]	; (10d8 <usart_init+0x674>)
     ff8:	4a31      	ldr	r2, [pc, #196]	; (10c0 <usart_init+0x65c>)
     ffa:	4b38      	ldr	r3, [pc, #224]	; (10dc <usart_init+0x678>)
     ffc:	4c34      	ldr	r4, [pc, #208]	; (10d0 <usart_init+0x66c>)
     ffe:	47a0      	blx	r4
    1000:	e7fe      	b.n	1000 <usart_init+0x59c>

	SercomUsart *const usart_hw = &(module->hw->USART);
    1002:	6823      	ldr	r3, [r4, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1004:	69db      	ldr	r3, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1006:	2b00      	cmp	r3, #0
    1008:	d1c7      	bne.n	f9a <usart_init+0x536>
    100a:	464d      	mov	r5, r9

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    100c:	4652      	mov	r2, sl
    100e:	6017      	str	r7, [r2, #0]
    1010:	ab0e      	add	r3, sp, #56	; 0x38
    1012:	2280      	movs	r2, #128	; 0x80
    1014:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1016:	2200      	movs	r2, #0
    1018:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    101a:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    101c:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    101e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    1020:	930a      	str	r3, [sp, #40]	; 0x28
    1022:	6b6f      	ldr	r7, [r5, #52]	; 0x34
    1024:	970b      	str	r7, [sp, #44]	; 0x2c
    1026:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    1028:	910c      	str	r1, [sp, #48]	; 0x30
    102a:	6bed      	ldr	r5, [r5, #60]	; 0x3c
    102c:	950d      	str	r5, [sp, #52]	; 0x34
    102e:	2500      	movs	r5, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1030:	af0e      	add	r7, sp, #56	; 0x38
    1032:	b2e9      	uxtb	r1, r5
    1034:	00ab      	lsls	r3, r5, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1036:	aa0a      	add	r2, sp, #40	; 0x28
    1038:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    103a:	2800      	cmp	r0, #0
    103c:	d102      	bne.n	1044 <usart_init+0x5e0>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    103e:	1c30      	adds	r0, r6, #0
    1040:	4a27      	ldr	r2, [pc, #156]	; (10e0 <usart_init+0x67c>)
    1042:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
    1044:	1c43      	adds	r3, r0, #1
    1046:	d005      	beq.n	1054 <usart_init+0x5f0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1048:	7038      	strb	r0, [r7, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    104a:	0c00      	lsrs	r0, r0, #16
    104c:	b2c0      	uxtb	r0, r0
    104e:	1c39      	adds	r1, r7, #0
    1050:	4a24      	ldr	r2, [pc, #144]	; (10e4 <usart_init+0x680>)
    1052:	4790      	blx	r2
    1054:	3501      	adds	r5, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1056:	2d04      	cmp	r5, #4
    1058:	d1eb      	bne.n	1032 <usart_init+0x5ce>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    105a:	2300      	movs	r3, #0
    105c:	60e3      	str	r3, [r4, #12]
    105e:	6123      	str	r3, [r4, #16]
    1060:	6163      	str	r3, [r4, #20]
    1062:	61a3      	str	r3, [r4, #24]
    1064:	61e3      	str	r3, [r4, #28]
    1066:	6223      	str	r3, [r4, #32]
	}

	module->tx_buffer_ptr              = NULL;
    1068:	62a3      	str	r3, [r4, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    106a:	6263      	str	r3, [r4, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    106c:	2200      	movs	r2, #0
    106e:	85e3      	strh	r3, [r4, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1070:	85a3      	strh	r3, [r4, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1072:	2330      	movs	r3, #48	; 0x30
    1074:	54e2      	strb	r2, [r4, r3]
	module->callback_enable_mask       = 0x00;
    1076:	2331      	movs	r3, #49	; 0x31
    1078:	54e2      	strb	r2, [r4, r3]
	module->rx_status                  = STATUS_OK;
    107a:	2332      	movs	r3, #50	; 0x32
    107c:	54e2      	strb	r2, [r4, r3]
	module->tx_status                  = STATUS_OK;
    107e:	2333      	movs	r3, #51	; 0x33
    1080:	54e2      	strb	r2, [r4, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1082:	6820      	ldr	r0, [r4, #0]
    1084:	4b18      	ldr	r3, [pc, #96]	; (10e8 <usart_init+0x684>)
    1086:	4798      	blx	r3
    1088:	1c05      	adds	r5, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    108a:	4918      	ldr	r1, [pc, #96]	; (10ec <usart_init+0x688>)
    108c:	4b18      	ldr	r3, [pc, #96]	; (10f0 <usart_init+0x68c>)
    108e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1090:	00ad      	lsls	r5, r5, #2
    1092:	4b18      	ldr	r3, [pc, #96]	; (10f4 <usart_init+0x690>)
    1094:	50ec      	str	r4, [r5, r3]
#endif

	return status_code;
    1096:	2000      	movs	r0, #0
    1098:	e002      	b.n	10a0 <usart_init+0x63c>
    109a:	4b06      	ldr	r3, [pc, #24]	; (10b4 <usart_init+0x650>)
    109c:	6818      	ldr	r0, [r3, #0]
    109e:	e526      	b.n	aee <usart_init+0x8a>
}
    10a0:	b011      	add	sp, #68	; 0x44
    10a2:	bc3c      	pop	{r2, r3, r4, r5}
    10a4:	4690      	mov	r8, r2
    10a6:	4699      	mov	r9, r3
    10a8:	46a2      	mov	sl, r4
    10aa:	46ab      	mov	fp, r5
    10ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10ae:	46c0      	nop			; (mov r8, r8)
    10b0:	41002000 	.word	0x41002000
    10b4:	2000008c 	.word	0x2000008c
    10b8:	00004444 	.word	0x00004444
    10bc:	0000468c 	.word	0x0000468c
    10c0:	000046a0 	.word	0x000046a0
    10c4:	000002fe 	.word	0x000002fe
    10c8:	0000020d 	.word	0x0000020d
    10cc:	00004484 	.word	0x00004484
    10d0:	000033cd 	.word	0x000033cd
    10d4:	000002e9 	.word	0x000002e9
    10d8:	00004694 	.word	0x00004694
    10dc:	000002ea 	.word	0x000002ea
    10e0:	00000709 	.word	0x00000709
    10e4:	000023c5 	.word	0x000023c5
    10e8:	000008c5 	.word	0x000008c5
    10ec:	00001a5d 	.word	0x00001a5d
    10f0:	0000099d 	.word	0x0000099d
    10f4:	20000130 	.word	0x20000130

000010f8 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    10f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    10fa:	4647      	mov	r7, r8
    10fc:	b480      	push	{r7}
    10fe:	b082      	sub	sp, #8
    1100:	1c04      	adds	r4, r0, #0
    1102:	1c0e      	adds	r6, r1, #0
    1104:	4b4f      	ldr	r3, [pc, #316]	; (1244 <usart_write_wait+0x14c>)
    1106:	6818      	ldr	r0, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
    1108:	2800      	cmp	r0, #0
    110a:	d010      	beq.n	112e <usart_write_wait+0x36>
    110c:	2c00      	cmp	r4, #0
    110e:	d118      	bne.n	1142 <usart_write_wait+0x4a>
    1110:	4b4d      	ldr	r3, [pc, #308]	; (1248 <usart_write_wait+0x150>)
    1112:	9300      	str	r3, [sp, #0]
    1114:	4b4d      	ldr	r3, [pc, #308]	; (124c <usart_write_wait+0x154>)
    1116:	9301      	str	r3, [sp, #4]
    1118:	2101      	movs	r1, #1
    111a:	4a4d      	ldr	r2, [pc, #308]	; (1250 <usart_write_wait+0x158>)
    111c:	2388      	movs	r3, #136	; 0x88
    111e:	33ff      	adds	r3, #255	; 0xff
    1120:	4d4c      	ldr	r5, [pc, #304]	; (1254 <usart_write_wait+0x15c>)
    1122:	47a8      	blx	r5
    1124:	4b47      	ldr	r3, [pc, #284]	; (1244 <usart_write_wait+0x14c>)
    1126:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    1128:	2800      	cmp	r0, #0
    112a:	d10a      	bne.n	1142 <usart_write_wait+0x4a>
    112c:	e017      	b.n	115e <usart_write_wait+0x66>
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
	/* Sanity check arguments */
	Assert(module);
    112e:	2c00      	cmp	r4, #0
    1130:	d115      	bne.n	115e <usart_write_wait+0x66>
    1132:	4849      	ldr	r0, [pc, #292]	; (1258 <usart_write_wait+0x160>)
    1134:	4945      	ldr	r1, [pc, #276]	; (124c <usart_write_wait+0x154>)
    1136:	4a46      	ldr	r2, [pc, #280]	; (1250 <usart_write_wait+0x158>)
    1138:	2388      	movs	r3, #136	; 0x88
    113a:	33ff      	adds	r3, #255	; 0xff
    113c:	4c47      	ldr	r4, [pc, #284]	; (125c <usart_write_wait+0x164>)
    113e:	47a0      	blx	r4
    1140:	e7fe      	b.n	1140 <usart_write_wait+0x48>
	Assert(module->hw);
    1142:	6823      	ldr	r3, [r4, #0]
    1144:	2b00      	cmp	r3, #0
    1146:	d115      	bne.n	1174 <usart_write_wait+0x7c>
    1148:	4b3f      	ldr	r3, [pc, #252]	; (1248 <usart_write_wait+0x150>)
    114a:	9300      	str	r3, [sp, #0]
    114c:	4b44      	ldr	r3, [pc, #272]	; (1260 <usart_write_wait+0x168>)
    114e:	9301      	str	r3, [sp, #4]
    1150:	2101      	movs	r1, #1
    1152:	4a3f      	ldr	r2, [pc, #252]	; (1250 <usart_write_wait+0x158>)
    1154:	23c4      	movs	r3, #196	; 0xc4
    1156:	005b      	lsls	r3, r3, #1
    1158:	4d3e      	ldr	r5, [pc, #248]	; (1254 <usart_write_wait+0x15c>)
    115a:	47a8      	blx	r5
    115c:	e00a      	b.n	1174 <usart_write_wait+0x7c>
    115e:	6827      	ldr	r7, [r4, #0]
    1160:	2f00      	cmp	r7, #0
    1162:	d107      	bne.n	1174 <usart_write_wait+0x7c>
    1164:	483c      	ldr	r0, [pc, #240]	; (1258 <usart_write_wait+0x160>)
    1166:	493e      	ldr	r1, [pc, #248]	; (1260 <usart_write_wait+0x168>)
    1168:	4a39      	ldr	r2, [pc, #228]	; (1250 <usart_write_wait+0x158>)
    116a:	23c4      	movs	r3, #196	; 0xc4
    116c:	005b      	lsls	r3, r3, #1
    116e:	4c3b      	ldr	r4, [pc, #236]	; (125c <usart_write_wait+0x164>)
    1170:	47a0      	blx	r4
    1172:	e7fe      	b.n	1172 <usart_write_wait+0x7a>

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1174:	6825      	ldr	r5, [r4, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1176:	79e3      	ldrb	r3, [r4, #7]
		return STATUS_ERR_DENIED;
    1178:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    117a:	2b00      	cmp	r3, #0
    117c:	d05d      	beq.n	123a <usart_write_wait+0x142>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    117e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    1180:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    1182:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    1184:	2b00      	cmp	r3, #0
    1186:	d158      	bne.n	123a <usart_write_wait+0x142>
    1188:	4b2e      	ldr	r3, [pc, #184]	; (1244 <usart_write_wait+0x14c>)
    118a:	6818      	ldr	r0, [r3, #0]
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);
    118c:	2800      	cmp	r0, #0
    118e:	d00b      	beq.n	11a8 <usart_write_wait+0xb0>
    1190:	2c00      	cmp	r4, #0
    1192:	d112      	bne.n	11ba <usart_write_wait+0xc2>
    1194:	4b2c      	ldr	r3, [pc, #176]	; (1248 <usart_write_wait+0x150>)
    1196:	9300      	str	r3, [sp, #0]
    1198:	4b2c      	ldr	r3, [pc, #176]	; (124c <usart_write_wait+0x154>)
    119a:	9301      	str	r3, [sp, #4]
    119c:	2101      	movs	r1, #1
    119e:	4a31      	ldr	r2, [pc, #196]	; (1264 <usart_write_wait+0x16c>)
    11a0:	4b31      	ldr	r3, [pc, #196]	; (1268 <usart_write_wait+0x170>)
    11a2:	4f2c      	ldr	r7, [pc, #176]	; (1254 <usart_write_wait+0x15c>)
    11a4:	47b8      	blx	r7
    11a6:	e008      	b.n	11ba <usart_write_wait+0xc2>
    11a8:	2c00      	cmp	r4, #0
    11aa:	d106      	bne.n	11ba <usart_write_wait+0xc2>
    11ac:	482a      	ldr	r0, [pc, #168]	; (1258 <usart_write_wait+0x160>)
    11ae:	4927      	ldr	r1, [pc, #156]	; (124c <usart_write_wait+0x154>)
    11b0:	4a2c      	ldr	r2, [pc, #176]	; (1264 <usart_write_wait+0x16c>)
    11b2:	4b2d      	ldr	r3, [pc, #180]	; (1268 <usart_write_wait+0x170>)
    11b4:	4c29      	ldr	r4, [pc, #164]	; (125c <usart_write_wait+0x164>)
    11b6:	47a0      	blx	r4
    11b8:	e7fe      	b.n	11b8 <usart_write_wait+0xc0>
    11ba:	4b22      	ldr	r3, [pc, #136]	; (1244 <usart_write_wait+0x14c>)
    11bc:	4698      	mov	r8, r3
    11be:	4647      	mov	r7, r8
    11c0:	6838      	ldr	r0, [r7, #0]
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
	/* Sanity check arguments */
	Assert(module);
    11c2:	2800      	cmp	r0, #0
    11c4:	d00f      	beq.n	11e6 <usart_write_wait+0xee>
    11c6:	2c00      	cmp	r4, #0
    11c8:	d116      	bne.n	11f8 <usart_write_wait+0x100>
    11ca:	4b1f      	ldr	r3, [pc, #124]	; (1248 <usart_write_wait+0x150>)
    11cc:	9300      	str	r3, [sp, #0]
    11ce:	4b1f      	ldr	r3, [pc, #124]	; (124c <usart_write_wait+0x154>)
    11d0:	9301      	str	r3, [sp, #4]
    11d2:	2101      	movs	r1, #1
    11d4:	4a23      	ldr	r2, [pc, #140]	; (1264 <usart_write_wait+0x16c>)
    11d6:	4b25      	ldr	r3, [pc, #148]	; (126c <usart_write_wait+0x174>)
    11d8:	4f1e      	ldr	r7, [pc, #120]	; (1254 <usart_write_wait+0x15c>)
    11da:	47b8      	blx	r7
    11dc:	4b19      	ldr	r3, [pc, #100]	; (1244 <usart_write_wait+0x14c>)
    11de:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    11e0:	2800      	cmp	r0, #0
    11e2:	d109      	bne.n	11f8 <usart_write_wait+0x100>
    11e4:	e015      	b.n	1212 <usart_write_wait+0x11a>
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
	/* Sanity check arguments */
	Assert(module);
    11e6:	2c00      	cmp	r4, #0
    11e8:	d113      	bne.n	1212 <usart_write_wait+0x11a>
    11ea:	481b      	ldr	r0, [pc, #108]	; (1258 <usart_write_wait+0x160>)
    11ec:	4917      	ldr	r1, [pc, #92]	; (124c <usart_write_wait+0x154>)
    11ee:	4a1d      	ldr	r2, [pc, #116]	; (1264 <usart_write_wait+0x16c>)
    11f0:	4b1e      	ldr	r3, [pc, #120]	; (126c <usart_write_wait+0x174>)
    11f2:	4c1a      	ldr	r4, [pc, #104]	; (125c <usart_write_wait+0x164>)
    11f4:	47a0      	blx	r4
    11f6:	e7fe      	b.n	11f6 <usart_write_wait+0xfe>
	Assert(module->hw);
    11f8:	6823      	ldr	r3, [r4, #0]
    11fa:	2b00      	cmp	r3, #0
    11fc:	d113      	bne.n	1226 <usart_write_wait+0x12e>
    11fe:	4f12      	ldr	r7, [pc, #72]	; (1248 <usart_write_wait+0x150>)
    1200:	9700      	str	r7, [sp, #0]
    1202:	4b17      	ldr	r3, [pc, #92]	; (1260 <usart_write_wait+0x168>)
    1204:	9301      	str	r3, [sp, #4]
    1206:	2101      	movs	r1, #1
    1208:	4a16      	ldr	r2, [pc, #88]	; (1264 <usart_write_wait+0x16c>)
    120a:	4b19      	ldr	r3, [pc, #100]	; (1270 <usart_write_wait+0x178>)
    120c:	4f11      	ldr	r7, [pc, #68]	; (1254 <usart_write_wait+0x15c>)
    120e:	47b8      	blx	r7
    1210:	e009      	b.n	1226 <usart_write_wait+0x12e>
    1212:	6823      	ldr	r3, [r4, #0]
    1214:	2b00      	cmp	r3, #0
    1216:	d106      	bne.n	1226 <usart_write_wait+0x12e>
    1218:	480f      	ldr	r0, [pc, #60]	; (1258 <usart_write_wait+0x160>)
    121a:	4911      	ldr	r1, [pc, #68]	; (1260 <usart_write_wait+0x168>)
    121c:	4a11      	ldr	r2, [pc, #68]	; (1264 <usart_write_wait+0x16c>)
    121e:	4b14      	ldr	r3, [pc, #80]	; (1270 <usart_write_wait+0x178>)
    1220:	4c0e      	ldr	r4, [pc, #56]	; (125c <usart_write_wait+0x164>)
    1222:	47a0      	blx	r4
    1224:	e7fe      	b.n	1224 <usart_write_wait+0x12c>

	SercomUsart *const usart_hw = &(module->hw->USART);
    1226:	6823      	ldr	r3, [r4, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1228:	69db      	ldr	r3, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    122a:	2b00      	cmp	r3, #0
    122c:	d1c7      	bne.n	11be <usart_write_wait+0xc6>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    122e:	852e      	strh	r6, [r5, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1230:	2202      	movs	r2, #2
    1232:	7e2b      	ldrb	r3, [r5, #24]
    1234:	4213      	tst	r3, r2
    1236:	d0fc      	beq.n	1232 <usart_write_wait+0x13a>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    1238:	2000      	movs	r0, #0
}
    123a:	b002      	add	sp, #8
    123c:	bc04      	pop	{r2}
    123e:	4690      	mov	r8, r2
    1240:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1242:	46c0      	nop			; (mov r8, r8)
    1244:	2000008c 	.word	0x2000008c
    1248:	00004444 	.word	0x00004444
    124c:	0000468c 	.word	0x0000468c
    1250:	0000465c 	.word	0x0000465c
    1254:	0000020d 	.word	0x0000020d
    1258:	00004484 	.word	0x00004484
    125c:	000033cd 	.word	0x000033cd
    1260:	00004694 	.word	0x00004694
    1264:	000046a0 	.word	0x000046a0
    1268:	000002fe 	.word	0x000002fe
    126c:	000002e9 	.word	0x000002e9
    1270:	000002ea 	.word	0x000002ea

00001274 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    1274:	b5f0      	push	{r4, r5, r6, r7, lr}
    1276:	4647      	mov	r7, r8
    1278:	b480      	push	{r7}
    127a:	b082      	sub	sp, #8
    127c:	1c04      	adds	r4, r0, #0
    127e:	1c0e      	adds	r6, r1, #0
    1280:	4b63      	ldr	r3, [pc, #396]	; (1410 <usart_read_wait+0x19c>)
    1282:	6818      	ldr	r0, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
    1284:	2800      	cmp	r0, #0
    1286:	d010      	beq.n	12aa <usart_read_wait+0x36>
    1288:	2c00      	cmp	r4, #0
    128a:	d118      	bne.n	12be <usart_read_wait+0x4a>
    128c:	4b61      	ldr	r3, [pc, #388]	; (1414 <usart_read_wait+0x1a0>)
    128e:	9300      	str	r3, [sp, #0]
    1290:	4b61      	ldr	r3, [pc, #388]	; (1418 <usart_read_wait+0x1a4>)
    1292:	9301      	str	r3, [sp, #4]
    1294:	2101      	movs	r1, #1
    1296:	4a61      	ldr	r2, [pc, #388]	; (141c <usart_read_wait+0x1a8>)
    1298:	23e4      	movs	r3, #228	; 0xe4
    129a:	005b      	lsls	r3, r3, #1
    129c:	4d60      	ldr	r5, [pc, #384]	; (1420 <usart_read_wait+0x1ac>)
    129e:	47a8      	blx	r5
    12a0:	4b5b      	ldr	r3, [pc, #364]	; (1410 <usart_read_wait+0x19c>)
    12a2:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    12a4:	2800      	cmp	r0, #0
    12a6:	d10a      	bne.n	12be <usart_read_wait+0x4a>
    12a8:	e017      	b.n	12da <usart_read_wait+0x66>
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
	/* Sanity check arguments */
	Assert(module);
    12aa:	2c00      	cmp	r4, #0
    12ac:	d115      	bne.n	12da <usart_read_wait+0x66>
    12ae:	485d      	ldr	r0, [pc, #372]	; (1424 <usart_read_wait+0x1b0>)
    12b0:	4959      	ldr	r1, [pc, #356]	; (1418 <usart_read_wait+0x1a4>)
    12b2:	4a5a      	ldr	r2, [pc, #360]	; (141c <usart_read_wait+0x1a8>)
    12b4:	23e4      	movs	r3, #228	; 0xe4
    12b6:	005b      	lsls	r3, r3, #1
    12b8:	4c5b      	ldr	r4, [pc, #364]	; (1428 <usart_read_wait+0x1b4>)
    12ba:	47a0      	blx	r4
    12bc:	e7fe      	b.n	12bc <usart_read_wait+0x48>
	Assert(module->hw);
    12be:	6822      	ldr	r2, [r4, #0]
    12c0:	2a00      	cmp	r2, #0
    12c2:	d115      	bne.n	12f0 <usart_read_wait+0x7c>
    12c4:	4b53      	ldr	r3, [pc, #332]	; (1414 <usart_read_wait+0x1a0>)
    12c6:	9300      	str	r3, [sp, #0]
    12c8:	4b58      	ldr	r3, [pc, #352]	; (142c <usart_read_wait+0x1b8>)
    12ca:	9301      	str	r3, [sp, #4]
    12cc:	2101      	movs	r1, #1
    12ce:	4a53      	ldr	r2, [pc, #332]	; (141c <usart_read_wait+0x1a8>)
    12d0:	23ca      	movs	r3, #202	; 0xca
    12d2:	33ff      	adds	r3, #255	; 0xff
    12d4:	4d52      	ldr	r5, [pc, #328]	; (1420 <usart_read_wait+0x1ac>)
    12d6:	47a8      	blx	r5
    12d8:	e00a      	b.n	12f0 <usart_read_wait+0x7c>
    12da:	6823      	ldr	r3, [r4, #0]
    12dc:	2b00      	cmp	r3, #0
    12de:	d107      	bne.n	12f0 <usart_read_wait+0x7c>
    12e0:	4850      	ldr	r0, [pc, #320]	; (1424 <usart_read_wait+0x1b0>)
    12e2:	4952      	ldr	r1, [pc, #328]	; (142c <usart_read_wait+0x1b8>)
    12e4:	4a4d      	ldr	r2, [pc, #308]	; (141c <usart_read_wait+0x1a8>)
    12e6:	23ca      	movs	r3, #202	; 0xca
    12e8:	33ff      	adds	r3, #255	; 0xff
    12ea:	4c4f      	ldr	r4, [pc, #316]	; (1428 <usart_read_wait+0x1b4>)
    12ec:	47a0      	blx	r4
    12ee:	e7fe      	b.n	12ee <usart_read_wait+0x7a>

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    12f0:	6825      	ldr	r5, [r4, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    12f2:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    12f4:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    12f6:	2b00      	cmp	r3, #0
    12f8:	d100      	bne.n	12fc <usart_read_wait+0x88>
    12fa:	e084      	b.n	1406 <usart_read_wait+0x192>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    12fc:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    12fe:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    1300:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    1302:	2b00      	cmp	r3, #0
    1304:	d000      	beq.n	1308 <usart_read_wait+0x94>
    1306:	e07e      	b.n	1406 <usart_read_wait+0x192>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1308:	7e2b      	ldrb	r3, [r5, #24]
    130a:	075f      	lsls	r7, r3, #29
    130c:	d57b      	bpl.n	1406 <usart_read_wait+0x192>
    130e:	4b40      	ldr	r3, [pc, #256]	; (1410 <usart_read_wait+0x19c>)
    1310:	6818      	ldr	r0, [r3, #0]
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);
    1312:	2800      	cmp	r0, #0
    1314:	d00b      	beq.n	132e <usart_read_wait+0xba>
    1316:	2c00      	cmp	r4, #0
    1318:	d112      	bne.n	1340 <usart_read_wait+0xcc>
    131a:	4b3e      	ldr	r3, [pc, #248]	; (1414 <usart_read_wait+0x1a0>)
    131c:	9300      	str	r3, [sp, #0]
    131e:	4b3e      	ldr	r3, [pc, #248]	; (1418 <usart_read_wait+0x1a4>)
    1320:	9301      	str	r3, [sp, #4]
    1322:	2101      	movs	r1, #1
    1324:	4a42      	ldr	r2, [pc, #264]	; (1430 <usart_read_wait+0x1bc>)
    1326:	4b43      	ldr	r3, [pc, #268]	; (1434 <usart_read_wait+0x1c0>)
    1328:	4f3d      	ldr	r7, [pc, #244]	; (1420 <usart_read_wait+0x1ac>)
    132a:	47b8      	blx	r7
    132c:	e008      	b.n	1340 <usart_read_wait+0xcc>
    132e:	2c00      	cmp	r4, #0
    1330:	d106      	bne.n	1340 <usart_read_wait+0xcc>
    1332:	483c      	ldr	r0, [pc, #240]	; (1424 <usart_read_wait+0x1b0>)
    1334:	4938      	ldr	r1, [pc, #224]	; (1418 <usart_read_wait+0x1a4>)
    1336:	4a3e      	ldr	r2, [pc, #248]	; (1430 <usart_read_wait+0x1bc>)
    1338:	4b3e      	ldr	r3, [pc, #248]	; (1434 <usart_read_wait+0x1c0>)
    133a:	4c3b      	ldr	r4, [pc, #236]	; (1428 <usart_read_wait+0x1b4>)
    133c:	47a0      	blx	r4
    133e:	e7fe      	b.n	133e <usart_read_wait+0xca>
    1340:	4a33      	ldr	r2, [pc, #204]	; (1410 <usart_read_wait+0x19c>)
    1342:	4690      	mov	r8, r2
    1344:	4643      	mov	r3, r8
    1346:	6818      	ldr	r0, [r3, #0]
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
	/* Sanity check arguments */
	Assert(module);
    1348:	2800      	cmp	r0, #0
    134a:	d00f      	beq.n	136c <usart_read_wait+0xf8>
    134c:	2c00      	cmp	r4, #0
    134e:	d116      	bne.n	137e <usart_read_wait+0x10a>
    1350:	4b30      	ldr	r3, [pc, #192]	; (1414 <usart_read_wait+0x1a0>)
    1352:	9300      	str	r3, [sp, #0]
    1354:	4b30      	ldr	r3, [pc, #192]	; (1418 <usart_read_wait+0x1a4>)
    1356:	9301      	str	r3, [sp, #4]
    1358:	2101      	movs	r1, #1
    135a:	4a35      	ldr	r2, [pc, #212]	; (1430 <usart_read_wait+0x1bc>)
    135c:	4b36      	ldr	r3, [pc, #216]	; (1438 <usart_read_wait+0x1c4>)
    135e:	4f30      	ldr	r7, [pc, #192]	; (1420 <usart_read_wait+0x1ac>)
    1360:	47b8      	blx	r7
    1362:	4b2b      	ldr	r3, [pc, #172]	; (1410 <usart_read_wait+0x19c>)
    1364:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    1366:	2800      	cmp	r0, #0
    1368:	d109      	bne.n	137e <usart_read_wait+0x10a>
    136a:	e015      	b.n	1398 <usart_read_wait+0x124>
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
	/* Sanity check arguments */
	Assert(module);
    136c:	2c00      	cmp	r4, #0
    136e:	d113      	bne.n	1398 <usart_read_wait+0x124>
    1370:	482c      	ldr	r0, [pc, #176]	; (1424 <usart_read_wait+0x1b0>)
    1372:	4929      	ldr	r1, [pc, #164]	; (1418 <usart_read_wait+0x1a4>)
    1374:	4a2e      	ldr	r2, [pc, #184]	; (1430 <usart_read_wait+0x1bc>)
    1376:	4b30      	ldr	r3, [pc, #192]	; (1438 <usart_read_wait+0x1c4>)
    1378:	4c2b      	ldr	r4, [pc, #172]	; (1428 <usart_read_wait+0x1b4>)
    137a:	47a0      	blx	r4
    137c:	e7fe      	b.n	137c <usart_read_wait+0x108>
	Assert(module->hw);
    137e:	6822      	ldr	r2, [r4, #0]
    1380:	2a00      	cmp	r2, #0
    1382:	d113      	bne.n	13ac <usart_read_wait+0x138>
    1384:	4b23      	ldr	r3, [pc, #140]	; (1414 <usart_read_wait+0x1a0>)
    1386:	9300      	str	r3, [sp, #0]
    1388:	4b28      	ldr	r3, [pc, #160]	; (142c <usart_read_wait+0x1b8>)
    138a:	9301      	str	r3, [sp, #4]
    138c:	2101      	movs	r1, #1
    138e:	4a28      	ldr	r2, [pc, #160]	; (1430 <usart_read_wait+0x1bc>)
    1390:	4b2a      	ldr	r3, [pc, #168]	; (143c <usart_read_wait+0x1c8>)
    1392:	4f23      	ldr	r7, [pc, #140]	; (1420 <usart_read_wait+0x1ac>)
    1394:	47b8      	blx	r7
    1396:	e009      	b.n	13ac <usart_read_wait+0x138>
    1398:	6822      	ldr	r2, [r4, #0]
    139a:	2a00      	cmp	r2, #0
    139c:	d106      	bne.n	13ac <usart_read_wait+0x138>
    139e:	4821      	ldr	r0, [pc, #132]	; (1424 <usart_read_wait+0x1b0>)
    13a0:	4922      	ldr	r1, [pc, #136]	; (142c <usart_read_wait+0x1b8>)
    13a2:	4a23      	ldr	r2, [pc, #140]	; (1430 <usart_read_wait+0x1bc>)
    13a4:	4b25      	ldr	r3, [pc, #148]	; (143c <usart_read_wait+0x1c8>)
    13a6:	4c20      	ldr	r4, [pc, #128]	; (1428 <usart_read_wait+0x1b4>)
    13a8:	47a0      	blx	r4
    13aa:	e7fe      	b.n	13aa <usart_read_wait+0x136>

	SercomUsart *const usart_hw = &(module->hw->USART);
    13ac:	6823      	ldr	r3, [r4, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    13ae:	69db      	ldr	r3, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    13b0:	2b00      	cmp	r3, #0
    13b2:	d1c7      	bne.n	1344 <usart_read_wait+0xd0>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    13b4:	8b6b      	ldrh	r3, [r5, #26]
    13b6:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    13b8:	069f      	lsls	r7, r3, #26
    13ba:	d021      	beq.n	1400 <usart_read_wait+0x18c>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    13bc:	079a      	lsls	r2, r3, #30
    13be:	d503      	bpl.n	13c8 <usart_read_wait+0x154>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    13c0:	2302      	movs	r3, #2
    13c2:	836b      	strh	r3, [r5, #26]

			return STATUS_ERR_BAD_FORMAT;
    13c4:	201a      	movs	r0, #26
    13c6:	e01e      	b.n	1406 <usart_read_wait+0x192>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    13c8:	075f      	lsls	r7, r3, #29
    13ca:	d503      	bpl.n	13d4 <usart_read_wait+0x160>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    13cc:	2304      	movs	r3, #4
    13ce:	836b      	strh	r3, [r5, #26]

			return STATUS_ERR_OVERFLOW;
    13d0:	201e      	movs	r0, #30
    13d2:	e018      	b.n	1406 <usart_read_wait+0x192>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    13d4:	07da      	lsls	r2, r3, #31
    13d6:	d503      	bpl.n	13e0 <usart_read_wait+0x16c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    13d8:	2301      	movs	r3, #1
    13da:	836b      	strh	r3, [r5, #26]

			return STATUS_ERR_BAD_DATA;
    13dc:	2013      	movs	r0, #19
    13de:	e012      	b.n	1406 <usart_read_wait+0x192>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    13e0:	06df      	lsls	r7, r3, #27
    13e2:	d505      	bpl.n	13f0 <usart_read_wait+0x17c>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    13e4:	8b6a      	ldrh	r2, [r5, #26]
    13e6:	2310      	movs	r3, #16
    13e8:	4313      	orrs	r3, r2
    13ea:	836b      	strh	r3, [r5, #26]

			return STATUS_ERR_PROTOCOL;
    13ec:	2042      	movs	r0, #66	; 0x42
    13ee:	e00a      	b.n	1406 <usart_read_wait+0x192>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    13f0:	069a      	lsls	r2, r3, #26
    13f2:	d505      	bpl.n	1400 <usart_read_wait+0x18c>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    13f4:	8b6a      	ldrh	r2, [r5, #26]
    13f6:	2320      	movs	r3, #32
    13f8:	4313      	orrs	r3, r2
    13fa:	836b      	strh	r3, [r5, #26]

			return STATUS_ERR_PACKET_COLLISION;
    13fc:	2041      	movs	r0, #65	; 0x41
    13fe:	e002      	b.n	1406 <usart_read_wait+0x192>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    1400:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    1402:	8033      	strh	r3, [r6, #0]

	return STATUS_OK;
    1404:	2000      	movs	r0, #0
}
    1406:	b002      	add	sp, #8
    1408:	bc04      	pop	{r2}
    140a:	4690      	mov	r8, r2
    140c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    140e:	46c0      	nop			; (mov r8, r8)
    1410:	2000008c 	.word	0x2000008c
    1414:	00004444 	.word	0x00004444
    1418:	0000468c 	.word	0x0000468c
    141c:	0000465c 	.word	0x0000465c
    1420:	0000020d 	.word	0x0000020d
    1424:	00004484 	.word	0x00004484
    1428:	000033cd 	.word	0x000033cd
    142c:	00004694 	.word	0x00004694
    1430:	000046a0 	.word	0x000046a0
    1434:	000002fe 	.word	0x000002fe
    1438:	000002e9 	.word	0x000002e9
    143c:	000002ea 	.word	0x000002ea

00001440 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    1440:	b5f0      	push	{r4, r5, r6, r7, lr}
    1442:	465f      	mov	r7, fp
    1444:	4656      	mov	r6, sl
    1446:	464d      	mov	r5, r9
    1448:	4644      	mov	r4, r8
    144a:	b4f0      	push	{r4, r5, r6, r7}
    144c:	b083      	sub	sp, #12
    144e:	1c04      	adds	r4, r0, #0
    1450:	468b      	mov	fp, r1
    1452:	1c16      	adds	r6, r2, #0
    1454:	4b6f      	ldr	r3, [pc, #444]	; (1614 <usart_write_buffer_wait+0x1d4>)
    1456:	6818      	ldr	r0, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
    1458:	2800      	cmp	r0, #0
    145a:	d00f      	beq.n	147c <usart_write_buffer_wait+0x3c>
    145c:	2c00      	cmp	r4, #0
    145e:	d116      	bne.n	148e <usart_write_buffer_wait+0x4e>
    1460:	4b6d      	ldr	r3, [pc, #436]	; (1618 <usart_write_buffer_wait+0x1d8>)
    1462:	9300      	str	r3, [sp, #0]
    1464:	4b6d      	ldr	r3, [pc, #436]	; (161c <usart_write_buffer_wait+0x1dc>)
    1466:	9301      	str	r3, [sp, #4]
    1468:	2101      	movs	r1, #1
    146a:	4a6d      	ldr	r2, [pc, #436]	; (1620 <usart_write_buffer_wait+0x1e0>)
    146c:	4b6d      	ldr	r3, [pc, #436]	; (1624 <usart_write_buffer_wait+0x1e4>)
    146e:	4d6e      	ldr	r5, [pc, #440]	; (1628 <usart_write_buffer_wait+0x1e8>)
    1470:	47a8      	blx	r5
    1472:	4b68      	ldr	r3, [pc, #416]	; (1614 <usart_write_buffer_wait+0x1d4>)
    1474:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    1476:	2800      	cmp	r0, #0
    1478:	d109      	bne.n	148e <usart_write_buffer_wait+0x4e>
    147a:	e015      	b.n	14a8 <usart_write_buffer_wait+0x68>
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
	/* Sanity check arguments */
	Assert(module);
    147c:	2c00      	cmp	r4, #0
    147e:	d113      	bne.n	14a8 <usart_write_buffer_wait+0x68>
    1480:	486a      	ldr	r0, [pc, #424]	; (162c <usart_write_buffer_wait+0x1ec>)
    1482:	4966      	ldr	r1, [pc, #408]	; (161c <usart_write_buffer_wait+0x1dc>)
    1484:	4a66      	ldr	r2, [pc, #408]	; (1620 <usart_write_buffer_wait+0x1e0>)
    1486:	4b67      	ldr	r3, [pc, #412]	; (1624 <usart_write_buffer_wait+0x1e4>)
    1488:	4c69      	ldr	r4, [pc, #420]	; (1630 <usart_write_buffer_wait+0x1f0>)
    148a:	47a0      	blx	r4
    148c:	e7fe      	b.n	148c <usart_write_buffer_wait+0x4c>
	Assert(module->hw);
    148e:	6822      	ldr	r2, [r4, #0]
    1490:	2a00      	cmp	r2, #0
    1492:	d113      	bne.n	14bc <usart_write_buffer_wait+0x7c>
    1494:	4b60      	ldr	r3, [pc, #384]	; (1618 <usart_write_buffer_wait+0x1d8>)
    1496:	9300      	str	r3, [sp, #0]
    1498:	4b66      	ldr	r3, [pc, #408]	; (1634 <usart_write_buffer_wait+0x1f4>)
    149a:	9301      	str	r3, [sp, #4]
    149c:	2101      	movs	r1, #1
    149e:	4a60      	ldr	r2, [pc, #384]	; (1620 <usart_write_buffer_wait+0x1e0>)
    14a0:	4b65      	ldr	r3, [pc, #404]	; (1638 <usart_write_buffer_wait+0x1f8>)
    14a2:	4d61      	ldr	r5, [pc, #388]	; (1628 <usart_write_buffer_wait+0x1e8>)
    14a4:	47a8      	blx	r5
    14a6:	e009      	b.n	14bc <usart_write_buffer_wait+0x7c>
    14a8:	6823      	ldr	r3, [r4, #0]
    14aa:	2b00      	cmp	r3, #0
    14ac:	d106      	bne.n	14bc <usart_write_buffer_wait+0x7c>
    14ae:	485f      	ldr	r0, [pc, #380]	; (162c <usart_write_buffer_wait+0x1ec>)
    14b0:	4960      	ldr	r1, [pc, #384]	; (1634 <usart_write_buffer_wait+0x1f4>)
    14b2:	4a5b      	ldr	r2, [pc, #364]	; (1620 <usart_write_buffer_wait+0x1e0>)
    14b4:	4b60      	ldr	r3, [pc, #384]	; (1638 <usart_write_buffer_wait+0x1f8>)
    14b6:	4c5e      	ldr	r4, [pc, #376]	; (1630 <usart_write_buffer_wait+0x1f0>)
    14b8:	47a0      	blx	r4
    14ba:	e7fe      	b.n	14ba <usart_write_buffer_wait+0x7a>

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    14bc:	2017      	movs	r0, #23
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
    14be:	2e00      	cmp	r6, #0
    14c0:	d100      	bne.n	14c4 <usart_write_buffer_wait+0x84>
    14c2:	e09f      	b.n	1604 <usart_write_buffer_wait+0x1c4>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    14c4:	79e3      	ldrb	r3, [r4, #7]
		return STATUS_ERR_DENIED;
    14c6:	201c      	movs	r0, #28
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    14c8:	2b00      	cmp	r3, #0
    14ca:	d100      	bne.n	14ce <usart_write_buffer_wait+0x8e>
    14cc:	e09a      	b.n	1604 <usart_write_buffer_wait+0x1c4>
		return STATUS_ERR_DENIED;
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    14ce:	6825      	ldr	r5, [r4, #0]
    14d0:	4b50      	ldr	r3, [pc, #320]	; (1614 <usart_write_buffer_wait+0x1d4>)
    14d2:	6818      	ldr	r0, [r3, #0]
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);
    14d4:	2800      	cmp	r0, #0
    14d6:	d00b      	beq.n	14f0 <usart_write_buffer_wait+0xb0>
    14d8:	2c00      	cmp	r4, #0
    14da:	d112      	bne.n	1502 <usart_write_buffer_wait+0xc2>
    14dc:	4b4e      	ldr	r3, [pc, #312]	; (1618 <usart_write_buffer_wait+0x1d8>)
    14de:	9300      	str	r3, [sp, #0]
    14e0:	4b4e      	ldr	r3, [pc, #312]	; (161c <usart_write_buffer_wait+0x1dc>)
    14e2:	9301      	str	r3, [sp, #4]
    14e4:	2101      	movs	r1, #1
    14e6:	4a55      	ldr	r2, [pc, #340]	; (163c <usart_write_buffer_wait+0x1fc>)
    14e8:	4b55      	ldr	r3, [pc, #340]	; (1640 <usart_write_buffer_wait+0x200>)
    14ea:	4f4f      	ldr	r7, [pc, #316]	; (1628 <usart_write_buffer_wait+0x1e8>)
    14ec:	47b8      	blx	r7
    14ee:	e008      	b.n	1502 <usart_write_buffer_wait+0xc2>
    14f0:	2c00      	cmp	r4, #0
    14f2:	d106      	bne.n	1502 <usart_write_buffer_wait+0xc2>
    14f4:	484d      	ldr	r0, [pc, #308]	; (162c <usart_write_buffer_wait+0x1ec>)
    14f6:	4949      	ldr	r1, [pc, #292]	; (161c <usart_write_buffer_wait+0x1dc>)
    14f8:	4a50      	ldr	r2, [pc, #320]	; (163c <usart_write_buffer_wait+0x1fc>)
    14fa:	4b51      	ldr	r3, [pc, #324]	; (1640 <usart_write_buffer_wait+0x200>)
    14fc:	4c4c      	ldr	r4, [pc, #304]	; (1630 <usart_write_buffer_wait+0x1f0>)
    14fe:	47a0      	blx	r4
    1500:	e7fe      	b.n	1500 <usart_write_buffer_wait+0xc0>
    1502:	4a44      	ldr	r2, [pc, #272]	; (1614 <usart_write_buffer_wait+0x1d4>)
    1504:	4690      	mov	r8, r2
    1506:	4643      	mov	r3, r8
    1508:	6818      	ldr	r0, [r3, #0]
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
	/* Sanity check arguments */
	Assert(module);
    150a:	2800      	cmp	r0, #0
    150c:	d00f      	beq.n	152e <usart_write_buffer_wait+0xee>
    150e:	2c00      	cmp	r4, #0
    1510:	d116      	bne.n	1540 <usart_write_buffer_wait+0x100>
    1512:	4b41      	ldr	r3, [pc, #260]	; (1618 <usart_write_buffer_wait+0x1d8>)
    1514:	9300      	str	r3, [sp, #0]
    1516:	4b41      	ldr	r3, [pc, #260]	; (161c <usart_write_buffer_wait+0x1dc>)
    1518:	9301      	str	r3, [sp, #4]
    151a:	2101      	movs	r1, #1
    151c:	4a47      	ldr	r2, [pc, #284]	; (163c <usart_write_buffer_wait+0x1fc>)
    151e:	4b49      	ldr	r3, [pc, #292]	; (1644 <usart_write_buffer_wait+0x204>)
    1520:	4f41      	ldr	r7, [pc, #260]	; (1628 <usart_write_buffer_wait+0x1e8>)
    1522:	47b8      	blx	r7
    1524:	4b3b      	ldr	r3, [pc, #236]	; (1614 <usart_write_buffer_wait+0x1d4>)
    1526:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    1528:	2800      	cmp	r0, #0
    152a:	d109      	bne.n	1540 <usart_write_buffer_wait+0x100>
    152c:	e015      	b.n	155a <usart_write_buffer_wait+0x11a>
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
	/* Sanity check arguments */
	Assert(module);
    152e:	2c00      	cmp	r4, #0
    1530:	d113      	bne.n	155a <usart_write_buffer_wait+0x11a>
    1532:	483e      	ldr	r0, [pc, #248]	; (162c <usart_write_buffer_wait+0x1ec>)
    1534:	4939      	ldr	r1, [pc, #228]	; (161c <usart_write_buffer_wait+0x1dc>)
    1536:	4a41      	ldr	r2, [pc, #260]	; (163c <usart_write_buffer_wait+0x1fc>)
    1538:	4b42      	ldr	r3, [pc, #264]	; (1644 <usart_write_buffer_wait+0x204>)
    153a:	4c3d      	ldr	r4, [pc, #244]	; (1630 <usart_write_buffer_wait+0x1f0>)
    153c:	47a0      	blx	r4
    153e:	e7fe      	b.n	153e <usart_write_buffer_wait+0xfe>
	Assert(module->hw);
    1540:	6822      	ldr	r2, [r4, #0]
    1542:	2a00      	cmp	r2, #0
    1544:	d113      	bne.n	156e <usart_write_buffer_wait+0x12e>
    1546:	4b34      	ldr	r3, [pc, #208]	; (1618 <usart_write_buffer_wait+0x1d8>)
    1548:	9300      	str	r3, [sp, #0]
    154a:	4b3a      	ldr	r3, [pc, #232]	; (1634 <usart_write_buffer_wait+0x1f4>)
    154c:	9301      	str	r3, [sp, #4]
    154e:	2101      	movs	r1, #1
    1550:	4a3a      	ldr	r2, [pc, #232]	; (163c <usart_write_buffer_wait+0x1fc>)
    1552:	4b3d      	ldr	r3, [pc, #244]	; (1648 <usart_write_buffer_wait+0x208>)
    1554:	4f34      	ldr	r7, [pc, #208]	; (1628 <usart_write_buffer_wait+0x1e8>)
    1556:	47b8      	blx	r7
    1558:	e009      	b.n	156e <usart_write_buffer_wait+0x12e>
    155a:	6822      	ldr	r2, [r4, #0]
    155c:	2a00      	cmp	r2, #0
    155e:	d106      	bne.n	156e <usart_write_buffer_wait+0x12e>
    1560:	4832      	ldr	r0, [pc, #200]	; (162c <usart_write_buffer_wait+0x1ec>)
    1562:	4934      	ldr	r1, [pc, #208]	; (1634 <usart_write_buffer_wait+0x1f4>)
    1564:	4a35      	ldr	r2, [pc, #212]	; (163c <usart_write_buffer_wait+0x1fc>)
    1566:	4b38      	ldr	r3, [pc, #224]	; (1648 <usart_write_buffer_wait+0x208>)
    1568:	4c31      	ldr	r4, [pc, #196]	; (1630 <usart_write_buffer_wait+0x1f0>)
    156a:	47a0      	blx	r4
    156c:	e7fe      	b.n	156c <usart_write_buffer_wait+0x12c>

	SercomUsart *const usart_hw = &(module->hw->USART);
    156e:	6823      	ldr	r3, [r4, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1570:	69db      	ldr	r3, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1572:	2b00      	cmp	r3, #0
    1574:	d1c7      	bne.n	1506 <usart_write_buffer_wait+0xc6>
    1576:	46b1      	mov	r9, r6
    1578:	4698      	mov	r8, r3
	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    157a:	2601      	movs	r6, #1
    157c:	4f33      	ldr	r7, [pc, #204]	; (164c <usart_write_buffer_wait+0x20c>)
    157e:	46ba      	mov	sl, r7
    1580:	e023      	b.n	15ca <usart_write_buffer_wait+0x18a>
    1582:	7e2a      	ldrb	r2, [r5, #24]
    1584:	4232      	tst	r2, r6
    1586:	d104      	bne.n	1592 <usart_write_buffer_wait+0x152>
				break;
			} else if (i == USART_TIMEOUT) {
    1588:	2b01      	cmp	r3, #1
    158a:	d02d      	beq.n	15e8 <usart_write_buffer_wait+0x1a8>
    158c:	3b01      	subs	r3, #1

	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    158e:	2b00      	cmp	r3, #0
    1590:	d1f7      	bne.n	1582 <usart_write_buffer_wait+0x142>
				return STATUS_ERR_TIMEOUT;
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    1592:	4643      	mov	r3, r8
    1594:	3301      	adds	r3, #1
    1596:	b29b      	uxth	r3, r3
    1598:	465a      	mov	r2, fp
    159a:	4442      	add	r2, r8
    159c:	7811      	ldrb	r1, [r2, #0]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    159e:	7962      	ldrb	r2, [r4, #5]
    15a0:	2a01      	cmp	r2, #1
    15a2:	d001      	beq.n	15a8 <usart_write_buffer_wait+0x168>
				return STATUS_ERR_TIMEOUT;
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    15a4:	4698      	mov	r8, r3
    15a6:	e007      	b.n	15b8 <usart_write_buffer_wait+0x178>

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
    15a8:	4642      	mov	r2, r8
    15aa:	3202      	adds	r2, #2
    15ac:	b292      	uxth	r2, r2
    15ae:	4690      	mov	r8, r2
    15b0:	465f      	mov	r7, fp
    15b2:	5cfb      	ldrb	r3, [r7, r3]
    15b4:	021b      	lsls	r3, r3, #8
    15b6:	4319      	orrs	r1, r3
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
    15b8:	1c20      	adds	r0, r4, #0
    15ba:	4a25      	ldr	r2, [pc, #148]	; (1650 <usart_write_buffer_wait+0x210>)
    15bc:	4790      	blx	r2
    15be:	464b      	mov	r3, r9
    15c0:	3b01      	subs	r3, #1
    15c2:	b29b      	uxth	r3, r3
    15c4:	4699      	mov	r9, r3
	_usart_wait_for_sync(module);

	uint16_t tx_pos = 0;

	/* Blocks while buffer is being transferred */
	while (length--) {
    15c6:	2b00      	cmp	r3, #0
    15c8:	d016      	beq.n	15f8 <usart_write_buffer_wait+0x1b8>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    15ca:	7e2b      	ldrb	r3, [r5, #24]
    15cc:	4233      	tst	r3, r6
    15ce:	d1e0      	bne.n	1592 <usart_write_buffer_wait+0x152>
    15d0:	4653      	mov	r3, sl
    15d2:	e7d6      	b.n	1582 <usart_write_buffer_wait+0x142>
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    15d4:	7e29      	ldrb	r1, [r5, #24]
    15d6:	4211      	tst	r1, r2
    15d8:	d108      	bne.n	15ec <usart_write_buffer_wait+0x1ac>
			break;
		} else if (i == USART_TIMEOUT) {
    15da:	2b01      	cmp	r3, #1
    15dc:	d008      	beq.n	15f0 <usart_write_buffer_wait+0x1b0>
    15de:	3b01      	subs	r3, #1
		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    15e0:	2b00      	cmp	r3, #0
    15e2:	d1f7      	bne.n	15d4 <usart_write_buffer_wait+0x194>
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
    15e4:	2000      	movs	r0, #0
    15e6:	e00d      	b.n	1604 <usart_write_buffer_wait+0x1c4>
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
				break;
			} else if (i == USART_TIMEOUT) {
				return STATUS_ERR_TIMEOUT;
    15e8:	2012      	movs	r0, #18
    15ea:	e00b      	b.n	1604 <usart_write_buffer_wait+0x1c4>
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
    15ec:	2000      	movs	r0, #0
    15ee:	e009      	b.n	1604 <usart_write_buffer_wait+0x1c4>
	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
			break;
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
    15f0:	2012      	movs	r0, #18
    15f2:	e007      	b.n	1604 <usart_write_buffer_wait+0x1c4>
		}
	}

	return STATUS_OK;
    15f4:	2000      	movs	r0, #0
    15f6:	e005      	b.n	1604 <usart_write_buffer_wait+0x1c4>
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    15f8:	7e2b      	ldrb	r3, [r5, #24]
    15fa:	079f      	lsls	r7, r3, #30
    15fc:	d4fa      	bmi.n	15f4 <usart_write_buffer_wait+0x1b4>
    15fe:	4b13      	ldr	r3, [pc, #76]	; (164c <usart_write_buffer_wait+0x20c>)
    1600:	2202      	movs	r2, #2
    1602:	e7e7      	b.n	15d4 <usart_write_buffer_wait+0x194>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    1604:	b003      	add	sp, #12
    1606:	bc3c      	pop	{r2, r3, r4, r5}
    1608:	4690      	mov	r8, r2
    160a:	4699      	mov	r9, r3
    160c:	46a2      	mov	sl, r4
    160e:	46ab      	mov	fp, r5
    1610:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1612:	46c0      	nop			; (mov r8, r8)
    1614:	2000008c 	.word	0x2000008c
    1618:	00004444 	.word	0x00004444
    161c:	0000468c 	.word	0x0000468c
    1620:	0000465c 	.word	0x0000465c
    1624:	0000023e 	.word	0x0000023e
    1628:	0000020d 	.word	0x0000020d
    162c:	00004484 	.word	0x00004484
    1630:	000033cd 	.word	0x000033cd
    1634:	00004694 	.word	0x00004694
    1638:	0000023f 	.word	0x0000023f
    163c:	000046a0 	.word	0x000046a0
    1640:	000002fe 	.word	0x000002fe
    1644:	000002e9 	.word	0x000002e9
    1648:	000002ea 	.word	0x000002ea
    164c:	0000ffff 	.word	0x0000ffff
    1650:	000010f9 	.word	0x000010f9

00001654 <_usart_write_buffer>:
 */
void _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    1654:	b5f0      	push	{r4, r5, r6, r7, lr}
    1656:	b083      	sub	sp, #12
    1658:	1c04      	adds	r4, r0, #0
    165a:	1c0d      	adds	r5, r1, #0
    165c:	1c16      	adds	r6, r2, #0
    165e:	4b1f      	ldr	r3, [pc, #124]	; (16dc <_usart_write_buffer+0x88>)
    1660:	6818      	ldr	r0, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
    1662:	2800      	cmp	r0, #0
    1664:	d00f      	beq.n	1686 <_usart_write_buffer+0x32>
    1666:	2c00      	cmp	r4, #0
    1668:	d116      	bne.n	1698 <_usart_write_buffer+0x44>
    166a:	4b1d      	ldr	r3, [pc, #116]	; (16e0 <_usart_write_buffer+0x8c>)
    166c:	9300      	str	r3, [sp, #0]
    166e:	4b1d      	ldr	r3, [pc, #116]	; (16e4 <_usart_write_buffer+0x90>)
    1670:	9301      	str	r3, [sp, #4]
    1672:	2101      	movs	r1, #1
    1674:	4a1c      	ldr	r2, [pc, #112]	; (16e8 <_usart_write_buffer+0x94>)
    1676:	2340      	movs	r3, #64	; 0x40
    1678:	4f1c      	ldr	r7, [pc, #112]	; (16ec <_usart_write_buffer+0x98>)
    167a:	47b8      	blx	r7
    167c:	4b17      	ldr	r3, [pc, #92]	; (16dc <_usart_write_buffer+0x88>)
    167e:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    1680:	2800      	cmp	r0, #0
    1682:	d109      	bne.n	1698 <_usart_write_buffer+0x44>
    1684:	e015      	b.n	16b2 <_usart_write_buffer+0x5e>
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
	/* Sanity check arguments */
	Assert(module);
    1686:	2c00      	cmp	r4, #0
    1688:	d113      	bne.n	16b2 <_usart_write_buffer+0x5e>
    168a:	4819      	ldr	r0, [pc, #100]	; (16f0 <_usart_write_buffer+0x9c>)
    168c:	4915      	ldr	r1, [pc, #84]	; (16e4 <_usart_write_buffer+0x90>)
    168e:	4a16      	ldr	r2, [pc, #88]	; (16e8 <_usart_write_buffer+0x94>)
    1690:	2340      	movs	r3, #64	; 0x40
    1692:	4c18      	ldr	r4, [pc, #96]	; (16f4 <_usart_write_buffer+0xa0>)
    1694:	47a0      	blx	r4
    1696:	e7fe      	b.n	1696 <_usart_write_buffer+0x42>
	Assert(module->hw);
    1698:	6823      	ldr	r3, [r4, #0]
    169a:	2b00      	cmp	r3, #0
    169c:	d113      	bne.n	16c6 <_usart_write_buffer+0x72>
    169e:	4b10      	ldr	r3, [pc, #64]	; (16e0 <_usart_write_buffer+0x8c>)
    16a0:	9300      	str	r3, [sp, #0]
    16a2:	4b15      	ldr	r3, [pc, #84]	; (16f8 <_usart_write_buffer+0xa4>)
    16a4:	9301      	str	r3, [sp, #4]
    16a6:	2101      	movs	r1, #1
    16a8:	4a0f      	ldr	r2, [pc, #60]	; (16e8 <_usart_write_buffer+0x94>)
    16aa:	2341      	movs	r3, #65	; 0x41
    16ac:	4f0f      	ldr	r7, [pc, #60]	; (16ec <_usart_write_buffer+0x98>)
    16ae:	47b8      	blx	r7
    16b0:	e009      	b.n	16c6 <_usart_write_buffer+0x72>
    16b2:	6823      	ldr	r3, [r4, #0]
    16b4:	2b00      	cmp	r3, #0
    16b6:	d106      	bne.n	16c6 <_usart_write_buffer+0x72>
    16b8:	480d      	ldr	r0, [pc, #52]	; (16f0 <_usart_write_buffer+0x9c>)
    16ba:	490f      	ldr	r1, [pc, #60]	; (16f8 <_usart_write_buffer+0xa4>)
    16bc:	4a0a      	ldr	r2, [pc, #40]	; (16e8 <_usart_write_buffer+0x94>)
    16be:	2341      	movs	r3, #65	; 0x41
    16c0:	4c0c      	ldr	r4, [pc, #48]	; (16f4 <_usart_write_buffer+0xa0>)
    16c2:	47a0      	blx	r4
    16c4:	e7fe      	b.n	16c4 <_usart_write_buffer+0x70>

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    16c6:	6823      	ldr	r3, [r4, #0]

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    16c8:	85e6      	strh	r6, [r4, #46]	; 0x2e
	module->tx_buffer_ptr              = tx_data;
    16ca:	62a5      	str	r5, [r4, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    16cc:	2105      	movs	r1, #5
    16ce:	2233      	movs	r2, #51	; 0x33
    16d0:	54a1      	strb	r1, [r4, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    16d2:	2201      	movs	r2, #1
    16d4:	759a      	strb	r2, [r3, #22]
}
    16d6:	b003      	add	sp, #12
    16d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    16da:	46c0      	nop			; (mov r8, r8)
    16dc:	2000008c 	.word	0x2000008c
    16e0:	00004444 	.word	0x00004444
    16e4:	0000468c 	.word	0x0000468c
    16e8:	000046d0 	.word	0x000046d0
    16ec:	0000020d 	.word	0x0000020d
    16f0:	00004484 	.word	0x00004484
    16f4:	000033cd 	.word	0x000033cd
    16f8:	00004694 	.word	0x00004694

000016fc <_usart_read_buffer>:
 */
void _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    16fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    16fe:	b083      	sub	sp, #12
    1700:	1c04      	adds	r4, r0, #0
    1702:	1c0d      	adds	r5, r1, #0
    1704:	1c16      	adds	r6, r2, #0
    1706:	4b24      	ldr	r3, [pc, #144]	; (1798 <_usart_read_buffer+0x9c>)
    1708:	6818      	ldr	r0, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
    170a:	2800      	cmp	r0, #0
    170c:	d00f      	beq.n	172e <_usart_read_buffer+0x32>
    170e:	2c00      	cmp	r4, #0
    1710:	d116      	bne.n	1740 <_usart_read_buffer+0x44>
    1712:	4b22      	ldr	r3, [pc, #136]	; (179c <_usart_read_buffer+0xa0>)
    1714:	9300      	str	r3, [sp, #0]
    1716:	4b22      	ldr	r3, [pc, #136]	; (17a0 <_usart_read_buffer+0xa4>)
    1718:	9301      	str	r3, [sp, #4]
    171a:	2101      	movs	r1, #1
    171c:	4a21      	ldr	r2, [pc, #132]	; (17a4 <_usart_read_buffer+0xa8>)
    171e:	235e      	movs	r3, #94	; 0x5e
    1720:	4f21      	ldr	r7, [pc, #132]	; (17a8 <_usart_read_buffer+0xac>)
    1722:	47b8      	blx	r7
    1724:	4b1c      	ldr	r3, [pc, #112]	; (1798 <_usart_read_buffer+0x9c>)
    1726:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    1728:	2800      	cmp	r0, #0
    172a:	d109      	bne.n	1740 <_usart_read_buffer+0x44>
    172c:	e015      	b.n	175a <_usart_read_buffer+0x5e>
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	/* Sanity check arguments */
	Assert(module);
    172e:	2c00      	cmp	r4, #0
    1730:	d113      	bne.n	175a <_usart_read_buffer+0x5e>
    1732:	481e      	ldr	r0, [pc, #120]	; (17ac <_usart_read_buffer+0xb0>)
    1734:	491a      	ldr	r1, [pc, #104]	; (17a0 <_usart_read_buffer+0xa4>)
    1736:	4a1b      	ldr	r2, [pc, #108]	; (17a4 <_usart_read_buffer+0xa8>)
    1738:	235e      	movs	r3, #94	; 0x5e
    173a:	4c1d      	ldr	r4, [pc, #116]	; (17b0 <_usart_read_buffer+0xb4>)
    173c:	47a0      	blx	r4
    173e:	e7fe      	b.n	173e <_usart_read_buffer+0x42>
	Assert(module->hw);
    1740:	6823      	ldr	r3, [r4, #0]
    1742:	2b00      	cmp	r3, #0
    1744:	d113      	bne.n	176e <_usart_read_buffer+0x72>
    1746:	4b15      	ldr	r3, [pc, #84]	; (179c <_usart_read_buffer+0xa0>)
    1748:	9300      	str	r3, [sp, #0]
    174a:	4b1a      	ldr	r3, [pc, #104]	; (17b4 <_usart_read_buffer+0xb8>)
    174c:	9301      	str	r3, [sp, #4]
    174e:	2101      	movs	r1, #1
    1750:	4a14      	ldr	r2, [pc, #80]	; (17a4 <_usart_read_buffer+0xa8>)
    1752:	235f      	movs	r3, #95	; 0x5f
    1754:	4f14      	ldr	r7, [pc, #80]	; (17a8 <_usart_read_buffer+0xac>)
    1756:	47b8      	blx	r7
    1758:	e009      	b.n	176e <_usart_read_buffer+0x72>
    175a:	6823      	ldr	r3, [r4, #0]
    175c:	2b00      	cmp	r3, #0
    175e:	d106      	bne.n	176e <_usart_read_buffer+0x72>
    1760:	4812      	ldr	r0, [pc, #72]	; (17ac <_usart_read_buffer+0xb0>)
    1762:	4914      	ldr	r1, [pc, #80]	; (17b4 <_usart_read_buffer+0xb8>)
    1764:	4a0f      	ldr	r2, [pc, #60]	; (17a4 <_usart_read_buffer+0xa8>)
    1766:	235f      	movs	r3, #95	; 0x5f
    1768:	4c11      	ldr	r4, [pc, #68]	; (17b0 <_usart_read_buffer+0xb4>)
    176a:	47a0      	blx	r4
    176c:	e7fe      	b.n	176c <_usart_read_buffer+0x70>

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    176e:	6823      	ldr	r3, [r4, #0]

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    1770:	85a6      	strh	r6, [r4, #44]	; 0x2c
	module->rx_buffer_ptr              = rx_data;
    1772:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    1774:	2105      	movs	r1, #5
    1776:	2232      	movs	r2, #50	; 0x32
    1778:	54a1      	strb	r1, [r4, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    177a:	2204      	movs	r2, #4
    177c:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    177e:	7a22      	ldrb	r2, [r4, #8]
    1780:	2a00      	cmp	r2, #0
    1782:	d001      	beq.n	1788 <_usart_read_buffer+0x8c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    1784:	2220      	movs	r2, #32
    1786:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    1788:	7a62      	ldrb	r2, [r4, #9]
    178a:	2a00      	cmp	r2, #0
    178c:	d001      	beq.n	1792 <_usart_read_buffer+0x96>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    178e:	2208      	movs	r2, #8
    1790:	759a      	strb	r2, [r3, #22]
	}
#endif
}
    1792:	b003      	add	sp, #12
    1794:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1796:	46c0      	nop			; (mov r8, r8)
    1798:	2000008c 	.word	0x2000008c
    179c:	00004444 	.word	0x00004444
    17a0:	0000468c 	.word	0x0000468c
    17a4:	000046d0 	.word	0x000046d0
    17a8:	0000020d 	.word	0x0000020d
    17ac:	00004484 	.word	0x00004484
    17b0:	000033cd 	.word	0x000033cd
    17b4:	00004694 	.word	0x00004694

000017b8 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
    17b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    17ba:	b083      	sub	sp, #12
    17bc:	1c04      	adds	r4, r0, #0
    17be:	1c0e      	adds	r6, r1, #0
    17c0:	1c15      	adds	r5, r2, #0
    17c2:	4b1f      	ldr	r3, [pc, #124]	; (1840 <usart_register_callback+0x88>)
    17c4:	6818      	ldr	r0, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
    17c6:	2800      	cmp	r0, #0
    17c8:	d00f      	beq.n	17ea <usart_register_callback+0x32>
    17ca:	2c00      	cmp	r4, #0
    17cc:	d116      	bne.n	17fc <usart_register_callback+0x44>
    17ce:	4b1d      	ldr	r3, [pc, #116]	; (1844 <usart_register_callback+0x8c>)
    17d0:	9300      	str	r3, [sp, #0]
    17d2:	4b1d      	ldr	r3, [pc, #116]	; (1848 <usart_register_callback+0x90>)
    17d4:	9301      	str	r3, [sp, #4]
    17d6:	2101      	movs	r1, #1
    17d8:	4a1c      	ldr	r2, [pc, #112]	; (184c <usart_register_callback+0x94>)
    17da:	2390      	movs	r3, #144	; 0x90
    17dc:	4f1c      	ldr	r7, [pc, #112]	; (1850 <usart_register_callback+0x98>)
    17de:	47b8      	blx	r7
    17e0:	4b17      	ldr	r3, [pc, #92]	; (1840 <usart_register_callback+0x88>)
    17e2:	6818      	ldr	r0, [r3, #0]
	Assert(callback_func);
    17e4:	2800      	cmp	r0, #0
    17e6:	d109      	bne.n	17fc <usart_register_callback+0x44>
    17e8:	e014      	b.n	1814 <usart_register_callback+0x5c>
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
	/* Sanity check arguments */
	Assert(module);
    17ea:	2c00      	cmp	r4, #0
    17ec:	d112      	bne.n	1814 <usart_register_callback+0x5c>
    17ee:	4819      	ldr	r0, [pc, #100]	; (1854 <usart_register_callback+0x9c>)
    17f0:	4915      	ldr	r1, [pc, #84]	; (1848 <usart_register_callback+0x90>)
    17f2:	4a16      	ldr	r2, [pc, #88]	; (184c <usart_register_callback+0x94>)
    17f4:	2390      	movs	r3, #144	; 0x90
    17f6:	4c18      	ldr	r4, [pc, #96]	; (1858 <usart_register_callback+0xa0>)
    17f8:	47a0      	blx	r4
    17fa:	e7fe      	b.n	17fa <usart_register_callback+0x42>
	Assert(callback_func);
    17fc:	2e00      	cmp	r6, #0
    17fe:	d112      	bne.n	1826 <usart_register_callback+0x6e>
    1800:	4b10      	ldr	r3, [pc, #64]	; (1844 <usart_register_callback+0x8c>)
    1802:	9300      	str	r3, [sp, #0]
    1804:	4b15      	ldr	r3, [pc, #84]	; (185c <usart_register_callback+0xa4>)
    1806:	9301      	str	r3, [sp, #4]
    1808:	2101      	movs	r1, #1
    180a:	4a10      	ldr	r2, [pc, #64]	; (184c <usart_register_callback+0x94>)
    180c:	2391      	movs	r3, #145	; 0x91
    180e:	4f10      	ldr	r7, [pc, #64]	; (1850 <usart_register_callback+0x98>)
    1810:	47b8      	blx	r7
    1812:	e008      	b.n	1826 <usart_register_callback+0x6e>
    1814:	2e00      	cmp	r6, #0
    1816:	d106      	bne.n	1826 <usart_register_callback+0x6e>
    1818:	480e      	ldr	r0, [pc, #56]	; (1854 <usart_register_callback+0x9c>)
    181a:	4910      	ldr	r1, [pc, #64]	; (185c <usart_register_callback+0xa4>)
    181c:	4a0b      	ldr	r2, [pc, #44]	; (184c <usart_register_callback+0x94>)
    181e:	2391      	movs	r3, #145	; 0x91
    1820:	4c0d      	ldr	r4, [pc, #52]	; (1858 <usart_register_callback+0xa0>)
    1822:	47a0      	blx	r4
    1824:	e7fe      	b.n	1824 <usart_register_callback+0x6c>

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1826:	1cab      	adds	r3, r5, #2
    1828:	009b      	lsls	r3, r3, #2
    182a:	18e3      	adds	r3, r4, r3
    182c:	605e      	str	r6, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    182e:	2301      	movs	r3, #1
    1830:	40ab      	lsls	r3, r5
    1832:	1c1d      	adds	r5, r3, #0
    1834:	2330      	movs	r3, #48	; 0x30
    1836:	5ce2      	ldrb	r2, [r4, r3]
    1838:	4315      	orrs	r5, r2
    183a:	54e5      	strb	r5, [r4, r3]
}
    183c:	b003      	add	sp, #12
    183e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1840:	2000008c 	.word	0x2000008c
    1844:	00004444 	.word	0x00004444
    1848:	0000468c 	.word	0x0000468c
    184c:	000046d0 	.word	0x000046d0
    1850:	0000020d 	.word	0x0000020d
    1854:	00004484 	.word	0x00004484
    1858:	000033cd 	.word	0x000033cd
    185c:	00004708 	.word	0x00004708

00001860 <usart_unregister_callback>:
 *
 */
void usart_unregister_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
    1860:	b570      	push	{r4, r5, r6, lr}
    1862:	b082      	sub	sp, #8
    1864:	1c04      	adds	r4, r0, #0
    1866:	1c0d      	adds	r5, r1, #0
    1868:	4b13      	ldr	r3, [pc, #76]	; (18b8 <usart_unregister_callback+0x58>)
    186a:	6818      	ldr	r0, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
    186c:	2800      	cmp	r0, #0
    186e:	d00b      	beq.n	1888 <usart_unregister_callback+0x28>
    1870:	2c00      	cmp	r4, #0
    1872:	d112      	bne.n	189a <usart_unregister_callback+0x3a>
    1874:	4b11      	ldr	r3, [pc, #68]	; (18bc <usart_unregister_callback+0x5c>)
    1876:	9300      	str	r3, [sp, #0]
    1878:	4b11      	ldr	r3, [pc, #68]	; (18c0 <usart_unregister_callback+0x60>)
    187a:	9301      	str	r3, [sp, #4]
    187c:	2101      	movs	r1, #1
    187e:	4a11      	ldr	r2, [pc, #68]	; (18c4 <usart_unregister_callback+0x64>)
    1880:	23a8      	movs	r3, #168	; 0xa8
    1882:	4e11      	ldr	r6, [pc, #68]	; (18c8 <usart_unregister_callback+0x68>)
    1884:	47b0      	blx	r6
    1886:	e008      	b.n	189a <usart_unregister_callback+0x3a>
    1888:	2c00      	cmp	r4, #0
    188a:	d106      	bne.n	189a <usart_unregister_callback+0x3a>
    188c:	480f      	ldr	r0, [pc, #60]	; (18cc <usart_unregister_callback+0x6c>)
    188e:	490c      	ldr	r1, [pc, #48]	; (18c0 <usart_unregister_callback+0x60>)
    1890:	4a0c      	ldr	r2, [pc, #48]	; (18c4 <usart_unregister_callback+0x64>)
    1892:	23a8      	movs	r3, #168	; 0xa8
    1894:	4c0e      	ldr	r4, [pc, #56]	; (18d0 <usart_unregister_callback+0x70>)
    1896:	47a0      	blx	r4
    1898:	e7fe      	b.n	1898 <usart_unregister_callback+0x38>

	/* Unregister callback function */
	module->callback[callback_type] = NULL;
    189a:	1cab      	adds	r3, r5, #2
    189c:	009b      	lsls	r3, r3, #2
    189e:	18e3      	adds	r3, r4, r3
    18a0:	2200      	movs	r2, #0
    18a2:	605a      	str	r2, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module->callback_reg_mask &= ~(1 << callback_type);
    18a4:	2301      	movs	r3, #1
    18a6:	40ab      	lsls	r3, r5
    18a8:	1c1d      	adds	r5, r3, #0
    18aa:	2330      	movs	r3, #48	; 0x30
    18ac:	5ce2      	ldrb	r2, [r4, r3]
    18ae:	43aa      	bics	r2, r5
    18b0:	54e2      	strb	r2, [r4, r3]
}
    18b2:	b002      	add	sp, #8
    18b4:	bd70      	pop	{r4, r5, r6, pc}
    18b6:	46c0      	nop			; (mov r8, r8)
    18b8:	2000008c 	.word	0x2000008c
    18bc:	00004444 	.word	0x00004444
    18c0:	0000468c 	.word	0x0000468c
    18c4:	000046d0 	.word	0x000046d0
    18c8:	0000020d 	.word	0x0000020d
    18cc:	00004484 	.word	0x00004484
    18d0:	000033cd 	.word	0x000033cd

000018d4 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    18d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    18d6:	b083      	sub	sp, #12
    18d8:	1c04      	adds	r4, r0, #0
    18da:	1c0e      	adds	r6, r1, #0
    18dc:	1c15      	adds	r5, r2, #0
    18de:	4b25      	ldr	r3, [pc, #148]	; (1974 <usart_write_buffer_job+0xa0>)
    18e0:	6818      	ldr	r0, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
    18e2:	2800      	cmp	r0, #0
    18e4:	d010      	beq.n	1908 <usart_write_buffer_job+0x34>
    18e6:	2c00      	cmp	r4, #0
    18e8:	d118      	bne.n	191c <usart_write_buffer_job+0x48>
    18ea:	4b23      	ldr	r3, [pc, #140]	; (1978 <usart_write_buffer_job+0xa4>)
    18ec:	9300      	str	r3, [sp, #0]
    18ee:	4b23      	ldr	r3, [pc, #140]	; (197c <usart_write_buffer_job+0xa8>)
    18f0:	9301      	str	r3, [sp, #4]
    18f2:	2101      	movs	r1, #1
    18f4:	4a22      	ldr	r2, [pc, #136]	; (1980 <usart_write_buffer_job+0xac>)
    18f6:	238d      	movs	r3, #141	; 0x8d
    18f8:	005b      	lsls	r3, r3, #1
    18fa:	4f22      	ldr	r7, [pc, #136]	; (1984 <usart_write_buffer_job+0xb0>)
    18fc:	47b8      	blx	r7
    18fe:	4b1d      	ldr	r3, [pc, #116]	; (1974 <usart_write_buffer_job+0xa0>)
    1900:	6818      	ldr	r0, [r3, #0]
	Assert(tx_data);
    1902:	2800      	cmp	r0, #0
    1904:	d10a      	bne.n	191c <usart_write_buffer_job+0x48>
    1906:	e016      	b.n	1936 <usart_write_buffer_job+0x62>
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
	/* Sanity check arguments */
	Assert(module);
    1908:	2c00      	cmp	r4, #0
    190a:	d114      	bne.n	1936 <usart_write_buffer_job+0x62>
    190c:	481e      	ldr	r0, [pc, #120]	; (1988 <usart_write_buffer_job+0xb4>)
    190e:	491b      	ldr	r1, [pc, #108]	; (197c <usart_write_buffer_job+0xa8>)
    1910:	4a1b      	ldr	r2, [pc, #108]	; (1980 <usart_write_buffer_job+0xac>)
    1912:	238d      	movs	r3, #141	; 0x8d
    1914:	005b      	lsls	r3, r3, #1
    1916:	4c1d      	ldr	r4, [pc, #116]	; (198c <usart_write_buffer_job+0xb8>)
    1918:	47a0      	blx	r4
    191a:	e7fe      	b.n	191a <usart_write_buffer_job+0x46>
	Assert(tx_data);
    191c:	2e00      	cmp	r6, #0
    191e:	d114      	bne.n	194a <usart_write_buffer_job+0x76>
    1920:	4b15      	ldr	r3, [pc, #84]	; (1978 <usart_write_buffer_job+0xa4>)
    1922:	9300      	str	r3, [sp, #0]
    1924:	4b1a      	ldr	r3, [pc, #104]	; (1990 <usart_write_buffer_job+0xbc>)
    1926:	9301      	str	r3, [sp, #4]
    1928:	2101      	movs	r1, #1
    192a:	4a15      	ldr	r2, [pc, #84]	; (1980 <usart_write_buffer_job+0xac>)
    192c:	231c      	movs	r3, #28
    192e:	33ff      	adds	r3, #255	; 0xff
    1930:	4f14      	ldr	r7, [pc, #80]	; (1984 <usart_write_buffer_job+0xb0>)
    1932:	47b8      	blx	r7
    1934:	e009      	b.n	194a <usart_write_buffer_job+0x76>
    1936:	2e00      	cmp	r6, #0
    1938:	d107      	bne.n	194a <usart_write_buffer_job+0x76>
    193a:	4813      	ldr	r0, [pc, #76]	; (1988 <usart_write_buffer_job+0xb4>)
    193c:	4914      	ldr	r1, [pc, #80]	; (1990 <usart_write_buffer_job+0xbc>)
    193e:	4a10      	ldr	r2, [pc, #64]	; (1980 <usart_write_buffer_job+0xac>)
    1940:	231c      	movs	r3, #28
    1942:	33ff      	adds	r3, #255	; 0xff
    1944:	4c11      	ldr	r4, [pc, #68]	; (198c <usart_write_buffer_job+0xb8>)
    1946:	47a0      	blx	r4
    1948:	e7fe      	b.n	1948 <usart_write_buffer_job+0x74>

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    194a:	2017      	movs	r0, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    194c:	2d00      	cmp	r5, #0
    194e:	d00e      	beq.n	196e <usart_write_buffer_job+0x9a>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    1950:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    1952:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    1954:	2005      	movs	r0, #5
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    1956:	2b00      	cmp	r3, #0
    1958:	d109      	bne.n	196e <usart_write_buffer_job+0x9a>
		return STATUS_BUSY;
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
    195a:	79e3      	ldrb	r3, [r4, #7]
		return STATUS_ERR_DENIED;
    195c:	201c      	movs	r0, #28
	if (module->remaining_tx_buffer_length > 0) {
		return STATUS_BUSY;
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
    195e:	2b00      	cmp	r3, #0
    1960:	d005      	beq.n	196e <usart_write_buffer_job+0x9a>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	_usart_write_buffer(module, tx_data, length);
    1962:	1c20      	adds	r0, r4, #0
    1964:	1c31      	adds	r1, r6, #0
    1966:	1c2a      	adds	r2, r5, #0
    1968:	4b0a      	ldr	r3, [pc, #40]	; (1994 <usart_write_buffer_job+0xc0>)
    196a:	4798      	blx	r3

	return STATUS_OK;
    196c:	2000      	movs	r0, #0
}
    196e:	b003      	add	sp, #12
    1970:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1972:	46c0      	nop			; (mov r8, r8)
    1974:	2000008c 	.word	0x2000008c
    1978:	00004444 	.word	0x00004444
    197c:	0000468c 	.word	0x0000468c
    1980:	000046d0 	.word	0x000046d0
    1984:	0000020d 	.word	0x0000020d
    1988:	00004484 	.word	0x00004484
    198c:	000033cd 	.word	0x000033cd
    1990:	00004718 	.word	0x00004718
    1994:	00001655 	.word	0x00001655

00001998 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1998:	b5f0      	push	{r4, r5, r6, r7, lr}
    199a:	b083      	sub	sp, #12
    199c:	1c04      	adds	r4, r0, #0
    199e:	1c0e      	adds	r6, r1, #0
    19a0:	1c15      	adds	r5, r2, #0
    19a2:	4b25      	ldr	r3, [pc, #148]	; (1a38 <usart_read_buffer_job+0xa0>)
    19a4:	6818      	ldr	r0, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
    19a6:	2800      	cmp	r0, #0
    19a8:	d010      	beq.n	19cc <usart_read_buffer_job+0x34>
    19aa:	2c00      	cmp	r4, #0
    19ac:	d118      	bne.n	19e0 <usart_read_buffer_job+0x48>
    19ae:	4b23      	ldr	r3, [pc, #140]	; (1a3c <usart_read_buffer_job+0xa4>)
    19b0:	9300      	str	r3, [sp, #0]
    19b2:	4b23      	ldr	r3, [pc, #140]	; (1a40 <usart_read_buffer_job+0xa8>)
    19b4:	9301      	str	r3, [sp, #4]
    19b6:	2101      	movs	r1, #1
    19b8:	4a22      	ldr	r2, [pc, #136]	; (1a44 <usart_read_buffer_job+0xac>)
    19ba:	23a9      	movs	r3, #169	; 0xa9
    19bc:	005b      	lsls	r3, r3, #1
    19be:	4f22      	ldr	r7, [pc, #136]	; (1a48 <usart_read_buffer_job+0xb0>)
    19c0:	47b8      	blx	r7
    19c2:	4b1d      	ldr	r3, [pc, #116]	; (1a38 <usart_read_buffer_job+0xa0>)
    19c4:	6818      	ldr	r0, [r3, #0]
	Assert(rx_data);
    19c6:	2800      	cmp	r0, #0
    19c8:	d10a      	bne.n	19e0 <usart_read_buffer_job+0x48>
    19ca:	e016      	b.n	19fa <usart_read_buffer_job+0x62>
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	/* Sanity check arguments */
	Assert(module);
    19cc:	2c00      	cmp	r4, #0
    19ce:	d114      	bne.n	19fa <usart_read_buffer_job+0x62>
    19d0:	481e      	ldr	r0, [pc, #120]	; (1a4c <usart_read_buffer_job+0xb4>)
    19d2:	491b      	ldr	r1, [pc, #108]	; (1a40 <usart_read_buffer_job+0xa8>)
    19d4:	4a1b      	ldr	r2, [pc, #108]	; (1a44 <usart_read_buffer_job+0xac>)
    19d6:	23a9      	movs	r3, #169	; 0xa9
    19d8:	005b      	lsls	r3, r3, #1
    19da:	4c1d      	ldr	r4, [pc, #116]	; (1a50 <usart_read_buffer_job+0xb8>)
    19dc:	47a0      	blx	r4
    19de:	e7fe      	b.n	19de <usart_read_buffer_job+0x46>
	Assert(rx_data);
    19e0:	2e00      	cmp	r6, #0
    19e2:	d114      	bne.n	1a0e <usart_read_buffer_job+0x76>
    19e4:	4b15      	ldr	r3, [pc, #84]	; (1a3c <usart_read_buffer_job+0xa4>)
    19e6:	9300      	str	r3, [sp, #0]
    19e8:	4b1a      	ldr	r3, [pc, #104]	; (1a54 <usart_read_buffer_job+0xbc>)
    19ea:	9301      	str	r3, [sp, #4]
    19ec:	2101      	movs	r1, #1
    19ee:	4a15      	ldr	r2, [pc, #84]	; (1a44 <usart_read_buffer_job+0xac>)
    19f0:	2354      	movs	r3, #84	; 0x54
    19f2:	33ff      	adds	r3, #255	; 0xff
    19f4:	4f14      	ldr	r7, [pc, #80]	; (1a48 <usart_read_buffer_job+0xb0>)
    19f6:	47b8      	blx	r7
    19f8:	e009      	b.n	1a0e <usart_read_buffer_job+0x76>
    19fa:	2e00      	cmp	r6, #0
    19fc:	d107      	bne.n	1a0e <usart_read_buffer_job+0x76>
    19fe:	4813      	ldr	r0, [pc, #76]	; (1a4c <usart_read_buffer_job+0xb4>)
    1a00:	4914      	ldr	r1, [pc, #80]	; (1a54 <usart_read_buffer_job+0xbc>)
    1a02:	4a10      	ldr	r2, [pc, #64]	; (1a44 <usart_read_buffer_job+0xac>)
    1a04:	2354      	movs	r3, #84	; 0x54
    1a06:	33ff      	adds	r3, #255	; 0xff
    1a08:	4c11      	ldr	r4, [pc, #68]	; (1a50 <usart_read_buffer_job+0xb8>)
    1a0a:	47a0      	blx	r4
    1a0c:	e7fe      	b.n	1a0c <usart_read_buffer_job+0x74>

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    1a0e:	2017      	movs	r0, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    1a10:	2d00      	cmp	r5, #0
    1a12:	d00e      	beq.n	1a32 <usart_read_buffer_job+0x9a>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1a14:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    1a16:	201c      	movs	r0, #28
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d00a      	beq.n	1a32 <usart_read_buffer_job+0x9a>
		return STATUS_ERR_DENIED;
	}

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    1a1c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1a1e:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    1a20:	2005      	movs	r0, #5
	if (!(module->receiver_enabled)) {
		return STATUS_ERR_DENIED;
	}

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    1a22:	2b00      	cmp	r3, #0
    1a24:	d105      	bne.n	1a32 <usart_read_buffer_job+0x9a>
		return STATUS_BUSY;
	}

	/* Issue internal asynchronous read */
	_usart_read_buffer(module, rx_data, length);
    1a26:	1c20      	adds	r0, r4, #0
    1a28:	1c31      	adds	r1, r6, #0
    1a2a:	1c2a      	adds	r2, r5, #0
    1a2c:	4b0a      	ldr	r3, [pc, #40]	; (1a58 <usart_read_buffer_job+0xc0>)
    1a2e:	4798      	blx	r3

	return STATUS_OK;
    1a30:	2000      	movs	r0, #0
}
    1a32:	b003      	add	sp, #12
    1a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a36:	46c0      	nop			; (mov r8, r8)
    1a38:	2000008c 	.word	0x2000008c
    1a3c:	00004444 	.word	0x00004444
    1a40:	0000468c 	.word	0x0000468c
    1a44:	000046d0 	.word	0x000046d0
    1a48:	0000020d 	.word	0x0000020d
    1a4c:	00004484 	.word	0x00004484
    1a50:	000033cd 	.word	0x000033cd
    1a54:	00004720 	.word	0x00004720
    1a58:	000016fd 	.word	0x000016fd

00001a5c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a5e:	b083      	sub	sp, #12
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1a60:	0080      	lsls	r0, r0, #2
    1a62:	4b8c      	ldr	r3, [pc, #560]	; (1c94 <_usart_interrupt_handler+0x238>)
    1a64:	58c4      	ldr	r4, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1a66:	6825      	ldr	r5, [r4, #0]
    1a68:	4b8b      	ldr	r3, [pc, #556]	; (1c98 <_usart_interrupt_handler+0x23c>)
    1a6a:	6818      	ldr	r0, [r3, #0]
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);
    1a6c:	2800      	cmp	r0, #0
    1a6e:	d00b      	beq.n	1a88 <_usart_interrupt_handler+0x2c>
    1a70:	2c00      	cmp	r4, #0
    1a72:	d112      	bne.n	1a9a <_usart_interrupt_handler+0x3e>
    1a74:	4b89      	ldr	r3, [pc, #548]	; (1c9c <_usart_interrupt_handler+0x240>)
    1a76:	9300      	str	r3, [sp, #0]
    1a78:	4b89      	ldr	r3, [pc, #548]	; (1ca0 <_usart_interrupt_handler+0x244>)
    1a7a:	9301      	str	r3, [sp, #4]
    1a7c:	2101      	movs	r1, #1
    1a7e:	4a89      	ldr	r2, [pc, #548]	; (1ca4 <_usart_interrupt_handler+0x248>)
    1a80:	4b89      	ldr	r3, [pc, #548]	; (1ca8 <_usart_interrupt_handler+0x24c>)
    1a82:	4e8a      	ldr	r6, [pc, #552]	; (1cac <_usart_interrupt_handler+0x250>)
    1a84:	47b0      	blx	r6
    1a86:	e008      	b.n	1a9a <_usart_interrupt_handler+0x3e>
    1a88:	2c00      	cmp	r4, #0
    1a8a:	d106      	bne.n	1a9a <_usart_interrupt_handler+0x3e>
    1a8c:	4888      	ldr	r0, [pc, #544]	; (1cb0 <_usart_interrupt_handler+0x254>)
    1a8e:	4984      	ldr	r1, [pc, #528]	; (1ca0 <_usart_interrupt_handler+0x244>)
    1a90:	4a84      	ldr	r2, [pc, #528]	; (1ca4 <_usart_interrupt_handler+0x248>)
    1a92:	4b85      	ldr	r3, [pc, #532]	; (1ca8 <_usart_interrupt_handler+0x24c>)
    1a94:	4c87      	ldr	r4, [pc, #540]	; (1cb4 <_usart_interrupt_handler+0x258>)
    1a96:	47a0      	blx	r4
    1a98:	e7fe      	b.n	1a98 <_usart_interrupt_handler+0x3c>
    1a9a:	4e7f      	ldr	r6, [pc, #508]	; (1c98 <_usart_interrupt_handler+0x23c>)
    1a9c:	6830      	ldr	r0, [r6, #0]
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
	/* Sanity check arguments */
	Assert(module);
    1a9e:	2800      	cmp	r0, #0
    1aa0:	d00f      	beq.n	1ac2 <_usart_interrupt_handler+0x66>
    1aa2:	2c00      	cmp	r4, #0
    1aa4:	d116      	bne.n	1ad4 <_usart_interrupt_handler+0x78>
    1aa6:	4b7d      	ldr	r3, [pc, #500]	; (1c9c <_usart_interrupt_handler+0x240>)
    1aa8:	9300      	str	r3, [sp, #0]
    1aaa:	4b7d      	ldr	r3, [pc, #500]	; (1ca0 <_usart_interrupt_handler+0x244>)
    1aac:	9301      	str	r3, [sp, #4]
    1aae:	2101      	movs	r1, #1
    1ab0:	4a7c      	ldr	r2, [pc, #496]	; (1ca4 <_usart_interrupt_handler+0x248>)
    1ab2:	4b81      	ldr	r3, [pc, #516]	; (1cb8 <_usart_interrupt_handler+0x25c>)
    1ab4:	4f7d      	ldr	r7, [pc, #500]	; (1cac <_usart_interrupt_handler+0x250>)
    1ab6:	47b8      	blx	r7
    1ab8:	4b77      	ldr	r3, [pc, #476]	; (1c98 <_usart_interrupt_handler+0x23c>)
    1aba:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    1abc:	2800      	cmp	r0, #0
    1abe:	d109      	bne.n	1ad4 <_usart_interrupt_handler+0x78>
    1ac0:	e015      	b.n	1aee <_usart_interrupt_handler+0x92>
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
	/* Sanity check arguments */
	Assert(module);
    1ac2:	2c00      	cmp	r4, #0
    1ac4:	d113      	bne.n	1aee <_usart_interrupt_handler+0x92>
    1ac6:	487a      	ldr	r0, [pc, #488]	; (1cb0 <_usart_interrupt_handler+0x254>)
    1ac8:	4975      	ldr	r1, [pc, #468]	; (1ca0 <_usart_interrupt_handler+0x244>)
    1aca:	4a76      	ldr	r2, [pc, #472]	; (1ca4 <_usart_interrupt_handler+0x248>)
    1acc:	4b7a      	ldr	r3, [pc, #488]	; (1cb8 <_usart_interrupt_handler+0x25c>)
    1ace:	4c79      	ldr	r4, [pc, #484]	; (1cb4 <_usart_interrupt_handler+0x258>)
    1ad0:	47a0      	blx	r4
    1ad2:	e7fe      	b.n	1ad2 <_usart_interrupt_handler+0x76>
	Assert(module->hw);
    1ad4:	6821      	ldr	r1, [r4, #0]
    1ad6:	2900      	cmp	r1, #0
    1ad8:	d113      	bne.n	1b02 <_usart_interrupt_handler+0xa6>
    1ada:	4a70      	ldr	r2, [pc, #448]	; (1c9c <_usart_interrupt_handler+0x240>)
    1adc:	9200      	str	r2, [sp, #0]
    1ade:	4b77      	ldr	r3, [pc, #476]	; (1cbc <_usart_interrupt_handler+0x260>)
    1ae0:	9301      	str	r3, [sp, #4]
    1ae2:	2101      	movs	r1, #1
    1ae4:	4a6f      	ldr	r2, [pc, #444]	; (1ca4 <_usart_interrupt_handler+0x248>)
    1ae6:	4b76      	ldr	r3, [pc, #472]	; (1cc0 <_usart_interrupt_handler+0x264>)
    1ae8:	4f70      	ldr	r7, [pc, #448]	; (1cac <_usart_interrupt_handler+0x250>)
    1aea:	47b8      	blx	r7
    1aec:	e009      	b.n	1b02 <_usart_interrupt_handler+0xa6>
    1aee:	6823      	ldr	r3, [r4, #0]
    1af0:	2b00      	cmp	r3, #0
    1af2:	d106      	bne.n	1b02 <_usart_interrupt_handler+0xa6>
    1af4:	486e      	ldr	r0, [pc, #440]	; (1cb0 <_usart_interrupt_handler+0x254>)
    1af6:	4971      	ldr	r1, [pc, #452]	; (1cbc <_usart_interrupt_handler+0x260>)
    1af8:	4a6a      	ldr	r2, [pc, #424]	; (1ca4 <_usart_interrupt_handler+0x248>)
    1afa:	4b71      	ldr	r3, [pc, #452]	; (1cc0 <_usart_interrupt_handler+0x264>)
    1afc:	4c6d      	ldr	r4, [pc, #436]	; (1cb4 <_usart_interrupt_handler+0x258>)
    1afe:	47a0      	blx	r4
    1b00:	e7fe      	b.n	1b00 <_usart_interrupt_handler+0xa4>

	SercomUsart *const usart_hw = &(module->hw->USART);
    1b02:	6823      	ldr	r3, [r4, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1b04:	69db      	ldr	r3, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1b06:	2b00      	cmp	r3, #0
    1b08:	d1c8      	bne.n	1a9c <_usart_interrupt_handler+0x40>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1b0a:	7e2b      	ldrb	r3, [r5, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1b0c:	7daf      	ldrb	r7, [r5, #22]
    1b0e:	401f      	ands	r7, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
    1b10:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    1b12:	5ce3      	ldrb	r3, [r4, r3]
    1b14:	2230      	movs	r2, #48	; 0x30
    1b16:	5ca6      	ldrb	r6, [r4, r2]
    1b18:	401e      	ands	r6, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1b1a:	07f9      	lsls	r1, r7, #31
    1b1c:	d521      	bpl.n	1b62 <_usart_interrupt_handler+0x106>
		if (module->remaining_tx_buffer_length) {
    1b1e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    1b20:	b29b      	uxth	r3, r3
    1b22:	2b00      	cmp	r3, #0
    1b24:	d01b      	beq.n	1b5e <_usart_interrupt_handler+0x102>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1b26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1b28:	7819      	ldrb	r1, [r3, #0]
    1b2a:	b2c9      	uxtb	r1, r1
    1b2c:	1c0a      	adds	r2, r1, #0
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1b2e:	1c58      	adds	r0, r3, #1
    1b30:	62a0      	str	r0, [r4, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1b32:	7960      	ldrb	r0, [r4, #5]
    1b34:	2801      	cmp	r0, #1
    1b36:	d104      	bne.n	1b42 <_usart_interrupt_handler+0xe6>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1b38:	785a      	ldrb	r2, [r3, #1]
    1b3a:	0212      	lsls	r2, r2, #8
    1b3c:	430a      	orrs	r2, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    1b3e:	3302      	adds	r3, #2
    1b40:	62a3      	str	r3, [r4, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1b42:	05d2      	lsls	r2, r2, #23
    1b44:	0dd2      	lsrs	r2, r2, #23
    1b46:	852a      	strh	r2, [r5, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1b48:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    1b4a:	3b01      	subs	r3, #1
    1b4c:	b29b      	uxth	r3, r3
    1b4e:	85e3      	strh	r3, [r4, #46]	; 0x2e
    1b50:	2b00      	cmp	r3, #0
    1b52:	d106      	bne.n	1b62 <_usart_interrupt_handler+0x106>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1b54:	2301      	movs	r3, #1
    1b56:	752b      	strb	r3, [r5, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1b58:	2302      	movs	r3, #2
    1b5a:	75ab      	strb	r3, [r5, #22]
    1b5c:	e001      	b.n	1b62 <_usart_interrupt_handler+0x106>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1b5e:	2301      	movs	r3, #1
    1b60:	752b      	strb	r3, [r5, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1b62:	07ba      	lsls	r2, r7, #30
    1b64:	d509      	bpl.n	1b7a <_usart_interrupt_handler+0x11e>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1b66:	2302      	movs	r3, #2
    1b68:	752b      	strb	r3, [r5, #20]
		module->tx_status = STATUS_OK;
    1b6a:	2200      	movs	r2, #0
    1b6c:	2333      	movs	r3, #51	; 0x33
    1b6e:	54e2      	strb	r2, [r4, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1b70:	07f3      	lsls	r3, r6, #31
    1b72:	d502      	bpl.n	1b7a <_usart_interrupt_handler+0x11e>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1b74:	1c20      	adds	r0, r4, #0
    1b76:	68e1      	ldr	r1, [r4, #12]
    1b78:	4788      	blx	r1

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1b7a:	077a      	lsls	r2, r7, #29
    1b7c:	d569      	bpl.n	1c52 <_usart_interrupt_handler+0x1f6>

		if (module->remaining_rx_buffer_length) {
    1b7e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1b80:	b29b      	uxth	r3, r3
    1b82:	2b00      	cmp	r3, #0
    1b84:	d063      	beq.n	1c4e <_usart_interrupt_handler+0x1f2>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1b86:	8b6a      	ldrh	r2, [r5, #26]
    1b88:	b2d2      	uxtb	r2, r2
    1b8a:	233f      	movs	r3, #63	; 0x3f
    1b8c:	4013      	ands	r3, r2
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1b8e:	0711      	lsls	r1, r2, #28
    1b90:	d501      	bpl.n	1b96 <_usart_interrupt_handler+0x13a>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1b92:	2337      	movs	r3, #55	; 0x37
    1b94:	4013      	ands	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1b96:	2b00      	cmp	r3, #0
    1b98:	d037      	beq.n	1c0a <_usart_interrupt_handler+0x1ae>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1b9a:	079a      	lsls	r2, r3, #30
    1b9c:	d507      	bpl.n	1bae <_usart_interrupt_handler+0x152>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1b9e:	221a      	movs	r2, #26
    1ba0:	2332      	movs	r3, #50	; 0x32
    1ba2:	54e2      	strb	r2, [r4, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    1ba4:	8b6a      	ldrh	r2, [r5, #26]
    1ba6:	2302      	movs	r3, #2
    1ba8:	4313      	orrs	r3, r2
    1baa:	836b      	strh	r3, [r5, #26]
    1bac:	e027      	b.n	1bfe <_usart_interrupt_handler+0x1a2>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1bae:	0759      	lsls	r1, r3, #29
    1bb0:	d507      	bpl.n	1bc2 <_usart_interrupt_handler+0x166>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    1bb2:	221e      	movs	r2, #30
    1bb4:	2332      	movs	r3, #50	; 0x32
    1bb6:	54e2      	strb	r2, [r4, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    1bb8:	8b6a      	ldrh	r2, [r5, #26]
    1bba:	2304      	movs	r3, #4
    1bbc:	4313      	orrs	r3, r2
    1bbe:	836b      	strh	r3, [r5, #26]
    1bc0:	e01d      	b.n	1bfe <_usart_interrupt_handler+0x1a2>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1bc2:	07da      	lsls	r2, r3, #31
    1bc4:	d507      	bpl.n	1bd6 <_usart_interrupt_handler+0x17a>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    1bc6:	2213      	movs	r2, #19
    1bc8:	2332      	movs	r3, #50	; 0x32
    1bca:	54e2      	strb	r2, [r4, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    1bcc:	8b6a      	ldrh	r2, [r5, #26]
    1bce:	2301      	movs	r3, #1
    1bd0:	4313      	orrs	r3, r2
    1bd2:	836b      	strh	r3, [r5, #26]
    1bd4:	e013      	b.n	1bfe <_usart_interrupt_handler+0x1a2>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1bd6:	06d9      	lsls	r1, r3, #27
    1bd8:	d507      	bpl.n	1bea <_usart_interrupt_handler+0x18e>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    1bda:	2242      	movs	r2, #66	; 0x42
    1bdc:	2332      	movs	r3, #50	; 0x32
    1bde:	54e2      	strb	r2, [r4, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    1be0:	8b6a      	ldrh	r2, [r5, #26]
    1be2:	2310      	movs	r3, #16
    1be4:	4313      	orrs	r3, r2
    1be6:	836b      	strh	r3, [r5, #26]
    1be8:	e009      	b.n	1bfe <_usart_interrupt_handler+0x1a2>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1bea:	2220      	movs	r2, #32
    1bec:	421a      	tst	r2, r3
    1bee:	d006      	beq.n	1bfe <_usart_interrupt_handler+0x1a2>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1bf0:	2241      	movs	r2, #65	; 0x41
    1bf2:	2332      	movs	r3, #50	; 0x32
    1bf4:	54e2      	strb	r2, [r4, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    1bf6:	8b6a      	ldrh	r2, [r5, #26]
    1bf8:	2320      	movs	r3, #32
    1bfa:	4313      	orrs	r3, r2
    1bfc:	836b      	strh	r3, [r5, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1bfe:	0772      	lsls	r2, r6, #29
    1c00:	d527      	bpl.n	1c52 <_usart_interrupt_handler+0x1f6>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1c02:	1c20      	adds	r0, r4, #0
    1c04:	6963      	ldr	r3, [r4, #20]
    1c06:	4798      	blx	r3
    1c08:	e023      	b.n	1c52 <_usart_interrupt_handler+0x1f6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1c0a:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    1c0c:	05d2      	lsls	r2, r2, #23
    1c0e:	0dd2      	lsrs	r2, r2, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1c10:	b2d3      	uxtb	r3, r2
    1c12:	6a61      	ldr	r1, [r4, #36]	; 0x24
    1c14:	700b      	strb	r3, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1c16:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1c18:	1c59      	adds	r1, r3, #1
    1c1a:	6261      	str	r1, [r4, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1c1c:	7961      	ldrb	r1, [r4, #5]
    1c1e:	2901      	cmp	r1, #1
    1c20:	d104      	bne.n	1c2c <_usart_interrupt_handler+0x1d0>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1c22:	0a12      	lsrs	r2, r2, #8
    1c24:	705a      	strb	r2, [r3, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    1c26:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1c28:	3301      	adds	r3, #1
    1c2a:	6263      	str	r3, [r4, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1c2c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1c2e:	3b01      	subs	r3, #1
    1c30:	b29b      	uxth	r3, r3
    1c32:	85a3      	strh	r3, [r4, #44]	; 0x2c
    1c34:	2b00      	cmp	r3, #0
    1c36:	d10c      	bne.n	1c52 <_usart_interrupt_handler+0x1f6>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1c38:	2304      	movs	r3, #4
    1c3a:	752b      	strb	r3, [r5, #20]
					module->rx_status = STATUS_OK;
    1c3c:	2200      	movs	r2, #0
    1c3e:	2332      	movs	r3, #50	; 0x32
    1c40:	54e2      	strb	r2, [r4, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1c42:	07b2      	lsls	r2, r6, #30
    1c44:	d505      	bpl.n	1c52 <_usart_interrupt_handler+0x1f6>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1c46:	1c20      	adds	r0, r4, #0
    1c48:	6923      	ldr	r3, [r4, #16]
    1c4a:	4798      	blx	r3
    1c4c:	e001      	b.n	1c52 <_usart_interrupt_handler+0x1f6>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1c4e:	2304      	movs	r3, #4
    1c50:	752b      	strb	r3, [r5, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1c52:	06f9      	lsls	r1, r7, #27
    1c54:	d507      	bpl.n	1c66 <_usart_interrupt_handler+0x20a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1c56:	2310      	movs	r3, #16
    1c58:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1c5a:	762b      	strb	r3, [r5, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    1c5c:	06f2      	lsls	r2, r6, #27
    1c5e:	d502      	bpl.n	1c66 <_usart_interrupt_handler+0x20a>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1c60:	1c20      	adds	r0, r4, #0
    1c62:	69e3      	ldr	r3, [r4, #28]
    1c64:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1c66:	06b9      	lsls	r1, r7, #26
    1c68:	d507      	bpl.n	1c7a <_usart_interrupt_handler+0x21e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1c6a:	2320      	movs	r3, #32
    1c6c:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1c6e:	762b      	strb	r3, [r5, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1c70:	0732      	lsls	r2, r6, #28
    1c72:	d502      	bpl.n	1c7a <_usart_interrupt_handler+0x21e>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1c74:	1c20      	adds	r0, r4, #0
    1c76:	69a3      	ldr	r3, [r4, #24]
    1c78:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1c7a:	0739      	lsls	r1, r7, #28
    1c7c:	d507      	bpl.n	1c8e <_usart_interrupt_handler+0x232>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1c7e:	2308      	movs	r3, #8
    1c80:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1c82:	762b      	strb	r3, [r5, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1c84:	06b2      	lsls	r2, r6, #26
    1c86:	d502      	bpl.n	1c8e <_usart_interrupt_handler+0x232>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1c88:	6a23      	ldr	r3, [r4, #32]
    1c8a:	1c20      	adds	r0, r4, #0
    1c8c:	4798      	blx	r3
		}
	}
#endif
}
    1c8e:	b003      	add	sp, #12
    1c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c92:	46c0      	nop			; (mov r8, r8)
    1c94:	20000130 	.word	0x20000130
    1c98:	2000008c 	.word	0x2000008c
    1c9c:	00004444 	.word	0x00004444
    1ca0:	0000468c 	.word	0x0000468c
    1ca4:	000046a0 	.word	0x000046a0
    1ca8:	000002fe 	.word	0x000002fe
    1cac:	0000020d 	.word	0x0000020d
    1cb0:	00004484 	.word	0x00004484
    1cb4:	000033cd 	.word	0x000033cd
    1cb8:	000002e9 	.word	0x000002e9
    1cbc:	00004694 	.word	0x00004694
    1cc0:	000002ea 	.word	0x000002ea

00001cc4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1cc4:	b508      	push	{r3, lr}
	switch (clock_source) {
    1cc6:	2808      	cmp	r0, #8
    1cc8:	d834      	bhi.n	1d34 <system_clock_source_get_hz+0x70>
    1cca:	0080      	lsls	r0, r0, #2
    1ccc:	4b1b      	ldr	r3, [pc, #108]	; (1d3c <system_clock_source_get_hz+0x78>)
    1cce:	581b      	ldr	r3, [r3, r0]
    1cd0:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    1cd2:	2080      	movs	r0, #128	; 0x80
    1cd4:	0200      	lsls	r0, r0, #8
    1cd6:	e030      	b.n	1d3a <system_clock_source_get_hz+0x76>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    1cd8:	4b19      	ldr	r3, [pc, #100]	; (1d40 <system_clock_source_get_hz+0x7c>)
    1cda:	6918      	ldr	r0, [r3, #16]
    1cdc:	e02d      	b.n	1d3a <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1cde:	4b19      	ldr	r3, [pc, #100]	; (1d44 <system_clock_source_get_hz+0x80>)
    1ce0:	6a18      	ldr	r0, [r3, #32]
    1ce2:	0580      	lsls	r0, r0, #22
    1ce4:	0f80      	lsrs	r0, r0, #30
    1ce6:	4b18      	ldr	r3, [pc, #96]	; (1d48 <system_clock_source_get_hz+0x84>)
    1ce8:	40c3      	lsrs	r3, r0
    1cea:	1c18      	adds	r0, r3, #0
    1cec:	e025      	b.n	1d3a <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    1cee:	4b14      	ldr	r3, [pc, #80]	; (1d40 <system_clock_source_get_hz+0x7c>)
    1cf0:	6958      	ldr	r0, [r3, #20]
    1cf2:	e022      	b.n	1d3a <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1cf4:	4b12      	ldr	r3, [pc, #72]	; (1d40 <system_clock_source_get_hz+0x7c>)
    1cf6:	681b      	ldr	r3, [r3, #0]
    1cf8:	2002      	movs	r0, #2
    1cfa:	4018      	ands	r0, r3
    1cfc:	d01d      	beq.n	1d3a <system_clock_source_get_hz+0x76>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1cfe:	4911      	ldr	r1, [pc, #68]	; (1d44 <system_clock_source_get_hz+0x80>)
    1d00:	2210      	movs	r2, #16
    1d02:	68cb      	ldr	r3, [r1, #12]
    1d04:	421a      	tst	r2, r3
    1d06:	d0fc      	beq.n	1d02 <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1d08:	4b0d      	ldr	r3, [pc, #52]	; (1d40 <system_clock_source_get_hz+0x7c>)
    1d0a:	681b      	ldr	r3, [r3, #0]
    1d0c:	075a      	lsls	r2, r3, #29
    1d0e:	d513      	bpl.n	1d38 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1d10:	2000      	movs	r0, #0
    1d12:	4b0e      	ldr	r3, [pc, #56]	; (1d4c <system_clock_source_get_hz+0x88>)
    1d14:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1d16:	4b0a      	ldr	r3, [pc, #40]	; (1d40 <system_clock_source_get_hz+0x7c>)
    1d18:	689b      	ldr	r3, [r3, #8]
    1d1a:	041b      	lsls	r3, r3, #16
    1d1c:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1d1e:	4358      	muls	r0, r3
    1d20:	e00b      	b.n	1d3a <system_clock_source_get_hz+0x76>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1d22:	2350      	movs	r3, #80	; 0x50
    1d24:	4a07      	ldr	r2, [pc, #28]	; (1d44 <system_clock_source_get_hz+0x80>)
    1d26:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1d28:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1d2a:	075a      	lsls	r2, r3, #29
    1d2c:	d505      	bpl.n	1d3a <system_clock_source_get_hz+0x76>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    1d2e:	4b04      	ldr	r3, [pc, #16]	; (1d40 <system_clock_source_get_hz+0x7c>)
    1d30:	68d8      	ldr	r0, [r3, #12]
    1d32:	e002      	b.n	1d3a <system_clock_source_get_hz+0x76>
#endif

	default:
		return 0;
    1d34:	2000      	movs	r0, #0
    1d36:	e000      	b.n	1d3a <system_clock_source_get_hz+0x76>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    1d38:	4805      	ldr	r0, [pc, #20]	; (1d50 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    1d3a:	bd08      	pop	{r3, pc}
    1d3c:	00004728 	.word	0x00004728
    1d40:	2000010c 	.word	0x2000010c
    1d44:	40000800 	.word	0x40000800
    1d48:	007a1200 	.word	0x007a1200
    1d4c:	00002279 	.word	0x00002279
    1d50:	02dc6c00 	.word	0x02dc6c00

00001d54 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1d54:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1d56:	4b0c      	ldr	r3, [pc, #48]	; (1d88 <system_clock_source_osc8m_set_config+0x34>)
    1d58:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1d5a:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1d5c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1d5e:	7840      	ldrb	r0, [r0, #1]
    1d60:	2201      	movs	r2, #1
    1d62:	4010      	ands	r0, r2
    1d64:	0180      	lsls	r0, r0, #6
    1d66:	2640      	movs	r6, #64	; 0x40
    1d68:	43b4      	bics	r4, r6
    1d6a:	4304      	orrs	r4, r0
    1d6c:	402a      	ands	r2, r5
    1d6e:	01d0      	lsls	r0, r2, #7
    1d70:	2280      	movs	r2, #128	; 0x80
    1d72:	4394      	bics	r4, r2
    1d74:	1c22      	adds	r2, r4, #0
    1d76:	4302      	orrs	r2, r0
    1d78:	2003      	movs	r0, #3
    1d7a:	4001      	ands	r1, r0
    1d7c:	0209      	lsls	r1, r1, #8
    1d7e:	4803      	ldr	r0, [pc, #12]	; (1d8c <system_clock_source_osc8m_set_config+0x38>)
    1d80:	4002      	ands	r2, r0
    1d82:	430a      	orrs	r2, r1
    1d84:	621a      	str	r2, [r3, #32]
}
    1d86:	bd70      	pop	{r4, r5, r6, pc}
    1d88:	40000800 	.word	0x40000800
    1d8c:	fffffcff 	.word	0xfffffcff

00001d90 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    1d90:	b510      	push	{r4, lr}
    1d92:	b082      	sub	sp, #8
	switch (clock_source) {
    1d94:	2808      	cmp	r0, #8
    1d96:	d841      	bhi.n	1e1c <system_clock_source_enable+0x8c>
    1d98:	0080      	lsls	r0, r0, #2
    1d9a:	4b2e      	ldr	r3, [pc, #184]	; (1e54 <system_clock_source_enable+0xc4>)
    1d9c:	581b      	ldr	r3, [r3, r0]
    1d9e:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1da0:	4b2d      	ldr	r3, [pc, #180]	; (1e58 <system_clock_source_enable+0xc8>)
    1da2:	6a19      	ldr	r1, [r3, #32]
    1da4:	2202      	movs	r2, #2
    1da6:	430a      	orrs	r2, r1
    1da8:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    1daa:	2000      	movs	r0, #0
    1dac:	e04f      	b.n	1e4e <system_clock_source_enable+0xbe>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1dae:	4b2a      	ldr	r3, [pc, #168]	; (1e58 <system_clock_source_enable+0xc8>)
    1db0:	6999      	ldr	r1, [r3, #24]
    1db2:	2202      	movs	r2, #2
    1db4:	430a      	orrs	r2, r1
    1db6:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1db8:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    1dba:	e048      	b.n	1e4e <system_clock_source_enable+0xbe>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1dbc:	4b26      	ldr	r3, [pc, #152]	; (1e58 <system_clock_source_enable+0xc8>)
    1dbe:	8a19      	ldrh	r1, [r3, #16]
    1dc0:	2202      	movs	r2, #2
    1dc2:	430a      	orrs	r2, r1
    1dc4:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1dc6:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    1dc8:	e041      	b.n	1e4e <system_clock_source_enable+0xbe>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1dca:	4b23      	ldr	r3, [pc, #140]	; (1e58 <system_clock_source_enable+0xc8>)
    1dcc:	8a99      	ldrh	r1, [r3, #20]
    1dce:	2202      	movs	r2, #2
    1dd0:	430a      	orrs	r2, r1
    1dd2:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1dd4:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    1dd6:	e03a      	b.n	1e4e <system_clock_source_enable+0xbe>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1dd8:	4b20      	ldr	r3, [pc, #128]	; (1e5c <system_clock_source_enable+0xcc>)
    1dda:	6819      	ldr	r1, [r3, #0]
    1ddc:	2202      	movs	r2, #2
    1dde:	430a      	orrs	r2, r1
    1de0:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    1de2:	681a      	ldr	r2, [r3, #0]
    1de4:	4b1e      	ldr	r3, [pc, #120]	; (1e60 <system_clock_source_enable+0xd0>)
    1de6:	401a      	ands	r2, r3
    1de8:	4b1b      	ldr	r3, [pc, #108]	; (1e58 <system_clock_source_enable+0xc8>)
    1dea:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1dec:	1c19      	adds	r1, r3, #0
    1dee:	2210      	movs	r2, #16
    1df0:	68cb      	ldr	r3, [r1, #12]
    1df2:	421a      	tst	r2, r3
    1df4:	d0fc      	beq.n	1df0 <system_clock_source_enable+0x60>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1df6:	4a19      	ldr	r2, [pc, #100]	; (1e5c <system_clock_source_enable+0xcc>)
    1df8:	6891      	ldr	r1, [r2, #8]
    1dfa:	4b17      	ldr	r3, [pc, #92]	; (1e58 <system_clock_source_enable+0xc8>)
    1dfc:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1dfe:	6851      	ldr	r1, [r2, #4]
    1e00:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1e02:	6812      	ldr	r2, [r2, #0]
    1e04:	b292      	uxth	r2, r2
    1e06:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1e08:	2000      	movs	r0, #0
    1e0a:	e020      	b.n	1e4e <system_clock_source_enable+0xbe>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1e0c:	4a12      	ldr	r2, [pc, #72]	; (1e58 <system_clock_source_enable+0xc8>)
    1e0e:	2344      	movs	r3, #68	; 0x44
    1e10:	5cd0      	ldrb	r0, [r2, r3]
    1e12:	2102      	movs	r1, #2
    1e14:	4301      	orrs	r1, r0
    1e16:	54d1      	strb	r1, [r2, r3]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1e18:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    1e1a:	e018      	b.n	1e4e <system_clock_source_enable+0xbe>
    1e1c:	4b11      	ldr	r3, [pc, #68]	; (1e64 <system_clock_source_enable+0xd4>)
    1e1e:	6818      	ldr	r0, [r3, #0]
	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
    1e20:	2800      	cmp	r0, #0
    1e22:	d00b      	beq.n	1e3c <system_clock_source_enable+0xac>
    1e24:	4b10      	ldr	r3, [pc, #64]	; (1e68 <system_clock_source_enable+0xd8>)
    1e26:	9300      	str	r3, [sp, #0]
    1e28:	4b10      	ldr	r3, [pc, #64]	; (1e6c <system_clock_source_enable+0xdc>)
    1e2a:	9301      	str	r3, [sp, #4]
    1e2c:	2101      	movs	r1, #1
    1e2e:	4a10      	ldr	r2, [pc, #64]	; (1e70 <system_clock_source_enable+0xe0>)
    1e30:	238e      	movs	r3, #142	; 0x8e
    1e32:	009b      	lsls	r3, r3, #2
    1e34:	4c0f      	ldr	r4, [pc, #60]	; (1e74 <system_clock_source_enable+0xe4>)
    1e36:	47a0      	blx	r4
		return STATUS_ERR_INVALID_ARG;
    1e38:	2017      	movs	r0, #23
    1e3a:	e008      	b.n	1e4e <system_clock_source_enable+0xbe>
	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
    1e3c:	480e      	ldr	r0, [pc, #56]	; (1e78 <system_clock_source_enable+0xe8>)
    1e3e:	490b      	ldr	r1, [pc, #44]	; (1e6c <system_clock_source_enable+0xdc>)
    1e40:	4a0b      	ldr	r2, [pc, #44]	; (1e70 <system_clock_source_enable+0xe0>)
    1e42:	238e      	movs	r3, #142	; 0x8e
    1e44:	009b      	lsls	r3, r3, #2
    1e46:	4c0d      	ldr	r4, [pc, #52]	; (1e7c <system_clock_source_enable+0xec>)
    1e48:	47a0      	blx	r4
    1e4a:	e7fe      	b.n	1e4a <system_clock_source_enable+0xba>
		break;
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    1e4c:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    1e4e:	b002      	add	sp, #8
    1e50:	bd10      	pop	{r4, pc}
    1e52:	46c0      	nop			; (mov r8, r8)
    1e54:	0000474c 	.word	0x0000474c
    1e58:	40000800 	.word	0x40000800
    1e5c:	2000010c 	.word	0x2000010c
    1e60:	0000ff7f 	.word	0x0000ff7f
    1e64:	2000008c 	.word	0x2000008c
    1e68:	00004444 	.word	0x00004444
    1e6c:	00004618 	.word	0x00004618
    1e70:	00004770 	.word	0x00004770
    1e74:	0000020d 	.word	0x0000020d
    1e78:	00004484 	.word	0x00004484
    1e7c:	000033cd 	.word	0x000033cd

00001e80 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1e80:	b530      	push	{r4, r5, lr}
    1e82:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1e84:	22c2      	movs	r2, #194	; 0xc2
    1e86:	00d2      	lsls	r2, r2, #3
    1e88:	4b19      	ldr	r3, [pc, #100]	; (1ef0 <system_clock_init+0x70>)
    1e8a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1e8c:	4b19      	ldr	r3, [pc, #100]	; (1ef4 <system_clock_init+0x74>)
    1e8e:	685a      	ldr	r2, [r3, #4]
    1e90:	211e      	movs	r1, #30
    1e92:	438a      	bics	r2, r1
    1e94:	605a      	str	r2, [r3, #4]
{
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1e96:	2301      	movs	r3, #1
    1e98:	466a      	mov	r2, sp
    1e9a:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1e9c:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1e9e:	4d16      	ldr	r5, [pc, #88]	; (1ef8 <system_clock_init+0x78>)
    1ea0:	b2e0      	uxtb	r0, r4
    1ea2:	4669      	mov	r1, sp
    1ea4:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1ea6:	3401      	adds	r4, #1
    1ea8:	2c25      	cmp	r4, #37	; 0x25
    1eaa:	d1f9      	bne.n	1ea0 <system_clock_init+0x20>
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    1eac:	a803      	add	r0, sp, #12
    1eae:	2400      	movs	r4, #0
    1eb0:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    1eb2:	2501      	movs	r5, #1
    1eb4:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1eb6:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1eb8:	4b10      	ldr	r3, [pc, #64]	; (1efc <system_clock_init+0x7c>)
    1eba:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1ebc:	2006      	movs	r0, #6
    1ebe:	4b10      	ldr	r3, [pc, #64]	; (1f00 <system_clock_init+0x80>)
    1ec0:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1ec2:	4b10      	ldr	r3, [pc, #64]	; (1f04 <system_clock_init+0x84>)
    1ec4:	4798      	blx	r3
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    1ec6:	4b10      	ldr	r3, [pc, #64]	; (1f08 <system_clock_init+0x88>)
    1ec8:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    1eca:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    1ecc:	729c      	strb	r4, [r3, #10]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1ece:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1ed0:	466b      	mov	r3, sp
    1ed2:	705c      	strb	r4, [r3, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1ed4:	2306      	movs	r3, #6
    1ed6:	466a      	mov	r2, sp
    1ed8:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    1eda:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    1edc:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1ede:	2000      	movs	r0, #0
    1ee0:	4669      	mov	r1, sp
    1ee2:	4b0a      	ldr	r3, [pc, #40]	; (1f0c <system_clock_init+0x8c>)
    1ee4:	4798      	blx	r3
    1ee6:	2000      	movs	r0, #0
    1ee8:	4b09      	ldr	r3, [pc, #36]	; (1f10 <system_clock_init+0x90>)
    1eea:	4798      	blx	r3
#endif
}
    1eec:	b005      	add	sp, #20
    1eee:	bd30      	pop	{r4, r5, pc}
    1ef0:	40000800 	.word	0x40000800
    1ef4:	41004000 	.word	0x41004000
    1ef8:	00002201 	.word	0x00002201
    1efc:	00001d55 	.word	0x00001d55
    1f00:	00001d91 	.word	0x00001d91
    1f04:	00001f15 	.word	0x00001f15
    1f08:	40000400 	.word	0x40000400
    1f0c:	00001f39 	.word	0x00001f39
    1f10:	00002045 	.word	0x00002045

00001f14 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1f14:	4b06      	ldr	r3, [pc, #24]	; (1f30 <system_gclk_init+0x1c>)
    1f16:	6999      	ldr	r1, [r3, #24]
    1f18:	2208      	movs	r2, #8
    1f1a:	430a      	orrs	r2, r1
    1f1c:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1f1e:	2201      	movs	r2, #1
    1f20:	4b04      	ldr	r3, [pc, #16]	; (1f34 <system_gclk_init+0x20>)
    1f22:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1f24:	1c19      	adds	r1, r3, #0
    1f26:	780b      	ldrb	r3, [r1, #0]
    1f28:	4213      	tst	r3, r2
    1f2a:	d1fc      	bne.n	1f26 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1f2c:	4770      	bx	lr
    1f2e:	46c0      	nop			; (mov r8, r8)
    1f30:	40000400 	.word	0x40000400
    1f34:	40000c00 	.word	0x40000c00

00001f38 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1f38:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f3a:	b083      	sub	sp, #12
    1f3c:	1c06      	adds	r6, r0, #0
    1f3e:	1c0d      	adds	r5, r1, #0
    1f40:	4b35      	ldr	r3, [pc, #212]	; (2018 <STACK_SIZE+0x18>)
    1f42:	6818      	ldr	r0, [r3, #0]
	/* Sanity check arguments */
	Assert(config);
    1f44:	2800      	cmp	r0, #0
    1f46:	d00b      	beq.n	1f60 <system_gclk_gen_set_config+0x28>
    1f48:	2900      	cmp	r1, #0
    1f4a:	d112      	bne.n	1f72 <system_gclk_gen_set_config+0x3a>
    1f4c:	4b33      	ldr	r3, [pc, #204]	; (201c <STACK_SIZE+0x1c>)
    1f4e:	9300      	str	r3, [sp, #0]
    1f50:	4b33      	ldr	r3, [pc, #204]	; (2020 <STACK_SIZE+0x20>)
    1f52:	9301      	str	r3, [sp, #4]
    1f54:	2101      	movs	r1, #1
    1f56:	4a33      	ldr	r2, [pc, #204]	; (2024 <STACK_SIZE+0x24>)
    1f58:	2375      	movs	r3, #117	; 0x75
    1f5a:	4c33      	ldr	r4, [pc, #204]	; (2028 <STACK_SIZE+0x28>)
    1f5c:	47a0      	blx	r4
    1f5e:	e008      	b.n	1f72 <system_gclk_gen_set_config+0x3a>
    1f60:	2900      	cmp	r1, #0
    1f62:	d106      	bne.n	1f72 <system_gclk_gen_set_config+0x3a>
    1f64:	4831      	ldr	r0, [pc, #196]	; (202c <STACK_SIZE+0x2c>)
    1f66:	492e      	ldr	r1, [pc, #184]	; (2020 <STACK_SIZE+0x20>)
    1f68:	4a2e      	ldr	r2, [pc, #184]	; (2024 <STACK_SIZE+0x24>)
    1f6a:	2375      	movs	r3, #117	; 0x75
    1f6c:	4c30      	ldr	r4, [pc, #192]	; (2030 <STACK_SIZE+0x30>)
    1f6e:	47a0      	blx	r4
    1f70:	e7fe      	b.n	1f70 <system_gclk_gen_set_config+0x38>

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1f72:	1c37      	adds	r7, r6, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1f74:	782c      	ldrb	r4, [r5, #0]
    1f76:	0224      	lsls	r4, r4, #8
    1f78:	4334      	orrs	r4, r6

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1f7a:	786b      	ldrb	r3, [r5, #1]
    1f7c:	2b00      	cmp	r3, #0
    1f7e:	d002      	beq.n	1f86 <system_gclk_gen_set_config+0x4e>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1f80:	2380      	movs	r3, #128	; 0x80
    1f82:	02db      	lsls	r3, r3, #11
    1f84:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1f86:	7a6b      	ldrb	r3, [r5, #9]
    1f88:	2b00      	cmp	r3, #0
    1f8a:	d002      	beq.n	1f92 <system_gclk_gen_set_config+0x5a>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1f8c:	2380      	movs	r3, #128	; 0x80
    1f8e:	031b      	lsls	r3, r3, #12
    1f90:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1f92:	686b      	ldr	r3, [r5, #4]
    1f94:	2b01      	cmp	r3, #1
    1f96:	d919      	bls.n	1fcc <system_gclk_gen_set_config+0x94>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1f98:	1e5a      	subs	r2, r3, #1
    1f9a:	4213      	tst	r3, r2
    1f9c:	d110      	bne.n	1fc0 <system_gclk_gen_set_config+0x88>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1f9e:	2b02      	cmp	r3, #2
    1fa0:	d906      	bls.n	1fb0 <system_gclk_gen_set_config+0x78>
    1fa2:	2102      	movs	r1, #2
    1fa4:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1fa6:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    1fa8:	0049      	lsls	r1, r1, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1faa:	428b      	cmp	r3, r1
    1fac:	d8fb      	bhi.n	1fa6 <system_gclk_gen_set_config+0x6e>
    1fae:	e000      	b.n	1fb2 <system_gclk_gen_set_config+0x7a>
    1fb0:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1fb2:	0212      	lsls	r2, r2, #8
    1fb4:	1c37      	adds	r7, r6, #0
    1fb6:	4317      	orrs	r7, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1fb8:	2380      	movs	r3, #128	; 0x80
    1fba:	035b      	lsls	r3, r3, #13
    1fbc:	431c      	orrs	r4, r3
    1fbe:	e005      	b.n	1fcc <system_gclk_gen_set_config+0x94>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1fc0:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    1fc2:	1c37      	adds	r7, r6, #0
    1fc4:	431f      	orrs	r7, r3
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1fc6:	2380      	movs	r3, #128	; 0x80
    1fc8:	029b      	lsls	r3, r3, #10
    1fca:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1fcc:	7a2b      	ldrb	r3, [r5, #8]
    1fce:	2b00      	cmp	r3, #0
    1fd0:	d002      	beq.n	1fd8 <system_gclk_gen_set_config+0xa0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1fd2:	2380      	movs	r3, #128	; 0x80
    1fd4:	039b      	lsls	r3, r3, #14
    1fd6:	431c      	orrs	r4, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1fd8:	4b16      	ldr	r3, [pc, #88]	; (2034 <STACK_SIZE+0x34>)
    1fda:	785a      	ldrb	r2, [r3, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    1fdc:	b252      	sxtb	r2, r2
    1fde:	2a00      	cmp	r2, #0
    1fe0:	dbfb      	blt.n	1fda <system_gclk_gen_set_config+0xa2>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1fe2:	4b15      	ldr	r3, [pc, #84]	; (2038 <STACK_SIZE+0x38>)
    1fe4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1fe6:	4b15      	ldr	r3, [pc, #84]	; (203c <STACK_SIZE+0x3c>)
    1fe8:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1fea:	4b12      	ldr	r3, [pc, #72]	; (2034 <STACK_SIZE+0x34>)
    1fec:	785a      	ldrb	r2, [r3, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1fee:	b252      	sxtb	r2, r2
    1ff0:	2a00      	cmp	r2, #0
    1ff2:	dbfb      	blt.n	1fec <system_gclk_gen_set_config+0xb4>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1ff4:	4b0f      	ldr	r3, [pc, #60]	; (2034 <STACK_SIZE+0x34>)
    1ff6:	609f      	str	r7, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ff8:	785a      	ldrb	r2, [r3, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    1ffa:	b252      	sxtb	r2, r2
    1ffc:	2a00      	cmp	r2, #0
    1ffe:	dbfb      	blt.n	1ff8 <system_gclk_gen_set_config+0xc0>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2000:	4b0c      	ldr	r3, [pc, #48]	; (2034 <STACK_SIZE+0x34>)
    2002:	6859      	ldr	r1, [r3, #4]
    2004:	2280      	movs	r2, #128	; 0x80
    2006:	0252      	lsls	r2, r2, #9
    2008:	400a      	ands	r2, r1
    200a:	4314      	orrs	r4, r2
    200c:	605c      	str	r4, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    200e:	4b0c      	ldr	r3, [pc, #48]	; (2040 <STACK_SIZE+0x40>)
    2010:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2012:	b003      	add	sp, #12
    2014:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2016:	46c0      	nop			; (mov r8, r8)
    2018:	2000008c 	.word	0x2000008c
    201c:	00004444 	.word	0x00004444
    2020:	000045c8 	.word	0x000045c8
    2024:	000047b0 	.word	0x000047b0
    2028:	0000020d 	.word	0x0000020d
    202c:	00004484 	.word	0x00004484
    2030:	000033cd 	.word	0x000033cd
    2034:	40000c00 	.word	0x40000c00
    2038:	00000111 	.word	0x00000111
    203c:	40000c08 	.word	0x40000c08
    2040:	00000151 	.word	0x00000151

00002044 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2044:	b510      	push	{r4, lr}
    2046:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2048:	4a0b      	ldr	r2, [pc, #44]	; (2078 <system_gclk_gen_enable+0x34>)
    204a:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    204c:	b25b      	sxtb	r3, r3
    204e:	2b00      	cmp	r3, #0
    2050:	dbfb      	blt.n	204a <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2052:	4b0a      	ldr	r3, [pc, #40]	; (207c <system_gclk_gen_enable+0x38>)
    2054:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2056:	4b0a      	ldr	r3, [pc, #40]	; (2080 <system_gclk_gen_enable+0x3c>)
    2058:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    205a:	4a07      	ldr	r2, [pc, #28]	; (2078 <system_gclk_gen_enable+0x34>)
    205c:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    205e:	b25b      	sxtb	r3, r3
    2060:	2b00      	cmp	r3, #0
    2062:	dbfb      	blt.n	205c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2064:	4b04      	ldr	r3, [pc, #16]	; (2078 <system_gclk_gen_enable+0x34>)
    2066:	6859      	ldr	r1, [r3, #4]
    2068:	2280      	movs	r2, #128	; 0x80
    206a:	0252      	lsls	r2, r2, #9
    206c:	430a      	orrs	r2, r1
    206e:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    2070:	4b04      	ldr	r3, [pc, #16]	; (2084 <system_gclk_gen_enable+0x40>)
    2072:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2074:	bd10      	pop	{r4, pc}
    2076:	46c0      	nop			; (mov r8, r8)
    2078:	40000c00 	.word	0x40000c00
    207c:	00000111 	.word	0x00000111
    2080:	40000c04 	.word	0x40000c04
    2084:	00000151 	.word	0x00000151

00002088 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2088:	b570      	push	{r4, r5, r6, lr}
    208a:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    208c:	4a1a      	ldr	r2, [pc, #104]	; (20f8 <system_gclk_gen_get_hz+0x70>)
    208e:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    2090:	b25b      	sxtb	r3, r3
    2092:	2b00      	cmp	r3, #0
    2094:	dbfb      	blt.n	208e <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2096:	4b19      	ldr	r3, [pc, #100]	; (20fc <system_gclk_gen_get_hz+0x74>)
    2098:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    209a:	4b19      	ldr	r3, [pc, #100]	; (2100 <system_gclk_gen_get_hz+0x78>)
    209c:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    209e:	4a16      	ldr	r2, [pc, #88]	; (20f8 <system_gclk_gen_get_hz+0x70>)
    20a0:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    20a2:	b25b      	sxtb	r3, r3
    20a4:	2b00      	cmp	r3, #0
    20a6:	dbfb      	blt.n	20a0 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    20a8:	4e13      	ldr	r6, [pc, #76]	; (20f8 <system_gclk_gen_get_hz+0x70>)
    20aa:	6870      	ldr	r0, [r6, #4]
    20ac:	04c0      	lsls	r0, r0, #19
    20ae:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    20b0:	4b14      	ldr	r3, [pc, #80]	; (2104 <system_gclk_gen_get_hz+0x7c>)
    20b2:	4798      	blx	r3
    20b4:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    20b6:	4b12      	ldr	r3, [pc, #72]	; (2100 <system_gclk_gen_get_hz+0x78>)
    20b8:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    20ba:	6876      	ldr	r6, [r6, #4]
    20bc:	02f6      	lsls	r6, r6, #11
    20be:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    20c0:	4b11      	ldr	r3, [pc, #68]	; (2108 <system_gclk_gen_get_hz+0x80>)
    20c2:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    20c4:	4a0c      	ldr	r2, [pc, #48]	; (20f8 <system_gclk_gen_get_hz+0x70>)
    20c6:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    20c8:	b25b      	sxtb	r3, r3
    20ca:	2b00      	cmp	r3, #0
    20cc:	dbfb      	blt.n	20c6 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    20ce:	4b0a      	ldr	r3, [pc, #40]	; (20f8 <system_gclk_gen_get_hz+0x70>)
    20d0:	689c      	ldr	r4, [r3, #8]
    20d2:	0a24      	lsrs	r4, r4, #8
    20d4:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    20d6:	4b0d      	ldr	r3, [pc, #52]	; (210c <system_gclk_gen_get_hz+0x84>)
    20d8:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    20da:	2e00      	cmp	r6, #0
    20dc:	d107      	bne.n	20ee <system_gclk_gen_get_hz+0x66>
    20de:	2c01      	cmp	r4, #1
    20e0:	d907      	bls.n	20f2 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    20e2:	1c28      	adds	r0, r5, #0
    20e4:	1c21      	adds	r1, r4, #0
    20e6:	4b0a      	ldr	r3, [pc, #40]	; (2110 <system_gclk_gen_get_hz+0x88>)
    20e8:	4798      	blx	r3
    20ea:	1c05      	adds	r5, r0, #0
    20ec:	e001      	b.n	20f2 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    20ee:	3401      	adds	r4, #1
    20f0:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    20f2:	1c28      	adds	r0, r5, #0
    20f4:	bd70      	pop	{r4, r5, r6, pc}
    20f6:	46c0      	nop			; (mov r8, r8)
    20f8:	40000c00 	.word	0x40000c00
    20fc:	00000111 	.word	0x00000111
    2100:	40000c04 	.word	0x40000c04
    2104:	00001cc5 	.word	0x00001cc5
    2108:	40000c08 	.word	0x40000c08
    210c:	00000151 	.word	0x00000151
    2110:	00003279 	.word	0x00003279

00002114 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2114:	b510      	push	{r4, lr}
    2116:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    2118:	4b06      	ldr	r3, [pc, #24]	; (2134 <system_gclk_chan_enable+0x20>)
    211a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    211c:	4b06      	ldr	r3, [pc, #24]	; (2138 <system_gclk_chan_enable+0x24>)
    211e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2120:	4b06      	ldr	r3, [pc, #24]	; (213c <system_gclk_chan_enable+0x28>)
    2122:	8859      	ldrh	r1, [r3, #2]
    2124:	2280      	movs	r2, #128	; 0x80
    2126:	01d2      	lsls	r2, r2, #7
    2128:	430a      	orrs	r2, r1
    212a:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    212c:	4b04      	ldr	r3, [pc, #16]	; (2140 <system_gclk_chan_enable+0x2c>)
    212e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2130:	bd10      	pop	{r4, pc}
    2132:	46c0      	nop			; (mov r8, r8)
    2134:	00000111 	.word	0x00000111
    2138:	40000c02 	.word	0x40000c02
    213c:	40000c00 	.word	0x40000c00
    2140:	00000151 	.word	0x00000151

00002144 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2144:	b510      	push	{r4, lr}
    2146:	b082      	sub	sp, #8
    2148:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    214a:	4b20      	ldr	r3, [pc, #128]	; (21cc <system_gclk_chan_disable+0x88>)
    214c:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    214e:	4b20      	ldr	r3, [pc, #128]	; (21d0 <system_gclk_chan_disable+0x8c>)
    2150:	701c      	strb	r4, [r3, #0]
    2152:	4b20      	ldr	r3, [pc, #128]	; (21d4 <system_gclk_chan_disable+0x90>)
    2154:	6818      	ldr	r0, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);
    2156:	2800      	cmp	r0, #0
    2158:	d00e      	beq.n	2178 <system_gclk_chan_disable+0x34>
    215a:	4b1f      	ldr	r3, [pc, #124]	; (21d8 <system_gclk_chan_disable+0x94>)
    215c:	885b      	ldrh	r3, [r3, #2]
    215e:	0bdb      	lsrs	r3, r3, #15
    2160:	d016      	beq.n	2190 <system_gclk_chan_disable+0x4c>
    2162:	4b1e      	ldr	r3, [pc, #120]	; (21dc <system_gclk_chan_disable+0x98>)
    2164:	9300      	str	r3, [sp, #0]
    2166:	4b1e      	ldr	r3, [pc, #120]	; (21e0 <system_gclk_chan_disable+0x9c>)
    2168:	9301      	str	r3, [sp, #4]
    216a:	2101      	movs	r1, #1
    216c:	4a1d      	ldr	r2, [pc, #116]	; (21e4 <system_gclk_chan_disable+0xa0>)
    216e:	2398      	movs	r3, #152	; 0x98
    2170:	33ff      	adds	r3, #255	; 0xff
    2172:	4c1d      	ldr	r4, [pc, #116]	; (21e8 <system_gclk_chan_disable+0xa4>)
    2174:	47a0      	blx	r4
    2176:	e00b      	b.n	2190 <system_gclk_chan_disable+0x4c>
    2178:	4b17      	ldr	r3, [pc, #92]	; (21d8 <system_gclk_chan_disable+0x94>)
    217a:	885b      	ldrh	r3, [r3, #2]
    217c:	0bdb      	lsrs	r3, r3, #15
    217e:	d007      	beq.n	2190 <system_gclk_chan_disable+0x4c>
    2180:	481a      	ldr	r0, [pc, #104]	; (21ec <system_gclk_chan_disable+0xa8>)
    2182:	4917      	ldr	r1, [pc, #92]	; (21e0 <system_gclk_chan_disable+0x9c>)
    2184:	4a17      	ldr	r2, [pc, #92]	; (21e4 <system_gclk_chan_disable+0xa0>)
    2186:	2398      	movs	r3, #152	; 0x98
    2188:	33ff      	adds	r3, #255	; 0xff
    218a:	4c19      	ldr	r4, [pc, #100]	; (21f0 <system_gclk_chan_disable+0xac>)
    218c:	47a0      	blx	r4
    218e:	e7fe      	b.n	218e <system_gclk_chan_disable+0x4a>

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2190:	4b11      	ldr	r3, [pc, #68]	; (21d8 <system_gclk_chan_disable+0x94>)
    2192:	8858      	ldrh	r0, [r3, #2]
    2194:	0500      	lsls	r0, r0, #20
    2196:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2198:	8859      	ldrh	r1, [r3, #2]
    219a:	4a16      	ldr	r2, [pc, #88]	; (21f4 <system_gclk_chan_disable+0xb0>)
    219c:	400a      	ands	r2, r1
    219e:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    21a0:	8859      	ldrh	r1, [r3, #2]
    21a2:	4a15      	ldr	r2, [pc, #84]	; (21f8 <system_gclk_chan_disable+0xb4>)
    21a4:	400a      	ands	r2, r1
    21a6:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    21a8:	1c19      	adds	r1, r3, #0
    21aa:	2280      	movs	r2, #128	; 0x80
    21ac:	01d2      	lsls	r2, r2, #7
    21ae:	884b      	ldrh	r3, [r1, #2]
    21b0:	4213      	tst	r3, r2
    21b2:	d1fc      	bne.n	21ae <system_gclk_chan_disable+0x6a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    21b4:	4b08      	ldr	r3, [pc, #32]	; (21d8 <system_gclk_chan_disable+0x94>)
    21b6:	0201      	lsls	r1, r0, #8
    21b8:	8858      	ldrh	r0, [r3, #2]
    21ba:	4a0e      	ldr	r2, [pc, #56]	; (21f4 <system_gclk_chan_disable+0xb0>)
    21bc:	4002      	ands	r2, r0
    21be:	430a      	orrs	r2, r1
    21c0:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    21c2:	4b0e      	ldr	r3, [pc, #56]	; (21fc <system_gclk_chan_disable+0xb8>)
    21c4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    21c6:	b002      	add	sp, #8
    21c8:	bd10      	pop	{r4, pc}
    21ca:	46c0      	nop			; (mov r8, r8)
    21cc:	00000111 	.word	0x00000111
    21d0:	40000c02 	.word	0x40000c02
    21d4:	2000008c 	.word	0x2000008c
    21d8:	40000c00 	.word	0x40000c00
    21dc:	00004444 	.word	0x00004444
    21e0:	000047f0 	.word	0x000047f0
    21e4:	000047b0 	.word	0x000047b0
    21e8:	0000020d 	.word	0x0000020d
    21ec:	00004484 	.word	0x00004484
    21f0:	000033cd 	.word	0x000033cd
    21f4:	fffff0ff 	.word	0xfffff0ff
    21f8:	ffffbfff 	.word	0xffffbfff
    21fc:	00000151 	.word	0x00000151

00002200 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    2200:	b570      	push	{r4, r5, r6, lr}
    2202:	b082      	sub	sp, #8
    2204:	1c04      	adds	r4, r0, #0
    2206:	1c0d      	adds	r5, r1, #0
    2208:	4b12      	ldr	r3, [pc, #72]	; (2254 <system_gclk_chan_set_config+0x54>)
    220a:	6818      	ldr	r0, [r3, #0]
	/* Sanity check arguments */
	Assert(config);
    220c:	2800      	cmp	r0, #0
    220e:	d00c      	beq.n	222a <system_gclk_chan_set_config+0x2a>
    2210:	2900      	cmp	r1, #0
    2212:	d114      	bne.n	223e <system_gclk_chan_set_config+0x3e>
    2214:	4b10      	ldr	r3, [pc, #64]	; (2258 <system_gclk_chan_set_config+0x58>)
    2216:	9300      	str	r3, [sp, #0]
    2218:	4b10      	ldr	r3, [pc, #64]	; (225c <system_gclk_chan_set_config+0x5c>)
    221a:	9301      	str	r3, [sp, #4]
    221c:	2101      	movs	r1, #1
    221e:	4a10      	ldr	r2, [pc, #64]	; (2260 <system_gclk_chan_set_config+0x60>)
    2220:	2362      	movs	r3, #98	; 0x62
    2222:	33ff      	adds	r3, #255	; 0xff
    2224:	4e0f      	ldr	r6, [pc, #60]	; (2264 <system_gclk_chan_set_config+0x64>)
    2226:	47b0      	blx	r6
    2228:	e009      	b.n	223e <system_gclk_chan_set_config+0x3e>
    222a:	2900      	cmp	r1, #0
    222c:	d107      	bne.n	223e <system_gclk_chan_set_config+0x3e>
    222e:	480e      	ldr	r0, [pc, #56]	; (2268 <system_gclk_chan_set_config+0x68>)
    2230:	490a      	ldr	r1, [pc, #40]	; (225c <system_gclk_chan_set_config+0x5c>)
    2232:	4a0b      	ldr	r2, [pc, #44]	; (2260 <system_gclk_chan_set_config+0x60>)
    2234:	2362      	movs	r3, #98	; 0x62
    2236:	33ff      	adds	r3, #255	; 0xff
    2238:	4c0c      	ldr	r4, [pc, #48]	; (226c <system_gclk_chan_set_config+0x6c>)
    223a:	47a0      	blx	r4
    223c:	e7fe      	b.n	223c <system_gclk_chan_set_config+0x3c>

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    223e:	782d      	ldrb	r5, [r5, #0]
    2240:	022d      	lsls	r5, r5, #8
    2242:	4325      	orrs	r5, r4

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    2244:	1c20      	adds	r0, r4, #0
    2246:	4b0a      	ldr	r3, [pc, #40]	; (2270 <system_gclk_chan_set_config+0x70>)
    2248:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    224a:	b2ad      	uxth	r5, r5
    224c:	4b09      	ldr	r3, [pc, #36]	; (2274 <system_gclk_chan_set_config+0x74>)
    224e:	805d      	strh	r5, [r3, #2]
}
    2250:	b002      	add	sp, #8
    2252:	bd70      	pop	{r4, r5, r6, pc}
    2254:	2000008c 	.word	0x2000008c
    2258:	00004444 	.word	0x00004444
    225c:	000045c8 	.word	0x000045c8
    2260:	000047b0 	.word	0x000047b0
    2264:	0000020d 	.word	0x0000020d
    2268:	00004484 	.word	0x00004484
    226c:	000033cd 	.word	0x000033cd
    2270:	00002145 	.word	0x00002145
    2274:	40000c00 	.word	0x40000c00

00002278 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2278:	b510      	push	{r4, lr}
    227a:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    227c:	4b06      	ldr	r3, [pc, #24]	; (2298 <system_gclk_chan_get_hz+0x20>)
    227e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2280:	4b06      	ldr	r3, [pc, #24]	; (229c <system_gclk_chan_get_hz+0x24>)
    2282:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2284:	4b06      	ldr	r3, [pc, #24]	; (22a0 <system_gclk_chan_get_hz+0x28>)
    2286:	885c      	ldrh	r4, [r3, #2]
    2288:	0524      	lsls	r4, r4, #20
    228a:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    228c:	4b05      	ldr	r3, [pc, #20]	; (22a4 <system_gclk_chan_get_hz+0x2c>)
    228e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2290:	1c20      	adds	r0, r4, #0
    2292:	4b05      	ldr	r3, [pc, #20]	; (22a8 <system_gclk_chan_get_hz+0x30>)
    2294:	4798      	blx	r3
}
    2296:	bd10      	pop	{r4, pc}
    2298:	00000111 	.word	0x00000111
    229c:	40000c02 	.word	0x40000c02
    22a0:	40000c00 	.word	0x40000c00
    22a4:	00000151 	.word	0x00000151
    22a8:	00002089 	.word	0x00002089

000022ac <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    22ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    22ae:	b083      	sub	sp, #12
    22b0:	1c05      	adds	r5, r0, #0
    22b2:	1c0e      	adds	r6, r1, #0
    22b4:	1c14      	adds	r4, r2, #0
    22b6:	4b3a      	ldr	r3, [pc, #232]	; (23a0 <_system_pinmux_config+0xf4>)
    22b8:	6818      	ldr	r0, [r3, #0]
	Assert(port);
    22ba:	2800      	cmp	r0, #0
    22bc:	d00f      	beq.n	22de <_system_pinmux_config+0x32>
    22be:	2d00      	cmp	r5, #0
    22c0:	d116      	bne.n	22f0 <_system_pinmux_config+0x44>
    22c2:	4b38      	ldr	r3, [pc, #224]	; (23a4 <_system_pinmux_config+0xf8>)
    22c4:	9300      	str	r3, [sp, #0]
    22c6:	4b38      	ldr	r3, [pc, #224]	; (23a8 <_system_pinmux_config+0xfc>)
    22c8:	9301      	str	r3, [sp, #4]
    22ca:	2101      	movs	r1, #1
    22cc:	4a37      	ldr	r2, [pc, #220]	; (23ac <_system_pinmux_config+0x100>)
    22ce:	2341      	movs	r3, #65	; 0x41
    22d0:	4f37      	ldr	r7, [pc, #220]	; (23b0 <_system_pinmux_config+0x104>)
    22d2:	47b8      	blx	r7
    22d4:	4b32      	ldr	r3, [pc, #200]	; (23a0 <_system_pinmux_config+0xf4>)
    22d6:	6818      	ldr	r0, [r3, #0]
	Assert(config);
    22d8:	2800      	cmp	r0, #0
    22da:	d109      	bne.n	22f0 <_system_pinmux_config+0x44>
    22dc:	e014      	b.n	2308 <_system_pinmux_config+0x5c>
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
	Assert(port);
    22de:	2d00      	cmp	r5, #0
    22e0:	d112      	bne.n	2308 <_system_pinmux_config+0x5c>
    22e2:	4834      	ldr	r0, [pc, #208]	; (23b4 <_system_pinmux_config+0x108>)
    22e4:	4930      	ldr	r1, [pc, #192]	; (23a8 <_system_pinmux_config+0xfc>)
    22e6:	4a31      	ldr	r2, [pc, #196]	; (23ac <_system_pinmux_config+0x100>)
    22e8:	2341      	movs	r3, #65	; 0x41
    22ea:	4c33      	ldr	r4, [pc, #204]	; (23b8 <_system_pinmux_config+0x10c>)
    22ec:	47a0      	blx	r4
    22ee:	e7fe      	b.n	22ee <_system_pinmux_config+0x42>
	Assert(config);
    22f0:	2c00      	cmp	r4, #0
    22f2:	d112      	bne.n	231a <_system_pinmux_config+0x6e>
    22f4:	4b2b      	ldr	r3, [pc, #172]	; (23a4 <_system_pinmux_config+0xf8>)
    22f6:	9300      	str	r3, [sp, #0]
    22f8:	4b30      	ldr	r3, [pc, #192]	; (23bc <_system_pinmux_config+0x110>)
    22fa:	9301      	str	r3, [sp, #4]
    22fc:	2101      	movs	r1, #1
    22fe:	4a2b      	ldr	r2, [pc, #172]	; (23ac <_system_pinmux_config+0x100>)
    2300:	2342      	movs	r3, #66	; 0x42
    2302:	4f2b      	ldr	r7, [pc, #172]	; (23b0 <_system_pinmux_config+0x104>)
    2304:	47b8      	blx	r7
    2306:	e008      	b.n	231a <_system_pinmux_config+0x6e>
    2308:	2c00      	cmp	r4, #0
    230a:	d106      	bne.n	231a <_system_pinmux_config+0x6e>
    230c:	4829      	ldr	r0, [pc, #164]	; (23b4 <_system_pinmux_config+0x108>)
    230e:	492b      	ldr	r1, [pc, #172]	; (23bc <_system_pinmux_config+0x110>)
    2310:	4a26      	ldr	r2, [pc, #152]	; (23ac <_system_pinmux_config+0x100>)
    2312:	2342      	movs	r3, #66	; 0x42
    2314:	4c28      	ldr	r4, [pc, #160]	; (23b8 <_system_pinmux_config+0x10c>)
    2316:	47a0      	blx	r4
    2318:	e7fe      	b.n	2318 <_system_pinmux_config+0x6c>

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    231a:	78e3      	ldrb	r3, [r4, #3]
    231c:	2b00      	cmp	r3, #0
    231e:	d11e      	bne.n	235e <_system_pinmux_config+0xb2>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2320:	7823      	ldrb	r3, [r4, #0]
    2322:	2b80      	cmp	r3, #128	; 0x80
    2324:	d004      	beq.n	2330 <_system_pinmux_config+0x84>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2326:	061b      	lsls	r3, r3, #24
    2328:	2280      	movs	r2, #128	; 0x80
    232a:	0252      	lsls	r2, r2, #9
    232c:	4313      	orrs	r3, r2
    232e:	e000      	b.n	2332 <_system_pinmux_config+0x86>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    2330:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2332:	7862      	ldrb	r2, [r4, #1]
    2334:	2102      	movs	r1, #2
    2336:	438a      	bics	r2, r1
    2338:	d10a      	bne.n	2350 <_system_pinmux_config+0xa4>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    233a:	78a2      	ldrb	r2, [r4, #2]
    233c:	2a00      	cmp	r2, #0
    233e:	d103      	bne.n	2348 <_system_pinmux_config+0x9c>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    2340:	2280      	movs	r2, #128	; 0x80
    2342:	0292      	lsls	r2, r2, #10
    2344:	4313      	orrs	r3, r2
    2346:	e002      	b.n	234e <_system_pinmux_config+0xa2>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2348:	22c0      	movs	r2, #192	; 0xc0
    234a:	02d2      	lsls	r2, r2, #11
    234c:	4313      	orrs	r3, r2
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    234e:	606e      	str	r6, [r5, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2350:	7862      	ldrb	r2, [r4, #1]
    2352:	3a01      	subs	r2, #1
    2354:	2a01      	cmp	r2, #1
    2356:	d804      	bhi.n	2362 <_system_pinmux_config+0xb6>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2358:	4a19      	ldr	r2, [pc, #100]	; (23c0 <_system_pinmux_config+0x114>)
    235a:	4013      	ands	r3, r2
    235c:	e001      	b.n	2362 <_system_pinmux_config+0xb6>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    235e:	606e      	str	r6, [r5, #4]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    2360:	2300      	movs	r3, #0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2362:	0431      	lsls	r1, r6, #16
    2364:	0c09      	lsrs	r1, r1, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2366:	22a0      	movs	r2, #160	; 0xa0
    2368:	05d2      	lsls	r2, r2, #23
    236a:	430a      	orrs	r2, r1
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    236c:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    236e:	62aa      	str	r2, [r5, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2370:	0c31      	lsrs	r1, r6, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2372:	22d0      	movs	r2, #208	; 0xd0
    2374:	0612      	lsls	r2, r2, #24
    2376:	430a      	orrs	r2, r1
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2378:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    237a:	62aa      	str	r2, [r5, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    237c:	78e2      	ldrb	r2, [r4, #3]
    237e:	2a00      	cmp	r2, #0
    2380:	d10c      	bne.n	239c <_system_pinmux_config+0xf0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2382:	035a      	lsls	r2, r3, #13
    2384:	d505      	bpl.n	2392 <_system_pinmux_config+0xe6>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2386:	78a3      	ldrb	r3, [r4, #2]
    2388:	2b01      	cmp	r3, #1
    238a:	d101      	bne.n	2390 <_system_pinmux_config+0xe4>
				port->OUTSET.reg = pin_mask;
    238c:	61ae      	str	r6, [r5, #24]
    238e:	e000      	b.n	2392 <_system_pinmux_config+0xe6>
			} else {
				port->OUTCLR.reg = pin_mask;
    2390:	616e      	str	r6, [r5, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2392:	7863      	ldrb	r3, [r4, #1]
    2394:	3b01      	subs	r3, #1
    2396:	2b01      	cmp	r3, #1
    2398:	d800      	bhi.n	239c <_system_pinmux_config+0xf0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    239a:	60ae      	str	r6, [r5, #8]
		}
	}
}
    239c:	b003      	add	sp, #12
    239e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23a0:	2000008c 	.word	0x2000008c
    23a4:	00004444 	.word	0x00004444
    23a8:	000045d0 	.word	0x000045d0
    23ac:	0000480c 	.word	0x0000480c
    23b0:	0000020d 	.word	0x0000020d
    23b4:	00004484 	.word	0x00004484
    23b8:	000033cd 	.word	0x000033cd
    23bc:	000045c8 	.word	0x000045c8
    23c0:	fffbffff 	.word	0xfffbffff

000023c4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    23c4:	b570      	push	{r4, r5, r6, lr}
    23c6:	b082      	sub	sp, #8
    23c8:	1c04      	adds	r4, r0, #0
    23ca:	1c0d      	adds	r5, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    23cc:	09c3      	lsrs	r3, r0, #7
    23ce:	d104      	bne.n	23da <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    23d0:	0940      	lsrs	r0, r0, #5
    23d2:	01c0      	lsls	r0, r0, #7
    23d4:	4b11      	ldr	r3, [pc, #68]	; (241c <system_pinmux_pin_set_config+0x58>)
    23d6:	18c0      	adds	r0, r0, r3
    23d8:	e017      	b.n	240a <system_pinmux_pin_set_config+0x46>
    23da:	4b11      	ldr	r3, [pc, #68]	; (2420 <system_pinmux_pin_set_config+0x5c>)
    23dc:	6818      	ldr	r0, [r3, #0]
	} else {
		Assert(false);
    23de:	2800      	cmp	r0, #0
    23e0:	d00b      	beq.n	23fa <system_pinmux_pin_set_config+0x36>
    23e2:	4b10      	ldr	r3, [pc, #64]	; (2424 <system_pinmux_pin_set_config+0x60>)
    23e4:	9300      	str	r3, [sp, #0]
    23e6:	4b10      	ldr	r3, [pc, #64]	; (2428 <system_pinmux_pin_set_config+0x64>)
    23e8:	9301      	str	r3, [sp, #4]
    23ea:	2101      	movs	r1, #1
    23ec:	4a0f      	ldr	r2, [pc, #60]	; (242c <system_pinmux_pin_set_config+0x68>)
    23ee:	23b1      	movs	r3, #177	; 0xb1
    23f0:	005b      	lsls	r3, r3, #1
    23f2:	4e0f      	ldr	r6, [pc, #60]	; (2430 <system_pinmux_pin_set_config+0x6c>)
    23f4:	47b0      	blx	r6
		return NULL;
    23f6:	2000      	movs	r0, #0
    23f8:	e007      	b.n	240a <system_pinmux_pin_set_config+0x46>
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
    23fa:	480e      	ldr	r0, [pc, #56]	; (2434 <system_pinmux_pin_set_config+0x70>)
    23fc:	490a      	ldr	r1, [pc, #40]	; (2428 <system_pinmux_pin_set_config+0x64>)
    23fe:	4a0b      	ldr	r2, [pc, #44]	; (242c <system_pinmux_pin_set_config+0x68>)
    2400:	23b1      	movs	r3, #177	; 0xb1
    2402:	005b      	lsls	r3, r3, #1
    2404:	4c0c      	ldr	r4, [pc, #48]	; (2438 <system_pinmux_pin_set_config+0x74>)
    2406:	47a0      	blx	r4
    2408:	e7fe      	b.n	2408 <system_pinmux_pin_set_config+0x44>
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    240a:	211f      	movs	r1, #31
    240c:	400c      	ands	r4, r1
    240e:	2101      	movs	r1, #1
    2410:	40a1      	lsls	r1, r4

	_system_pinmux_config(port, pin_mask, config);
    2412:	1c2a      	adds	r2, r5, #0
    2414:	4b09      	ldr	r3, [pc, #36]	; (243c <system_pinmux_pin_set_config+0x78>)
    2416:	4798      	blx	r3
}
    2418:	b002      	add	sp, #8
    241a:	bd70      	pop	{r4, r5, r6, pc}
    241c:	41004400 	.word	0x41004400
    2420:	2000008c 	.word	0x2000008c
    2424:	00004444 	.word	0x00004444
    2428:	00004618 	.word	0x00004618
    242c:	0000483c 	.word	0x0000483c
    2430:	0000020d 	.word	0x0000020d
    2434:	00004484 	.word	0x00004484
    2438:	000033cd 	.word	0x000033cd
    243c:	000022ad 	.word	0x000022ad

00002440 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2440:	4770      	bx	lr
    2442:	46c0      	nop			; (mov r8, r8)

00002444 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2444:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2446:	4b04      	ldr	r3, [pc, #16]	; (2458 <system_init+0x14>)
    2448:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    244a:	4b04      	ldr	r3, [pc, #16]	; (245c <system_init+0x18>)
    244c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    244e:	4b04      	ldr	r3, [pc, #16]	; (2460 <system_init+0x1c>)
    2450:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2452:	4b04      	ldr	r3, [pc, #16]	; (2464 <system_init+0x20>)
    2454:	4798      	blx	r3
}
    2456:	bd08      	pop	{r3, pc}
    2458:	00001e81 	.word	0x00001e81
    245c:	00000431 	.word	0x00000431
    2460:	00002441 	.word	0x00002441
    2464:	00002441 	.word	0x00002441

00002468 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2468:	e7fe      	b.n	2468 <Dummy_Handler>
    246a:	46c0      	nop			; (mov r8, r8)

0000246c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    246c:	b570      	push	{r4, r5, r6, lr}
        uint32_t *pSrc, *pDest;

        /* Change default QOS values to have the best performance and correct USB behavior */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    246e:	2102      	movs	r1, #2
    2470:	2390      	movs	r3, #144	; 0x90
    2472:	005b      	lsls	r3, r3, #1
    2474:	4a28      	ldr	r2, [pc, #160]	; (2518 <Reset_Handler+0xac>)
    2476:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2478:	4b28      	ldr	r3, [pc, #160]	; (251c <Reset_Handler+0xb0>)
    247a:	78d8      	ldrb	r0, [r3, #3]
    247c:	2103      	movs	r1, #3
    247e:	4388      	bics	r0, r1
    2480:	2202      	movs	r2, #2
    2482:	4310      	orrs	r0, r2
    2484:	70d8      	strb	r0, [r3, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2486:	78dd      	ldrb	r5, [r3, #3]
    2488:	240c      	movs	r4, #12
    248a:	43a5      	bics	r5, r4
    248c:	2008      	movs	r0, #8
    248e:	4305      	orrs	r5, r0
    2490:	70dd      	strb	r5, [r3, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2492:	4b23      	ldr	r3, [pc, #140]	; (2520 <Reset_Handler+0xb4>)
    2494:	7b9e      	ldrb	r6, [r3, #14]
    2496:	2530      	movs	r5, #48	; 0x30
    2498:	43ae      	bics	r6, r5
    249a:	2520      	movs	r5, #32
    249c:	4335      	orrs	r5, r6
    249e:	739d      	strb	r5, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    24a0:	7b9d      	ldrb	r5, [r3, #14]
    24a2:	43a5      	bics	r5, r4
    24a4:	4328      	orrs	r0, r5
    24a6:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    24a8:	7b98      	ldrb	r0, [r3, #14]
    24aa:	4388      	bics	r0, r1
    24ac:	4302      	orrs	r2, r0
    24ae:	739a      	strb	r2, [r3, #14]

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    24b0:	4b1c      	ldr	r3, [pc, #112]	; (2524 <Reset_Handler+0xb8>)
    24b2:	4a1d      	ldr	r2, [pc, #116]	; (2528 <Reset_Handler+0xbc>)
    24b4:	429a      	cmp	r2, r3
    24b6:	d003      	beq.n	24c0 <Reset_Handler+0x54>
                for (; pDest < &_erelocate;) {
    24b8:	4b1c      	ldr	r3, [pc, #112]	; (252c <Reset_Handler+0xc0>)
    24ba:	4a1a      	ldr	r2, [pc, #104]	; (2524 <Reset_Handler+0xb8>)
    24bc:	429a      	cmp	r2, r3
    24be:	d304      	bcc.n	24ca <Reset_Handler+0x5e>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    24c0:	4b1b      	ldr	r3, [pc, #108]	; (2530 <Reset_Handler+0xc4>)
    24c2:	4a1c      	ldr	r2, [pc, #112]	; (2534 <Reset_Handler+0xc8>)
    24c4:	429a      	cmp	r2, r3
    24c6:	d310      	bcc.n	24ea <Reset_Handler+0x7e>
    24c8:	e01b      	b.n	2502 <Reset_Handler+0x96>
    24ca:	4b1b      	ldr	r3, [pc, #108]	; (2538 <Reset_Handler+0xcc>)
    24cc:	4817      	ldr	r0, [pc, #92]	; (252c <Reset_Handler+0xc0>)
    24ce:	3003      	adds	r0, #3
    24d0:	1ac0      	subs	r0, r0, r3
    24d2:	0880      	lsrs	r0, r0, #2
    24d4:	3001      	adds	r0, #1
    24d6:	0080      	lsls	r0, r0, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    24d8:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
    24da:	4912      	ldr	r1, [pc, #72]	; (2524 <Reset_Handler+0xb8>)
    24dc:	4a12      	ldr	r2, [pc, #72]	; (2528 <Reset_Handler+0xbc>)
    24de:	58d4      	ldr	r4, [r2, r3]
    24e0:	50cc      	str	r4, [r1, r3]
    24e2:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    24e4:	4283      	cmp	r3, r0
    24e6:	d1fa      	bne.n	24de <Reset_Handler+0x72>
    24e8:	e7ea      	b.n	24c0 <Reset_Handler+0x54>
    24ea:	4b12      	ldr	r3, [pc, #72]	; (2534 <Reset_Handler+0xc8>)
    24ec:	1d1a      	adds	r2, r3, #4
    24ee:	4910      	ldr	r1, [pc, #64]	; (2530 <Reset_Handler+0xc4>)
    24f0:	3103      	adds	r1, #3
    24f2:	1a89      	subs	r1, r1, r2
    24f4:	0889      	lsrs	r1, r1, #2
    24f6:	0089      	lsls	r1, r1, #2
    24f8:	1852      	adds	r2, r2, r1
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
    24fa:	2100      	movs	r1, #0
    24fc:	c302      	stmia	r3!, {r1}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    24fe:	4293      	cmp	r3, r2
    2500:	d1fc      	bne.n	24fc <Reset_Handler+0x90>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2502:	4b0e      	ldr	r3, [pc, #56]	; (253c <Reset_Handler+0xd0>)
    2504:	217f      	movs	r1, #127	; 0x7f
    2506:	4a0e      	ldr	r2, [pc, #56]	; (2540 <Reset_Handler+0xd4>)
    2508:	438a      	bics	r2, r1
    250a:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
    250c:	4b0d      	ldr	r3, [pc, #52]	; (2544 <Reset_Handler+0xd8>)
    250e:	4798      	blx	r3

        /* Branch to main function */
        main();
    2510:	4b0d      	ldr	r3, [pc, #52]	; (2548 <Reset_Handler+0xdc>)
    2512:	4798      	blx	r3
    2514:	e7fe      	b.n	2514 <Reset_Handler+0xa8>
    2516:	46c0      	nop			; (mov r8, r8)
    2518:	41007000 	.word	0x41007000
    251c:	41005000 	.word	0x41005000
    2520:	41004800 	.word	0x41004800
    2524:	20000000 	.word	0x20000000
    2528:	00004ac8 	.word	0x00004ac8
    252c:	20000068 	.word	0x20000068
    2530:	20000278 	.word	0x20000278
    2534:	20000068 	.word	0x20000068
    2538:	20000004 	.word	0x20000004
    253c:	e000ed00 	.word	0xe000ed00
    2540:	00000000 	.word	0x00000000
    2544:	0000335d 	.word	0x0000335d
    2548:	0000311d 	.word	0x0000311d

0000254c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    254c:	b5f0      	push	{r4, r5, r6, r7, lr}
    254e:	4647      	mov	r7, r8
    2550:	b480      	push	{r7}
    2552:	1c0c      	adds	r4, r1, #0
    2554:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    2556:	2800      	cmp	r0, #0
    2558:	d10c      	bne.n	2574 <_read+0x28>
		return -1;
	}

	for (; len > 0; --len) {
    255a:	2a00      	cmp	r2, #0
    255c:	dd0d      	ble.n	257a <_read+0x2e>
    255e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    2560:	4e09      	ldr	r6, [pc, #36]	; (2588 <_read+0x3c>)
    2562:	4d0a      	ldr	r5, [pc, #40]	; (258c <_read+0x40>)
    2564:	6830      	ldr	r0, [r6, #0]
    2566:	1c21      	adds	r1, r4, #0
    2568:	682b      	ldr	r3, [r5, #0]
    256a:	4798      	blx	r3
		ptr++;
    256c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    256e:	42bc      	cmp	r4, r7
    2570:	d1f8      	bne.n	2564 <_read+0x18>
    2572:	e004      	b.n	257e <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    2574:	2001      	movs	r0, #1
    2576:	4240      	negs	r0, r0
    2578:	e002      	b.n	2580 <_read+0x34>
	}

	for (; len > 0; --len) {
    257a:	2000      	movs	r0, #0
    257c:	e000      	b.n	2580 <_read+0x34>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
    257e:	4640      	mov	r0, r8
	}
	return nChars;
}
    2580:	bc04      	pop	{r2}
    2582:	4690      	mov	r8, r2
    2584:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2586:	46c0      	nop			; (mov r8, r8)
    2588:	20000150 	.word	0x20000150
    258c:	20000148 	.word	0x20000148

00002590 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    2590:	b5f0      	push	{r4, r5, r6, r7, lr}
    2592:	4647      	mov	r7, r8
    2594:	b480      	push	{r7}
    2596:	1c0e      	adds	r6, r1, #0
    2598:	1c15      	adds	r5, r2, #0
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    259a:	3801      	subs	r0, #1
    259c:	2802      	cmp	r0, #2
    259e:	d810      	bhi.n	25c2 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    25a0:	2a00      	cmp	r2, #0
    25a2:	d011      	beq.n	25c8 <_write+0x38>
    25a4:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    25a6:	4b0d      	ldr	r3, [pc, #52]	; (25dc <_write+0x4c>)
    25a8:	4698      	mov	r8, r3
    25aa:	4f0d      	ldr	r7, [pc, #52]	; (25e0 <_write+0x50>)
    25ac:	4643      	mov	r3, r8
    25ae:	6818      	ldr	r0, [r3, #0]
    25b0:	5d31      	ldrb	r1, [r6, r4]
    25b2:	683b      	ldr	r3, [r7, #0]
    25b4:	4798      	blx	r3
    25b6:	2800      	cmp	r0, #0
    25b8:	db08      	blt.n	25cc <_write+0x3c>
			return -1;
		}
		++nChars;
    25ba:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    25bc:	42a5      	cmp	r5, r4
    25be:	d1f5      	bne.n	25ac <_write+0x1c>
    25c0:	e007      	b.n	25d2 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    25c2:	2001      	movs	r0, #1
    25c4:	4240      	negs	r0, r0
    25c6:	e005      	b.n	25d4 <_write+0x44>
	}

	for (; len != 0; --len) {
    25c8:	2000      	movs	r0, #0
    25ca:	e003      	b.n	25d4 <_write+0x44>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    25cc:	2001      	movs	r0, #1
    25ce:	4240      	negs	r0, r0
    25d0:	e000      	b.n	25d4 <_write+0x44>
		}
		++nChars;
    25d2:	1c20      	adds	r0, r4, #0
	}
	return nChars;
}
    25d4:	bc04      	pop	{r2}
    25d6:	4690      	mov	r8, r2
    25d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25da:	46c0      	nop			; (mov r8, r8)
    25dc:	20000150 	.word	0x20000150
    25e0:	2000014c 	.word	0x2000014c

000025e4 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    25e4:	4b06      	ldr	r3, [pc, #24]	; (2600 <_sbrk+0x1c>)
    25e6:	681b      	ldr	r3, [r3, #0]
    25e8:	2b00      	cmp	r3, #0
    25ea:	d102      	bne.n	25f2 <_sbrk+0xe>
		heap = (unsigned char *)&_end;
    25ec:	4a05      	ldr	r2, [pc, #20]	; (2604 <_sbrk+0x20>)
    25ee:	4b04      	ldr	r3, [pc, #16]	; (2600 <_sbrk+0x1c>)
    25f0:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    25f2:	4a03      	ldr	r2, [pc, #12]	; (2600 <_sbrk+0x1c>)
    25f4:	6813      	ldr	r3, [r2, #0]

	heap += incr;
    25f6:	1818      	adds	r0, r3, r0
    25f8:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
    25fa:	1c18      	adds	r0, r3, #0
    25fc:	4770      	bx	lr
    25fe:	46c0      	nop			; (mov r8, r8)
    2600:	20000124 	.word	0x20000124
    2604:	20002278 	.word	0x20002278

00002608 <_close>:
	return -1;
}

extern int _close(int file)
{
	return -1;
    2608:	2001      	movs	r0, #1
}
    260a:	4240      	negs	r0, r0
    260c:	4770      	bx	lr
    260e:	46c0      	nop			; (mov r8, r8)

00002610 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    2610:	2380      	movs	r3, #128	; 0x80
    2612:	019b      	lsls	r3, r3, #6
    2614:	604b      	str	r3, [r1, #4]

	return 0;
}
    2616:	2000      	movs	r0, #0
    2618:	4770      	bx	lr
    261a:	46c0      	nop			; (mov r8, r8)

0000261c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    261c:	2001      	movs	r0, #1
    261e:	4770      	bx	lr

00002620 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    2620:	2000      	movs	r0, #0
    2622:	4770      	bx	lr

00002624 <usart_callback>:
 *
 * * \param module USART module causing the interrupt (not used)
 */
static void usart_callback(const struct usart_module *const module)
{
	transfer_complete = true;
    2624:	2201      	movs	r2, #1
    2626:	4b01      	ldr	r3, [pc, #4]	; (262c <usart_callback+0x8>)
    2628:	701a      	strb	r2, [r3, #0]
}
    262a:	4770      	bx	lr
    262c:	20000188 	.word	0x20000188

00002630 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    2630:	b530      	push	{r4, r5, lr}
    2632:	b083      	sub	sp, #12
    2634:	1c04      	adds	r4, r0, #0
    2636:	4b24      	ldr	r3, [pc, #144]	; (26c8 <usart_get_config_defaults+0x98>)
    2638:	6818      	ldr	r0, [r3, #0]
	/* Sanity check arguments */
	Assert(config);
    263a:	2800      	cmp	r0, #0
    263c:	d00c      	beq.n	2658 <usart_get_config_defaults+0x28>
    263e:	2c00      	cmp	r4, #0
    2640:	d114      	bne.n	266c <usart_get_config_defaults+0x3c>
    2642:	4b22      	ldr	r3, [pc, #136]	; (26cc <usart_get_config_defaults+0x9c>)
    2644:	9300      	str	r3, [sp, #0]
    2646:	4b22      	ldr	r3, [pc, #136]	; (26d0 <usart_get_config_defaults+0xa0>)
    2648:	9301      	str	r3, [sp, #4]
    264a:	2101      	movs	r1, #1
    264c:	4a21      	ldr	r2, [pc, #132]	; (26d4 <usart_get_config_defaults+0xa4>)
    264e:	23c7      	movs	r3, #199	; 0xc7
    2650:	009b      	lsls	r3, r3, #2
    2652:	4d21      	ldr	r5, [pc, #132]	; (26d8 <usart_get_config_defaults+0xa8>)
    2654:	47a8      	blx	r5
    2656:	e009      	b.n	266c <usart_get_config_defaults+0x3c>
    2658:	2c00      	cmp	r4, #0
    265a:	d107      	bne.n	266c <usart_get_config_defaults+0x3c>
    265c:	481f      	ldr	r0, [pc, #124]	; (26dc <usart_get_config_defaults+0xac>)
    265e:	491c      	ldr	r1, [pc, #112]	; (26d0 <usart_get_config_defaults+0xa0>)
    2660:	4a1c      	ldr	r2, [pc, #112]	; (26d4 <usart_get_config_defaults+0xa4>)
    2662:	23c7      	movs	r3, #199	; 0xc7
    2664:	009b      	lsls	r3, r3, #2
    2666:	4c1e      	ldr	r4, [pc, #120]	; (26e0 <usart_get_config_defaults+0xb0>)
    2668:	47a0      	blx	r4
    266a:	e7fe      	b.n	266a <usart_get_config_defaults+0x3a>

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    266c:	2380      	movs	r3, #128	; 0x80
    266e:	05db      	lsls	r3, r3, #23
    2670:	6023      	str	r3, [r4, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    2672:	2300      	movs	r3, #0
    2674:	6063      	str	r3, [r4, #4]
	config->parity           = USART_PARITY_NONE;
    2676:	22ff      	movs	r2, #255	; 0xff
    2678:	8122      	strh	r2, [r4, #8]
	config->stopbits         = USART_STOPBITS_1;
    267a:	2200      	movs	r2, #0
    267c:	72a3      	strb	r3, [r4, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    267e:	72e3      	strb	r3, [r4, #11]
	config->baudrate         = 9600;
    2680:	2196      	movs	r1, #150	; 0x96
    2682:	0189      	lsls	r1, r1, #6
    2684:	6221      	str	r1, [r4, #32]
	config->receiver_enable  = true;
    2686:	2101      	movs	r1, #1
    2688:	2024      	movs	r0, #36	; 0x24
    268a:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    268c:	2025      	movs	r0, #37	; 0x25
    268e:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    2690:	2126      	movs	r1, #38	; 0x26
    2692:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    2694:	2127      	movs	r1, #39	; 0x27
    2696:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    2698:	62a3      	str	r3, [r4, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    269a:	2188      	movs	r1, #136	; 0x88
    269c:	0349      	lsls	r1, r1, #13
    269e:	60e1      	str	r1, [r4, #12]
	config->run_in_standby   = false;
    26a0:	212c      	movs	r1, #44	; 0x2c
    26a2:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    26a4:	212d      	movs	r1, #45	; 0x2d
    26a6:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    26a8:	6323      	str	r3, [r4, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    26aa:	6363      	str	r3, [r4, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    26ac:	63a3      	str	r3, [r4, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    26ae:	63e3      	str	r3, [r4, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    26b0:	6163      	str	r3, [r4, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    26b2:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    26b4:	76e3      	strb	r3, [r4, #27]
#endif
#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
    26b6:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
    26b8:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
    26ba:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                        = 19;
    26bc:	2313      	movs	r3, #19
    26be:	76a3      	strb	r3, [r4, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
    26c0:	7762      	strb	r2, [r4, #29]
#endif
}
    26c2:	b003      	add	sp, #12
    26c4:	bd30      	pop	{r4, r5, pc}
    26c6:	46c0      	nop			; (mov r8, r8)
    26c8:	2000008c 	.word	0x2000008c
    26cc:	00004444 	.word	0x00004444
    26d0:	000045c8 	.word	0x000045c8
    26d4:	000046a0 	.word	0x000046a0
    26d8:	0000020d 	.word	0x0000020d
    26dc:	00004484 	.word	0x00004484
    26e0:	000033cd 	.word	0x000033cd

000026e4 <run_buffer_write_blocking_read_interrupt_test>:
 * It's sent using a blocking write, while it's received using interrupts.
 *
 * \param test Current test case.
 */
static void run_buffer_write_blocking_read_interrupt_test(const struct test_case *test)
{
    26e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    26e6:	4647      	mov	r7, r8
    26e8:	b480      	push	{r7}
    26ea:	b08c      	sub	sp, #48	; 0x30
    26ec:	4680      	mov	r8, r0
	uint8_t tx_string[TEST_STRING_LEN] = TEST_STRING;
    26ee:	ac08      	add	r4, sp, #32
    26f0:	4b2d      	ldr	r3, [pc, #180]	; (27a8 <run_buffer_write_blocking_read_interrupt_test+0xc4>)
    26f2:	1c22      	adds	r2, r4, #0
    26f4:	cb23      	ldmia	r3!, {r0, r1, r5}
    26f6:	c223      	stmia	r2!, {r0, r1, r5}
    26f8:	781b      	ldrb	r3, [r3, #0]
    26fa:	7013      	strb	r3, [r2, #0]
	volatile uint8_t rx_string[TEST_STRING_LEN] = "";
    26fc:	ae04      	add	r6, sp, #16
    26fe:	2500      	movs	r5, #0
    2700:	9504      	str	r5, [sp, #16]
    2702:	9505      	str	r5, [sp, #20]
    2704:	9506      	str	r5, [sp, #24]
    2706:	7335      	strb	r5, [r6, #12]
	int16_t result;

	/* We will read back the buffer using interrupt */
	usart_register_callback(&usart_rx_module, usart_callback,
    2708:	4f28      	ldr	r7, [pc, #160]	; (27ac <run_buffer_write_blocking_read_interrupt_test+0xc8>)
    270a:	1c38      	adds	r0, r7, #0
    270c:	4928      	ldr	r1, [pc, #160]	; (27b0 <run_buffer_write_blocking_read_interrupt_test+0xcc>)
    270e:	2201      	movs	r2, #1
    2710:	4b28      	ldr	r3, [pc, #160]	; (27b4 <run_buffer_write_blocking_read_interrupt_test+0xd0>)
    2712:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    2714:	2331      	movs	r3, #49	; 0x31
    2716:	5cf9      	ldrb	r1, [r7, r3]
    2718:	2202      	movs	r2, #2
    271a:	430a      	orrs	r2, r1
    271c:	54fa      	strb	r2, [r7, r3]
			USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&usart_rx_module, USART_CALLBACK_BUFFER_RECEIVED);

	/* Start receiving */
	transfer_complete = false;
    271e:	4b26      	ldr	r3, [pc, #152]	; (27b8 <run_buffer_write_blocking_read_interrupt_test+0xd4>)
    2720:	701d      	strb	r5, [r3, #0]
	usart_read_buffer_job(&usart_rx_module, (uint8_t*)rx_string,
    2722:	1c38      	adds	r0, r7, #0
    2724:	1c31      	adds	r1, r6, #0
    2726:	220d      	movs	r2, #13
    2728:	4b24      	ldr	r3, [pc, #144]	; (27bc <run_buffer_write_blocking_read_interrupt_test+0xd8>)
    272a:	4798      	blx	r3
			TEST_STRING_LEN);

	/* Send the string */
	usart_write_buffer_wait(&usart_tx_module, tx_string,
    272c:	4824      	ldr	r0, [pc, #144]	; (27c0 <run_buffer_write_blocking_read_interrupt_test+0xdc>)
    272e:	1c21      	adds	r1, r4, #0
    2730:	220d      	movs	r2, #13
    2732:	4b24      	ldr	r3, [pc, #144]	; (27c4 <run_buffer_write_blocking_read_interrupt_test+0xe0>)
    2734:	4798      	blx	r3
			TEST_STRING_LEN );

	uint16_t timeout_cycles = 0xFFFF;
    2736:	4b24      	ldr	r3, [pc, #144]	; (27c8 <run_buffer_write_blocking_read_interrupt_test+0xe4>)

	/* Wait until reception completes */
	do {
		timeout_cycles--;
		if (transfer_complete) {
    2738:	491f      	ldr	r1, [pc, #124]	; (27b8 <run_buffer_write_blocking_read_interrupt_test+0xd4>)

	uint16_t timeout_cycles = 0xFFFF;

	/* Wait until reception completes */
	do {
		timeout_cycles--;
    273a:	3b01      	subs	r3, #1
    273c:	b29b      	uxth	r3, r3
		if (transfer_complete) {
    273e:	780a      	ldrb	r2, [r1, #0]
    2740:	2a00      	cmp	r2, #0
    2742:	d102      	bne.n	274a <run_buffer_write_blocking_read_interrupt_test+0x66>
			break;
		}
	} while (timeout_cycles != 0);
    2744:	2b00      	cmp	r3, #0
    2746:	d1f8      	bne.n	273a <run_buffer_write_blocking_read_interrupt_test+0x56>
    2748:	e001      	b.n	274e <run_buffer_write_blocking_read_interrupt_test+0x6a>

	test_assert_true(test, timeout_cycles > 0,
    274a:	2b00      	cmp	r3, #0
    274c:	d108      	bne.n	2760 <run_buffer_write_blocking_read_interrupt_test+0x7c>
    274e:	4b1f      	ldr	r3, [pc, #124]	; (27cc <run_buffer_write_blocking_read_interrupt_test+0xe8>)
    2750:	9300      	str	r3, [sp, #0]
    2752:	4640      	mov	r0, r8
    2754:	2101      	movs	r1, #1
    2756:	4a1e      	ldr	r2, [pc, #120]	; (27d0 <run_buffer_write_blocking_read_interrupt_test+0xec>)
    2758:	2390      	movs	r3, #144	; 0x90
    275a:	005b      	lsls	r3, r3, #1
    275c:	4c1d      	ldr	r4, [pc, #116]	; (27d4 <run_buffer_write_blocking_read_interrupt_test+0xf0>)
    275e:	47a0      	blx	r4
{
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
    2760:	4812      	ldr	r0, [pc, #72]	; (27ac <run_buffer_write_blocking_read_interrupt_test+0xc8>)
    2762:	2331      	movs	r3, #49	; 0x31
    2764:	5cc2      	ldrb	r2, [r0, r3]
    2766:	2102      	movs	r1, #2
    2768:	438a      	bics	r2, r1
    276a:	54c2      	strb	r2, [r0, r3]
			"Timeout in reception");

	usart_disable_callback(&usart_rx_module, USART_CALLBACK_BUFFER_RECEIVED);
	usart_unregister_callback(&usart_rx_module, USART_CALLBACK_BUFFER_RECEIVED);
    276c:	2101      	movs	r1, #1
    276e:	4b1a      	ldr	r3, [pc, #104]	; (27d8 <run_buffer_write_blocking_read_interrupt_test+0xf4>)
    2770:	4798      	blx	r3

	/* Compare strings */
	result = strcmp((char*)tx_string, (char*)rx_string);
    2772:	ac04      	add	r4, sp, #16
    2774:	a808      	add	r0, sp, #32
    2776:	1c21      	adds	r1, r4, #0
    2778:	4b18      	ldr	r3, [pc, #96]	; (27dc <run_buffer_write_blocking_read_interrupt_test+0xf8>)
    277a:	4798      	blx	r3

	/* Make sure we 0-terminate the received string in case it's
		gibberish and we have to print it */
	rx_string[TEST_STRING_LEN-1] = 0;
    277c:	2300      	movs	r3, #0
    277e:	7323      	strb	r3, [r4, #12]

	test_assert_false(test, result,
    2780:	b200      	sxth	r0, r0
    2782:	2800      	cmp	r0, #0
    2784:	d00c      	beq.n	27a0 <run_buffer_write_blocking_read_interrupt_test+0xbc>
    2786:	4b16      	ldr	r3, [pc, #88]	; (27e0 <run_buffer_write_blocking_read_interrupt_test+0xfc>)
    2788:	9300      	str	r3, [sp, #0]
    278a:	ab08      	add	r3, sp, #32
    278c:	9301      	str	r3, [sp, #4]
    278e:	ab04      	add	r3, sp, #16
    2790:	9302      	str	r3, [sp, #8]
    2792:	4640      	mov	r0, r8
    2794:	2101      	movs	r1, #1
    2796:	4a0e      	ldr	r2, [pc, #56]	; (27d0 <run_buffer_write_blocking_read_interrupt_test+0xec>)
    2798:	232e      	movs	r3, #46	; 0x2e
    279a:	33ff      	adds	r3, #255	; 0xff
    279c:	4c0d      	ldr	r4, [pc, #52]	; (27d4 <run_buffer_write_blocking_read_interrupt_test+0xf0>)
    279e:	47a0      	blx	r4
			"Failed receiving string. TX='%s', RX='%s'", tx_string, rx_string);
}
    27a0:	b00c      	add	sp, #48	; 0x30
    27a2:	bc04      	pop	{r2}
    27a4:	4690      	mov	r8, r2
    27a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27a8:	00004960 	.word	0x00004960
    27ac:	20000154 	.word	0x20000154
    27b0:	00002625 	.word	0x00002625
    27b4:	000017b9 	.word	0x000017b9
    27b8:	20000188 	.word	0x20000188
    27bc:	00001999 	.word	0x00001999
    27c0:	20000200 	.word	0x20000200
    27c4:	00001441 	.word	0x00001441
    27c8:	0000ffff 	.word	0x0000ffff
    27cc:	0000491c 	.word	0x0000491c
    27d0:	00004908 	.word	0x00004908
    27d4:	0000020d 	.word	0x0000020d
    27d8:	00001861 	.word	0x00001861
    27dc:	0000362d 	.word	0x0000362d
    27e0:	00004934 	.word	0x00004934

000027e4 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    27e4:	b570      	push	{r4, r5, r6, lr}
    27e6:	1c06      	adds	r6, r0, #0
    27e8:	1c0d      	adds	r5, r1, #0
	while(STATUS_OK !=usart_write_wait(module, c));
    27ea:	4c03      	ldr	r4, [pc, #12]	; (27f8 <usart_serial_putchar+0x14>)
    27ec:	1c30      	adds	r0, r6, #0
    27ee:	1c29      	adds	r1, r5, #0
    27f0:	47a0      	blx	r4
    27f2:	2800      	cmp	r0, #0
    27f4:	d1fa      	bne.n	27ec <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    27f6:	bd70      	pop	{r4, r5, r6, pc}
    27f8:	000010f9 	.word	0x000010f9

000027fc <run_transfer_single_8bit_char_test>:
 * on the other end.
 *
 * \param test Current test case.
 */
static void run_transfer_single_8bit_char_test(const struct test_case *test)
{
    27fc:	b530      	push	{r4, r5, lr}
    27fe:	b087      	sub	sp, #28
    2800:	1c05      	adds	r5, r0, #0
	uint16_t tx_char = 0x53;
	volatile uint16_t rx_char = 0;
    2802:	466c      	mov	r4, sp
    2804:	2300      	movs	r3, #0
    2806:	82e3      	strh	r3, [r4, #22]
    2808:	3416      	adds	r4, #22

	/* Write and read the data */
	usart_write_wait(&usart_tx_module, tx_char);
    280a:	480e      	ldr	r0, [pc, #56]	; (2844 <run_transfer_single_8bit_char_test+0x48>)
    280c:	2153      	movs	r1, #83	; 0x53
    280e:	4b0e      	ldr	r3, [pc, #56]	; (2848 <run_transfer_single_8bit_char_test+0x4c>)
    2810:	4798      	blx	r3
	usart_read_wait(&usart_rx_module, (uint16_t*)&rx_char);
    2812:	480e      	ldr	r0, [pc, #56]	; (284c <run_transfer_single_8bit_char_test+0x50>)
    2814:	1c21      	adds	r1, r4, #0
    2816:	4b0e      	ldr	r3, [pc, #56]	; (2850 <run_transfer_single_8bit_char_test+0x54>)
    2818:	4798      	blx	r3

	/* Make sure we received what we sent */
	test_assert_true(test, tx_char==rx_char,
    281a:	8823      	ldrh	r3, [r4, #0]
    281c:	b29b      	uxth	r3, r3
    281e:	2b53      	cmp	r3, #83	; 0x53
    2820:	d00d      	beq.n	283e <run_transfer_single_8bit_char_test+0x42>
    2822:	466b      	mov	r3, sp
    2824:	3316      	adds	r3, #22
    2826:	881b      	ldrh	r3, [r3, #0]
    2828:	4a0a      	ldr	r2, [pc, #40]	; (2854 <run_transfer_single_8bit_char_test+0x58>)
    282a:	9200      	str	r2, [sp, #0]
    282c:	2253      	movs	r2, #83	; 0x53
    282e:	9201      	str	r2, [sp, #4]
    2830:	9302      	str	r3, [sp, #8]
    2832:	1c28      	adds	r0, r5, #0
    2834:	2101      	movs	r1, #1
    2836:	4a08      	ldr	r2, [pc, #32]	; (2858 <run_transfer_single_8bit_char_test+0x5c>)
    2838:	23c4      	movs	r3, #196	; 0xc4
    283a:	4c08      	ldr	r4, [pc, #32]	; (285c <run_transfer_single_8bit_char_test+0x60>)
    283c:	47a0      	blx	r4
			"Failed receiving sent byte. TX=%d, RX=%d", tx_char, rx_char);

}
    283e:	b007      	add	sp, #28
    2840:	bd30      	pop	{r4, r5, pc}
    2842:	46c0      	nop			; (mov r8, r8)
    2844:	20000200 	.word	0x20000200
    2848:	000010f9 	.word	0x000010f9
    284c:	20000154 	.word	0x20000154
    2850:	00001275 	.word	0x00001275
    2854:	00004970 	.word	0x00004970
    2858:	00004908 	.word	0x00004908
    285c:	0000020d 	.word	0x0000020d

00002860 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    2860:	b570      	push	{r4, r5, r6, lr}
    2862:	b082      	sub	sp, #8
    2864:	1c05      	adds	r5, r0, #0
    2866:	1c0e      	adds	r6, r1, #0
	uint16_t temp = 0;
    2868:	2200      	movs	r2, #0
    286a:	466b      	mov	r3, sp
    286c:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    286e:	4c06      	ldr	r4, [pc, #24]	; (2888 <usart_serial_getchar+0x28>)
    2870:	1c28      	adds	r0, r5, #0
    2872:	4669      	mov	r1, sp
    2874:	3106      	adds	r1, #6
    2876:	47a0      	blx	r4
    2878:	2800      	cmp	r0, #0
    287a:	d1f9      	bne.n	2870 <usart_serial_getchar+0x10>

	*c = temp;
    287c:	466b      	mov	r3, sp
    287e:	3306      	adds	r3, #6
    2880:	881b      	ldrh	r3, [r3, #0]
    2882:	7033      	strb	r3, [r6, #0]
}
    2884:	b002      	add	sp, #8
    2886:	bd70      	pop	{r4, r5, r6, pc}
    2888:	00001275 	.word	0x00001275

0000288c <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    288c:	b5f0      	push	{r4, r5, r6, r7, lr}
    288e:	b083      	sub	sp, #12
    2890:	1c04      	adds	r4, r0, #0
    2892:	4b4b      	ldr	r3, [pc, #300]	; (29c0 <usart_enable+0x134>)
    2894:	6818      	ldr	r0, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
    2896:	2800      	cmp	r0, #0
    2898:	d00f      	beq.n	28ba <usart_enable+0x2e>
    289a:	2c00      	cmp	r4, #0
    289c:	d116      	bne.n	28cc <usart_enable+0x40>
    289e:	4b49      	ldr	r3, [pc, #292]	; (29c4 <usart_enable+0x138>)
    28a0:	9300      	str	r3, [sp, #0]
    28a2:	4b49      	ldr	r3, [pc, #292]	; (29c8 <usart_enable+0x13c>)
    28a4:	9301      	str	r3, [sp, #4]
    28a6:	2101      	movs	r1, #1
    28a8:	4a48      	ldr	r2, [pc, #288]	; (29cc <usart_enable+0x140>)
    28aa:	4b49      	ldr	r3, [pc, #292]	; (29d0 <usart_enable+0x144>)
    28ac:	4d49      	ldr	r5, [pc, #292]	; (29d4 <usart_enable+0x148>)
    28ae:	47a8      	blx	r5
    28b0:	4b43      	ldr	r3, [pc, #268]	; (29c0 <usart_enable+0x134>)
    28b2:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    28b4:	2800      	cmp	r0, #0
    28b6:	d017      	beq.n	28e8 <usart_enable+0x5c>
    28b8:	e008      	b.n	28cc <usart_enable+0x40>
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
	/* Sanity check arguments */
	Assert(module);
    28ba:	2c00      	cmp	r4, #0
    28bc:	d114      	bne.n	28e8 <usart_enable+0x5c>
    28be:	4846      	ldr	r0, [pc, #280]	; (29d8 <usart_enable+0x14c>)
    28c0:	4941      	ldr	r1, [pc, #260]	; (29c8 <usart_enable+0x13c>)
    28c2:	4a42      	ldr	r2, [pc, #264]	; (29cc <usart_enable+0x140>)
    28c4:	4b42      	ldr	r3, [pc, #264]	; (29d0 <usart_enable+0x144>)
    28c6:	4c45      	ldr	r4, [pc, #276]	; (29dc <usart_enable+0x150>)
    28c8:	47a0      	blx	r4
    28ca:	e7fe      	b.n	28ca <usart_enable+0x3e>
	Assert(module->hw);
    28cc:	6823      	ldr	r3, [r4, #0]
    28ce:	2b00      	cmp	r3, #0
    28d0:	d115      	bne.n	28fe <usart_enable+0x72>
    28d2:	4b3c      	ldr	r3, [pc, #240]	; (29c4 <usart_enable+0x138>)
    28d4:	9300      	str	r3, [sp, #0]
    28d6:	4b42      	ldr	r3, [pc, #264]	; (29e0 <usart_enable+0x154>)
    28d8:	9301      	str	r3, [sp, #4]
    28da:	2101      	movs	r1, #1
    28dc:	4a3b      	ldr	r2, [pc, #236]	; (29cc <usart_enable+0x140>)
    28de:	23d6      	movs	r3, #214	; 0xd6
    28e0:	009b      	lsls	r3, r3, #2
    28e2:	4d3c      	ldr	r5, [pc, #240]	; (29d4 <usart_enable+0x148>)
    28e4:	47a8      	blx	r5
    28e6:	e00a      	b.n	28fe <usart_enable+0x72>
    28e8:	6823      	ldr	r3, [r4, #0]
    28ea:	2b00      	cmp	r3, #0
    28ec:	d107      	bne.n	28fe <usart_enable+0x72>
    28ee:	483a      	ldr	r0, [pc, #232]	; (29d8 <usart_enable+0x14c>)
    28f0:	493b      	ldr	r1, [pc, #236]	; (29e0 <usart_enable+0x154>)
    28f2:	4a36      	ldr	r2, [pc, #216]	; (29cc <usart_enable+0x140>)
    28f4:	23d6      	movs	r3, #214	; 0xd6
    28f6:	009b      	lsls	r3, r3, #2
    28f8:	4c38      	ldr	r4, [pc, #224]	; (29dc <usart_enable+0x150>)
    28fa:	47a0      	blx	r4
    28fc:	e7fe      	b.n	28fc <usart_enable+0x70>

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    28fe:	6826      	ldr	r6, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2900:	1c30      	adds	r0, r6, #0
    2902:	4b38      	ldr	r3, [pc, #224]	; (29e4 <usart_enable+0x158>)
    2904:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2906:	221f      	movs	r2, #31
    2908:	4010      	ands	r0, r2
    290a:	2201      	movs	r2, #1
    290c:	4082      	lsls	r2, r0
    290e:	4b36      	ldr	r3, [pc, #216]	; (29e8 <usart_enable+0x15c>)
    2910:	601a      	str	r2, [r3, #0]
    2912:	4b2b      	ldr	r3, [pc, #172]	; (29c0 <usart_enable+0x134>)
    2914:	6818      	ldr	r0, [r3, #0]
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);
    2916:	2800      	cmp	r0, #0
    2918:	d00b      	beq.n	2932 <usart_enable+0xa6>
    291a:	2c00      	cmp	r4, #0
    291c:	d112      	bne.n	2944 <usart_enable+0xb8>
    291e:	4b29      	ldr	r3, [pc, #164]	; (29c4 <usart_enable+0x138>)
    2920:	9300      	str	r3, [sp, #0]
    2922:	4b29      	ldr	r3, [pc, #164]	; (29c8 <usart_enable+0x13c>)
    2924:	9301      	str	r3, [sp, #4]
    2926:	2101      	movs	r1, #1
    2928:	4a28      	ldr	r2, [pc, #160]	; (29cc <usart_enable+0x140>)
    292a:	4b30      	ldr	r3, [pc, #192]	; (29ec <usart_enable+0x160>)
    292c:	4d29      	ldr	r5, [pc, #164]	; (29d4 <usart_enable+0x148>)
    292e:	47a8      	blx	r5
    2930:	e008      	b.n	2944 <usart_enable+0xb8>
    2932:	2c00      	cmp	r4, #0
    2934:	d106      	bne.n	2944 <usart_enable+0xb8>
    2936:	4828      	ldr	r0, [pc, #160]	; (29d8 <usart_enable+0x14c>)
    2938:	4923      	ldr	r1, [pc, #140]	; (29c8 <usart_enable+0x13c>)
    293a:	4a24      	ldr	r2, [pc, #144]	; (29cc <usart_enable+0x140>)
    293c:	4b2b      	ldr	r3, [pc, #172]	; (29ec <usart_enable+0x160>)
    293e:	4c27      	ldr	r4, [pc, #156]	; (29dc <usart_enable+0x150>)
    2940:	47a0      	blx	r4
    2942:	e7fe      	b.n	2942 <usart_enable+0xb6>
    2944:	4d1e      	ldr	r5, [pc, #120]	; (29c0 <usart_enable+0x134>)
    2946:	6828      	ldr	r0, [r5, #0]
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
	/* Sanity check arguments */
	Assert(module);
    2948:	2800      	cmp	r0, #0
    294a:	d00f      	beq.n	296c <usart_enable+0xe0>
    294c:	2c00      	cmp	r4, #0
    294e:	d116      	bne.n	297e <usart_enable+0xf2>
    2950:	4b1c      	ldr	r3, [pc, #112]	; (29c4 <usart_enable+0x138>)
    2952:	9300      	str	r3, [sp, #0]
    2954:	4b1c      	ldr	r3, [pc, #112]	; (29c8 <usart_enable+0x13c>)
    2956:	9301      	str	r3, [sp, #4]
    2958:	2101      	movs	r1, #1
    295a:	4a1c      	ldr	r2, [pc, #112]	; (29cc <usart_enable+0x140>)
    295c:	4b24      	ldr	r3, [pc, #144]	; (29f0 <usart_enable+0x164>)
    295e:	4f1d      	ldr	r7, [pc, #116]	; (29d4 <usart_enable+0x148>)
    2960:	47b8      	blx	r7
    2962:	4b17      	ldr	r3, [pc, #92]	; (29c0 <usart_enable+0x134>)
    2964:	6818      	ldr	r0, [r3, #0]
	Assert(module->hw);
    2966:	2800      	cmp	r0, #0
    2968:	d109      	bne.n	297e <usart_enable+0xf2>
    296a:	e015      	b.n	2998 <usart_enable+0x10c>
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
	/* Sanity check arguments */
	Assert(module);
    296c:	2c00      	cmp	r4, #0
    296e:	d113      	bne.n	2998 <usart_enable+0x10c>
    2970:	4819      	ldr	r0, [pc, #100]	; (29d8 <usart_enable+0x14c>)
    2972:	4915      	ldr	r1, [pc, #84]	; (29c8 <usart_enable+0x13c>)
    2974:	4a15      	ldr	r2, [pc, #84]	; (29cc <usart_enable+0x140>)
    2976:	4b1e      	ldr	r3, [pc, #120]	; (29f0 <usart_enable+0x164>)
    2978:	4c18      	ldr	r4, [pc, #96]	; (29dc <usart_enable+0x150>)
    297a:	47a0      	blx	r4
    297c:	e7fe      	b.n	297c <usart_enable+0xf0>
	Assert(module->hw);
    297e:	6823      	ldr	r3, [r4, #0]
    2980:	2b00      	cmp	r3, #0
    2982:	d113      	bne.n	29ac <usart_enable+0x120>
    2984:	4b0f      	ldr	r3, [pc, #60]	; (29c4 <usart_enable+0x138>)
    2986:	9300      	str	r3, [sp, #0]
    2988:	4b15      	ldr	r3, [pc, #84]	; (29e0 <usart_enable+0x154>)
    298a:	9301      	str	r3, [sp, #4]
    298c:	2101      	movs	r1, #1
    298e:	4a0f      	ldr	r2, [pc, #60]	; (29cc <usart_enable+0x140>)
    2990:	4b18      	ldr	r3, [pc, #96]	; (29f4 <usart_enable+0x168>)
    2992:	4f10      	ldr	r7, [pc, #64]	; (29d4 <usart_enable+0x148>)
    2994:	47b8      	blx	r7
    2996:	e009      	b.n	29ac <usart_enable+0x120>
    2998:	6823      	ldr	r3, [r4, #0]
    299a:	2b00      	cmp	r3, #0
    299c:	d106      	bne.n	29ac <usart_enable+0x120>
    299e:	480e      	ldr	r0, [pc, #56]	; (29d8 <usart_enable+0x14c>)
    29a0:	490f      	ldr	r1, [pc, #60]	; (29e0 <usart_enable+0x154>)
    29a2:	4a0a      	ldr	r2, [pc, #40]	; (29cc <usart_enable+0x140>)
    29a4:	4b13      	ldr	r3, [pc, #76]	; (29f4 <usart_enable+0x168>)
    29a6:	4c0d      	ldr	r4, [pc, #52]	; (29dc <usart_enable+0x150>)
    29a8:	47a0      	blx	r4
    29aa:	e7fe      	b.n	29aa <usart_enable+0x11e>

	SercomUsart *const usart_hw = &(module->hw->USART);
    29ac:	6823      	ldr	r3, [r4, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    29ae:	69db      	ldr	r3, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    29b0:	2b00      	cmp	r3, #0
    29b2:	d1c8      	bne.n	2946 <usart_enable+0xba>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    29b4:	6832      	ldr	r2, [r6, #0]
    29b6:	2302      	movs	r3, #2
    29b8:	4313      	orrs	r3, r2
    29ba:	6033      	str	r3, [r6, #0]
}
    29bc:	b003      	add	sp, #12
    29be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29c0:	2000008c 	.word	0x2000008c
    29c4:	00004444 	.word	0x00004444
    29c8:	0000468c 	.word	0x0000468c
    29cc:	000046a0 	.word	0x000046a0
    29d0:	00000357 	.word	0x00000357
    29d4:	0000020d 	.word	0x0000020d
    29d8:	00004484 	.word	0x00004484
    29dc:	000033cd 	.word	0x000033cd
    29e0:	00004694 	.word	0x00004694
    29e4:	000009d9 	.word	0x000009d9
    29e8:	e000e100 	.word	0xe000e100
    29ec:	000002fe 	.word	0x000002fe
    29f0:	000002e9 	.word	0x000002e9
    29f4:	000002ea 	.word	0x000002ea

000029f8 <run_buffer_read_write_interrupt_test>:
 * Both the send and receive is done using interrupts.
 *
 * \param test Current test case.
 */
static void run_buffer_read_write_interrupt_test(const struct test_case *test)
{
    29f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    29fa:	4647      	mov	r7, r8
    29fc:	b480      	push	{r7}
    29fe:	b08c      	sub	sp, #48	; 0x30
    2a00:	4680      	mov	r8, r0
	volatile uint8_t tx_string[TEST_STRING_LEN] = TEST_STRING;
    2a02:	ac08      	add	r4, sp, #32
    2a04:	4b29      	ldr	r3, [pc, #164]	; (2aac <run_buffer_read_write_interrupt_test+0xb4>)
    2a06:	1c22      	adds	r2, r4, #0
    2a08:	cb23      	ldmia	r3!, {r0, r1, r5}
    2a0a:	c223      	stmia	r2!, {r0, r1, r5}
    2a0c:	781b      	ldrb	r3, [r3, #0]
    2a0e:	7013      	strb	r3, [r2, #0]
	volatile uint8_t rx_string[TEST_STRING_LEN] = "";
    2a10:	ae04      	add	r6, sp, #16
    2a12:	2500      	movs	r5, #0
    2a14:	9504      	str	r5, [sp, #16]
    2a16:	9505      	str	r5, [sp, #20]
    2a18:	9506      	str	r5, [sp, #24]
    2a1a:	7335      	strb	r5, [r6, #12]
	int16_t result;

	usart_register_callback(&usart_rx_module, usart_callback,
    2a1c:	4f24      	ldr	r7, [pc, #144]	; (2ab0 <run_buffer_read_write_interrupt_test+0xb8>)
    2a1e:	1c38      	adds	r0, r7, #0
    2a20:	4924      	ldr	r1, [pc, #144]	; (2ab4 <run_buffer_read_write_interrupt_test+0xbc>)
    2a22:	2201      	movs	r2, #1
    2a24:	4b24      	ldr	r3, [pc, #144]	; (2ab8 <run_buffer_read_write_interrupt_test+0xc0>)
    2a26:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    2a28:	2331      	movs	r3, #49	; 0x31
    2a2a:	5cf9      	ldrb	r1, [r7, r3]
    2a2c:	2202      	movs	r2, #2
    2a2e:	430a      	orrs	r2, r1
    2a30:	54fa      	strb	r2, [r7, r3]
			USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&usart_rx_module, USART_CALLBACK_BUFFER_RECEIVED);

	/* start send */
	transfer_complete = false;
    2a32:	4b22      	ldr	r3, [pc, #136]	; (2abc <run_buffer_read_write_interrupt_test+0xc4>)
    2a34:	701d      	strb	r5, [r3, #0]

	usart_write_buffer_job(&usart_tx_module, (uint8_t*)tx_string,
    2a36:	4822      	ldr	r0, [pc, #136]	; (2ac0 <run_buffer_read_write_interrupt_test+0xc8>)
    2a38:	1c21      	adds	r1, r4, #0
    2a3a:	220d      	movs	r2, #13
    2a3c:	4b21      	ldr	r3, [pc, #132]	; (2ac4 <run_buffer_read_write_interrupt_test+0xcc>)
    2a3e:	4798      	blx	r3
			TEST_STRING_LEN);
	usart_read_buffer_job(&usart_rx_module, (uint8_t*)rx_string,
    2a40:	1c38      	adds	r0, r7, #0
    2a42:	1c31      	adds	r1, r6, #0
    2a44:	220d      	movs	r2, #13
    2a46:	4b20      	ldr	r3, [pc, #128]	; (2ac8 <run_buffer_read_write_interrupt_test+0xd0>)
    2a48:	4798      	blx	r3
			TEST_STRING_LEN);

	uint16_t timeout_cycles = 0xFFFF;
    2a4a:	4b20      	ldr	r3, [pc, #128]	; (2acc <run_buffer_read_write_interrupt_test+0xd4>)

	/* Wait until reception completes */
	do {
		timeout_cycles--;
		if (transfer_complete) {
    2a4c:	491b      	ldr	r1, [pc, #108]	; (2abc <run_buffer_read_write_interrupt_test+0xc4>)

	uint16_t timeout_cycles = 0xFFFF;

	/* Wait until reception completes */
	do {
		timeout_cycles--;
    2a4e:	3b01      	subs	r3, #1
    2a50:	b29b      	uxth	r3, r3
		if (transfer_complete) {
    2a52:	780a      	ldrb	r2, [r1, #0]
    2a54:	2a00      	cmp	r2, #0
    2a56:	d102      	bne.n	2a5e <run_buffer_read_write_interrupt_test+0x66>
			break;
		}
	} while (timeout_cycles != 0);
    2a58:	2b00      	cmp	r3, #0
    2a5a:	d1f8      	bne.n	2a4e <run_buffer_read_write_interrupt_test+0x56>
    2a5c:	e001      	b.n	2a62 <run_buffer_read_write_interrupt_test+0x6a>

	test_assert_true(test, timeout_cycles > 0,
    2a5e:	2b00      	cmp	r3, #0
    2a60:	d108      	bne.n	2a74 <run_buffer_read_write_interrupt_test+0x7c>
    2a62:	4b1b      	ldr	r3, [pc, #108]	; (2ad0 <run_buffer_read_write_interrupt_test+0xd8>)
    2a64:	9300      	str	r3, [sp, #0]
    2a66:	4640      	mov	r0, r8
    2a68:	2101      	movs	r1, #1
    2a6a:	4a1a      	ldr	r2, [pc, #104]	; (2ad4 <run_buffer_read_write_interrupt_test+0xdc>)
    2a6c:	23ab      	movs	r3, #171	; 0xab
    2a6e:	005b      	lsls	r3, r3, #1
    2a70:	4c19      	ldr	r4, [pc, #100]	; (2ad8 <run_buffer_read_write_interrupt_test+0xe0>)
    2a72:	47a0      	blx	r4
			"Timeout in send/receive");

	/* Compare strings */
	result = strcmp((char*)tx_string, (char*)rx_string);
    2a74:	ac04      	add	r4, sp, #16
    2a76:	a808      	add	r0, sp, #32
    2a78:	1c21      	adds	r1, r4, #0
    2a7a:	4b18      	ldr	r3, [pc, #96]	; (2adc <run_buffer_read_write_interrupt_test+0xe4>)
    2a7c:	4798      	blx	r3

	/* Make sure we 0-terminate the received string in case it's
		gibberish and we have to print it */
	rx_string[TEST_STRING_LEN-1] = 0;
    2a7e:	2300      	movs	r3, #0
    2a80:	7323      	strb	r3, [r4, #12]

	test_assert_false(test, result,
    2a82:	b200      	sxth	r0, r0
    2a84:	2800      	cmp	r0, #0
    2a86:	d00c      	beq.n	2aa2 <run_buffer_read_write_interrupt_test+0xaa>
    2a88:	4b15      	ldr	r3, [pc, #84]	; (2ae0 <run_buffer_read_write_interrupt_test+0xe8>)
    2a8a:	9300      	str	r3, [sp, #0]
    2a8c:	ab08      	add	r3, sp, #32
    2a8e:	9301      	str	r3, [sp, #4]
    2a90:	ab04      	add	r3, sp, #16
    2a92:	9302      	str	r3, [sp, #8]
    2a94:	4640      	mov	r0, r8
    2a96:	2101      	movs	r1, #1
    2a98:	4a0e      	ldr	r2, [pc, #56]	; (2ad4 <run_buffer_read_write_interrupt_test+0xdc>)
    2a9a:	23b0      	movs	r3, #176	; 0xb0
    2a9c:	005b      	lsls	r3, r3, #1
    2a9e:	4c0e      	ldr	r4, [pc, #56]	; (2ad8 <run_buffer_read_write_interrupt_test+0xe0>)
    2aa0:	47a0      	blx	r4
			"Failed receiving string. TX='%s', RX='%s'", tx_string, rx_string);
}
    2aa2:	b00c      	add	sp, #48	; 0x30
    2aa4:	bc04      	pop	{r2}
    2aa6:	4690      	mov	r8, r2
    2aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2aaa:	46c0      	nop			; (mov r8, r8)
    2aac:	00004960 	.word	0x00004960
    2ab0:	20000154 	.word	0x20000154
    2ab4:	00002625 	.word	0x00002625
    2ab8:	000017b9 	.word	0x000017b9
    2abc:	20000188 	.word	0x20000188
    2ac0:	20000200 	.word	0x20000200
    2ac4:	000018d5 	.word	0x000018d5
    2ac8:	00001999 	.word	0x00001999
    2acc:	0000ffff 	.word	0x0000ffff
    2ad0:	0000499c 	.word	0x0000499c
    2ad4:	00004908 	.word	0x00004908
    2ad8:	0000020d 	.word	0x0000020d
    2adc:	0000362d 	.word	0x0000362d
    2ae0:	00004934 	.word	0x00004934

00002ae4 <run_transfer_single_9bit_char_test>:
 * on the other end.
 *
 * \param test Current test case.
 */
static void run_transfer_single_9bit_char_test(const struct test_case *test)
{
    2ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ae6:	464f      	mov	r7, r9
    2ae8:	4646      	mov	r6, r8
    2aea:	b4c0      	push	{r6, r7}
    2aec:	b087      	sub	sp, #28
    2aee:	4681      	mov	r9, r0
    2af0:	4bc4      	ldr	r3, [pc, #784]	; (2e04 <run_transfer_single_9bit_char_test+0x320>)
    2af2:	6818      	ldr	r0, [r3, #0]
static inline void usart_disable(
		const struct usart_module *const module)
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
    2af4:	2800      	cmp	r0, #0
    2af6:	d00d      	beq.n	2b14 <run_transfer_single_9bit_char_test+0x30>
    2af8:	4bc3      	ldr	r3, [pc, #780]	; (2e08 <run_transfer_single_9bit_char_test+0x324>)
    2afa:	681b      	ldr	r3, [r3, #0]
    2afc:	2b00      	cmp	r3, #0
    2afe:	d114      	bne.n	2b2a <run_transfer_single_9bit_char_test+0x46>
    2b00:	4bc2      	ldr	r3, [pc, #776]	; (2e0c <run_transfer_single_9bit_char_test+0x328>)
    2b02:	9300      	str	r3, [sp, #0]
    2b04:	4bc2      	ldr	r3, [pc, #776]	; (2e10 <run_transfer_single_9bit_char_test+0x32c>)
    2b06:	9301      	str	r3, [sp, #4]
    2b08:	2101      	movs	r1, #1
    2b0a:	4ac2      	ldr	r2, [pc, #776]	; (2e14 <run_transfer_single_9bit_char_test+0x330>)
    2b0c:	4bc2      	ldr	r3, [pc, #776]	; (2e18 <run_transfer_single_9bit_char_test+0x334>)
    2b0e:	4cc3      	ldr	r4, [pc, #780]	; (2e1c <run_transfer_single_9bit_char_test+0x338>)
    2b10:	47a0      	blx	r4
    2b12:	e00a      	b.n	2b2a <run_transfer_single_9bit_char_test+0x46>
    2b14:	4bbc      	ldr	r3, [pc, #752]	; (2e08 <run_transfer_single_9bit_char_test+0x324>)
    2b16:	681b      	ldr	r3, [r3, #0]
    2b18:	2b00      	cmp	r3, #0
    2b1a:	d106      	bne.n	2b2a <run_transfer_single_9bit_char_test+0x46>
    2b1c:	48c0      	ldr	r0, [pc, #768]	; (2e20 <run_transfer_single_9bit_char_test+0x33c>)
    2b1e:	49bc      	ldr	r1, [pc, #752]	; (2e10 <run_transfer_single_9bit_char_test+0x32c>)
    2b20:	4abc      	ldr	r2, [pc, #752]	; (2e14 <run_transfer_single_9bit_char_test+0x330>)
    2b22:	4bbd      	ldr	r3, [pc, #756]	; (2e18 <run_transfer_single_9bit_char_test+0x334>)
    2b24:	4cbf      	ldr	r4, [pc, #764]	; (2e24 <run_transfer_single_9bit_char_test+0x340>)
    2b26:	47a0      	blx	r4
    2b28:	e7fe      	b.n	2b28 <run_transfer_single_9bit_char_test+0x44>

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2b2a:	4bb7      	ldr	r3, [pc, #732]	; (2e08 <run_transfer_single_9bit_char_test+0x324>)
    2b2c:	681e      	ldr	r6, [r3, #0]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    2b2e:	1c30      	adds	r0, r6, #0
    2b30:	4bbd      	ldr	r3, [pc, #756]	; (2e28 <run_transfer_single_9bit_char_test+0x344>)
    2b32:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2b34:	211f      	movs	r1, #31
    2b36:	4008      	ands	r0, r1
    2b38:	2101      	movs	r1, #1
    2b3a:	4081      	lsls	r1, r0
    2b3c:	2380      	movs	r3, #128	; 0x80
    2b3e:	4abb      	ldr	r2, [pc, #748]	; (2e2c <run_transfer_single_9bit_char_test+0x348>)
    2b40:	50d1      	str	r1, [r2, r3]
    2b42:	4cb0      	ldr	r4, [pc, #704]	; (2e04 <run_transfer_single_9bit_char_test+0x320>)
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
    2b44:	4ab0      	ldr	r2, [pc, #704]	; (2e08 <run_transfer_single_9bit_char_test+0x324>)
    2b46:	4690      	mov	r8, r2
    2b48:	1c15      	adds	r5, r2, #0
    2b4a:	6820      	ldr	r0, [r4, #0]
    2b4c:	2800      	cmp	r0, #0
    2b4e:	d00c      	beq.n	2b6a <run_transfer_single_9bit_char_test+0x86>
    2b50:	682b      	ldr	r3, [r5, #0]
    2b52:	2b00      	cmp	r3, #0
    2b54:	d114      	bne.n	2b80 <run_transfer_single_9bit_char_test+0x9c>
    2b56:	4aad      	ldr	r2, [pc, #692]	; (2e0c <run_transfer_single_9bit_char_test+0x328>)
    2b58:	9200      	str	r2, [sp, #0]
    2b5a:	4aad      	ldr	r2, [pc, #692]	; (2e10 <run_transfer_single_9bit_char_test+0x32c>)
    2b5c:	9201      	str	r2, [sp, #4]
    2b5e:	2101      	movs	r1, #1
    2b60:	4aac      	ldr	r2, [pc, #688]	; (2e14 <run_transfer_single_9bit_char_test+0x330>)
    2b62:	4bb3      	ldr	r3, [pc, #716]	; (2e30 <run_transfer_single_9bit_char_test+0x34c>)
    2b64:	4fad      	ldr	r7, [pc, #692]	; (2e1c <run_transfer_single_9bit_char_test+0x338>)
    2b66:	47b8      	blx	r7
    2b68:	e00a      	b.n	2b80 <run_transfer_single_9bit_char_test+0x9c>
    2b6a:	4642      	mov	r2, r8
    2b6c:	6812      	ldr	r2, [r2, #0]
    2b6e:	2a00      	cmp	r2, #0
    2b70:	d106      	bne.n	2b80 <run_transfer_single_9bit_char_test+0x9c>
    2b72:	48ab      	ldr	r0, [pc, #684]	; (2e20 <run_transfer_single_9bit_char_test+0x33c>)
    2b74:	49a6      	ldr	r1, [pc, #664]	; (2e10 <run_transfer_single_9bit_char_test+0x32c>)
    2b76:	4aa7      	ldr	r2, [pc, #668]	; (2e14 <run_transfer_single_9bit_char_test+0x330>)
    2b78:	4bad      	ldr	r3, [pc, #692]	; (2e30 <run_transfer_single_9bit_char_test+0x34c>)
    2b7a:	4caa      	ldr	r4, [pc, #680]	; (2e24 <run_transfer_single_9bit_char_test+0x340>)
    2b7c:	47a0      	blx	r4
    2b7e:	e7fe      	b.n	2b7e <run_transfer_single_9bit_char_test+0x9a>

	SercomUsart *const usart_hw = &(module->hw->USART);
    2b80:	4ba1      	ldr	r3, [pc, #644]	; (2e08 <run_transfer_single_9bit_char_test+0x324>)
    2b82:	681b      	ldr	r3, [r3, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2b84:	69db      	ldr	r3, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    2b86:	2b00      	cmp	r3, #0
    2b88:	d1df      	bne.n	2b4a <run_transfer_single_9bit_char_test+0x66>
#endif
	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    2b8a:	6833      	ldr	r3, [r6, #0]
    2b8c:	2202      	movs	r2, #2
    2b8e:	4393      	bics	r3, r2
    2b90:	6033      	str	r3, [r6, #0]
	uint16_t tx_char = 0x166;
	uint16_t rx_char;

	/* Re-configure RX USART to operate with 9 bit character size */
	usart_disable(&usart_rx_module);
	usart_rx_config.character_size = USART_CHARACTER_SIZE_9BIT;
    2b92:	4aa8      	ldr	r2, [pc, #672]	; (2e34 <run_transfer_single_9bit_char_test+0x350>)
    2b94:	2301      	movs	r3, #1
    2b96:	72d3      	strb	r3, [r2, #11]
	usart_init(&usart_rx_module, CONF_RX_USART,	&usart_rx_config);
    2b98:	489b      	ldr	r0, [pc, #620]	; (2e08 <run_transfer_single_9bit_char_test+0x324>)
    2b9a:	49a7      	ldr	r1, [pc, #668]	; (2e38 <run_transfer_single_9bit_char_test+0x354>)
    2b9c:	4ba7      	ldr	r3, [pc, #668]	; (2e3c <run_transfer_single_9bit_char_test+0x358>)
    2b9e:	4798      	blx	r3
    2ba0:	4b98      	ldr	r3, [pc, #608]	; (2e04 <run_transfer_single_9bit_char_test+0x320>)
    2ba2:	6818      	ldr	r0, [r3, #0]
static inline void usart_enable(
		const struct usart_module *const module)
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
    2ba4:	2800      	cmp	r0, #0
    2ba6:	d00e      	beq.n	2bc6 <run_transfer_single_9bit_char_test+0xe2>
    2ba8:	4b97      	ldr	r3, [pc, #604]	; (2e08 <run_transfer_single_9bit_char_test+0x324>)
    2baa:	681b      	ldr	r3, [r3, #0]
    2bac:	2b00      	cmp	r3, #0
    2bae:	d116      	bne.n	2bde <run_transfer_single_9bit_char_test+0xfa>
    2bb0:	4b96      	ldr	r3, [pc, #600]	; (2e0c <run_transfer_single_9bit_char_test+0x328>)
    2bb2:	9300      	str	r3, [sp, #0]
    2bb4:	4b96      	ldr	r3, [pc, #600]	; (2e10 <run_transfer_single_9bit_char_test+0x32c>)
    2bb6:	9301      	str	r3, [sp, #4]
    2bb8:	2101      	movs	r1, #1
    2bba:	4a96      	ldr	r2, [pc, #600]	; (2e14 <run_transfer_single_9bit_char_test+0x330>)
    2bbc:	23d6      	movs	r3, #214	; 0xd6
    2bbe:	009b      	lsls	r3, r3, #2
    2bc0:	4c96      	ldr	r4, [pc, #600]	; (2e1c <run_transfer_single_9bit_char_test+0x338>)
    2bc2:	47a0      	blx	r4
    2bc4:	e00b      	b.n	2bde <run_transfer_single_9bit_char_test+0xfa>
    2bc6:	4b90      	ldr	r3, [pc, #576]	; (2e08 <run_transfer_single_9bit_char_test+0x324>)
    2bc8:	681b      	ldr	r3, [r3, #0]
    2bca:	2b00      	cmp	r3, #0
    2bcc:	d107      	bne.n	2bde <run_transfer_single_9bit_char_test+0xfa>
    2bce:	4894      	ldr	r0, [pc, #592]	; (2e20 <run_transfer_single_9bit_char_test+0x33c>)
    2bd0:	498f      	ldr	r1, [pc, #572]	; (2e10 <run_transfer_single_9bit_char_test+0x32c>)
    2bd2:	4a90      	ldr	r2, [pc, #576]	; (2e14 <run_transfer_single_9bit_char_test+0x330>)
    2bd4:	23d6      	movs	r3, #214	; 0xd6
    2bd6:	009b      	lsls	r3, r3, #2
    2bd8:	4c92      	ldr	r4, [pc, #584]	; (2e24 <run_transfer_single_9bit_char_test+0x340>)
    2bda:	47a0      	blx	r4
    2bdc:	e7fe      	b.n	2bdc <run_transfer_single_9bit_char_test+0xf8>

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2bde:	4b8a      	ldr	r3, [pc, #552]	; (2e08 <run_transfer_single_9bit_char_test+0x324>)
    2be0:	681e      	ldr	r6, [r3, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2be2:	1c30      	adds	r0, r6, #0
    2be4:	4b90      	ldr	r3, [pc, #576]	; (2e28 <run_transfer_single_9bit_char_test+0x344>)
    2be6:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2be8:	221f      	movs	r2, #31
    2bea:	4010      	ands	r0, r2
    2bec:	2201      	movs	r2, #1
    2bee:	4082      	lsls	r2, r0
    2bf0:	4b8e      	ldr	r3, [pc, #568]	; (2e2c <run_transfer_single_9bit_char_test+0x348>)
    2bf2:	601a      	str	r2, [r3, #0]
    2bf4:	4c83      	ldr	r4, [pc, #524]	; (2e04 <run_transfer_single_9bit_char_test+0x320>)
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
    2bf6:	4b84      	ldr	r3, [pc, #528]	; (2e08 <run_transfer_single_9bit_char_test+0x324>)
    2bf8:	4698      	mov	r8, r3
    2bfa:	1c1d      	adds	r5, r3, #0
    2bfc:	6820      	ldr	r0, [r4, #0]
    2bfe:	2800      	cmp	r0, #0
    2c00:	d00c      	beq.n	2c1c <run_transfer_single_9bit_char_test+0x138>
    2c02:	682f      	ldr	r7, [r5, #0]
    2c04:	2f00      	cmp	r7, #0
    2c06:	d114      	bne.n	2c32 <run_transfer_single_9bit_char_test+0x14e>
    2c08:	4b80      	ldr	r3, [pc, #512]	; (2e0c <run_transfer_single_9bit_char_test+0x328>)
    2c0a:	9300      	str	r3, [sp, #0]
    2c0c:	4b80      	ldr	r3, [pc, #512]	; (2e10 <run_transfer_single_9bit_char_test+0x32c>)
    2c0e:	9301      	str	r3, [sp, #4]
    2c10:	2101      	movs	r1, #1
    2c12:	4a80      	ldr	r2, [pc, #512]	; (2e14 <run_transfer_single_9bit_char_test+0x330>)
    2c14:	4b86      	ldr	r3, [pc, #536]	; (2e30 <run_transfer_single_9bit_char_test+0x34c>)
    2c16:	4f81      	ldr	r7, [pc, #516]	; (2e1c <run_transfer_single_9bit_char_test+0x338>)
    2c18:	47b8      	blx	r7
    2c1a:	e00a      	b.n	2c32 <run_transfer_single_9bit_char_test+0x14e>
    2c1c:	4642      	mov	r2, r8
    2c1e:	6812      	ldr	r2, [r2, #0]
    2c20:	2a00      	cmp	r2, #0
    2c22:	d106      	bne.n	2c32 <run_transfer_single_9bit_char_test+0x14e>
    2c24:	487e      	ldr	r0, [pc, #504]	; (2e20 <run_transfer_single_9bit_char_test+0x33c>)
    2c26:	497a      	ldr	r1, [pc, #488]	; (2e10 <run_transfer_single_9bit_char_test+0x32c>)
    2c28:	4a7a      	ldr	r2, [pc, #488]	; (2e14 <run_transfer_single_9bit_char_test+0x330>)
    2c2a:	4b81      	ldr	r3, [pc, #516]	; (2e30 <run_transfer_single_9bit_char_test+0x34c>)
    2c2c:	4c7d      	ldr	r4, [pc, #500]	; (2e24 <run_transfer_single_9bit_char_test+0x340>)
    2c2e:	47a0      	blx	r4
    2c30:	e7fe      	b.n	2c30 <run_transfer_single_9bit_char_test+0x14c>

	SercomUsart *const usart_hw = &(module->hw->USART);
    2c32:	4b75      	ldr	r3, [pc, #468]	; (2e08 <run_transfer_single_9bit_char_test+0x324>)
    2c34:	681b      	ldr	r3, [r3, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2c36:	69db      	ldr	r3, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    2c38:	2b00      	cmp	r3, #0
    2c3a:	d1df      	bne.n	2bfc <run_transfer_single_9bit_char_test+0x118>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2c3c:	6832      	ldr	r2, [r6, #0]
    2c3e:	2302      	movs	r3, #2
    2c40:	4313      	orrs	r3, r2
    2c42:	6033      	str	r3, [r6, #0]
    2c44:	4b6f      	ldr	r3, [pc, #444]	; (2e04 <run_transfer_single_9bit_char_test+0x320>)
    2c46:	6818      	ldr	r0, [r3, #0]
static inline void usart_disable(
		const struct usart_module *const module)
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
    2c48:	2800      	cmp	r0, #0
    2c4a:	d00d      	beq.n	2c68 <run_transfer_single_9bit_char_test+0x184>
    2c4c:	4b7c      	ldr	r3, [pc, #496]	; (2e40 <run_transfer_single_9bit_char_test+0x35c>)
    2c4e:	681b      	ldr	r3, [r3, #0]
    2c50:	2b00      	cmp	r3, #0
    2c52:	d114      	bne.n	2c7e <run_transfer_single_9bit_char_test+0x19a>
    2c54:	4b6d      	ldr	r3, [pc, #436]	; (2e0c <run_transfer_single_9bit_char_test+0x328>)
    2c56:	9300      	str	r3, [sp, #0]
    2c58:	4b6d      	ldr	r3, [pc, #436]	; (2e10 <run_transfer_single_9bit_char_test+0x32c>)
    2c5a:	9301      	str	r3, [sp, #4]
    2c5c:	2101      	movs	r1, #1
    2c5e:	4a6d      	ldr	r2, [pc, #436]	; (2e14 <run_transfer_single_9bit_char_test+0x330>)
    2c60:	4b6d      	ldr	r3, [pc, #436]	; (2e18 <run_transfer_single_9bit_char_test+0x334>)
    2c62:	4c6e      	ldr	r4, [pc, #440]	; (2e1c <run_transfer_single_9bit_char_test+0x338>)
    2c64:	47a0      	blx	r4
    2c66:	e00a      	b.n	2c7e <run_transfer_single_9bit_char_test+0x19a>
    2c68:	4b75      	ldr	r3, [pc, #468]	; (2e40 <run_transfer_single_9bit_char_test+0x35c>)
    2c6a:	681b      	ldr	r3, [r3, #0]
    2c6c:	2b00      	cmp	r3, #0
    2c6e:	d106      	bne.n	2c7e <run_transfer_single_9bit_char_test+0x19a>
    2c70:	486b      	ldr	r0, [pc, #428]	; (2e20 <run_transfer_single_9bit_char_test+0x33c>)
    2c72:	4967      	ldr	r1, [pc, #412]	; (2e10 <run_transfer_single_9bit_char_test+0x32c>)
    2c74:	4a67      	ldr	r2, [pc, #412]	; (2e14 <run_transfer_single_9bit_char_test+0x330>)
    2c76:	4b68      	ldr	r3, [pc, #416]	; (2e18 <run_transfer_single_9bit_char_test+0x334>)
    2c78:	4c6a      	ldr	r4, [pc, #424]	; (2e24 <run_transfer_single_9bit_char_test+0x340>)
    2c7a:	47a0      	blx	r4
    2c7c:	e7fe      	b.n	2c7c <run_transfer_single_9bit_char_test+0x198>

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2c7e:	4b70      	ldr	r3, [pc, #448]	; (2e40 <run_transfer_single_9bit_char_test+0x35c>)
    2c80:	681e      	ldr	r6, [r3, #0]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    2c82:	1c30      	adds	r0, r6, #0
    2c84:	4b68      	ldr	r3, [pc, #416]	; (2e28 <run_transfer_single_9bit_char_test+0x344>)
    2c86:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2c88:	211f      	movs	r1, #31
    2c8a:	4008      	ands	r0, r1
    2c8c:	2101      	movs	r1, #1
    2c8e:	4081      	lsls	r1, r0
    2c90:	2380      	movs	r3, #128	; 0x80
    2c92:	4a66      	ldr	r2, [pc, #408]	; (2e2c <run_transfer_single_9bit_char_test+0x348>)
    2c94:	50d1      	str	r1, [r2, r3]
    2c96:	4d5b      	ldr	r5, [pc, #364]	; (2e04 <run_transfer_single_9bit_char_test+0x320>)
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
    2c98:	4b69      	ldr	r3, [pc, #420]	; (2e40 <run_transfer_single_9bit_char_test+0x35c>)
    2c9a:	4698      	mov	r8, r3
    2c9c:	1c1c      	adds	r4, r3, #0
    2c9e:	6828      	ldr	r0, [r5, #0]
    2ca0:	2800      	cmp	r0, #0
    2ca2:	d00c      	beq.n	2cbe <run_transfer_single_9bit_char_test+0x1da>
    2ca4:	6827      	ldr	r7, [r4, #0]
    2ca6:	2f00      	cmp	r7, #0
    2ca8:	d114      	bne.n	2cd4 <run_transfer_single_9bit_char_test+0x1f0>
    2caa:	4b58      	ldr	r3, [pc, #352]	; (2e0c <run_transfer_single_9bit_char_test+0x328>)
    2cac:	9300      	str	r3, [sp, #0]
    2cae:	4b58      	ldr	r3, [pc, #352]	; (2e10 <run_transfer_single_9bit_char_test+0x32c>)
    2cb0:	9301      	str	r3, [sp, #4]
    2cb2:	2101      	movs	r1, #1
    2cb4:	4a57      	ldr	r2, [pc, #348]	; (2e14 <run_transfer_single_9bit_char_test+0x330>)
    2cb6:	4b5e      	ldr	r3, [pc, #376]	; (2e30 <run_transfer_single_9bit_char_test+0x34c>)
    2cb8:	4f58      	ldr	r7, [pc, #352]	; (2e1c <run_transfer_single_9bit_char_test+0x338>)
    2cba:	47b8      	blx	r7
    2cbc:	e00a      	b.n	2cd4 <run_transfer_single_9bit_char_test+0x1f0>
    2cbe:	4642      	mov	r2, r8
    2cc0:	6812      	ldr	r2, [r2, #0]
    2cc2:	2a00      	cmp	r2, #0
    2cc4:	d106      	bne.n	2cd4 <run_transfer_single_9bit_char_test+0x1f0>
    2cc6:	4856      	ldr	r0, [pc, #344]	; (2e20 <run_transfer_single_9bit_char_test+0x33c>)
    2cc8:	4951      	ldr	r1, [pc, #324]	; (2e10 <run_transfer_single_9bit_char_test+0x32c>)
    2cca:	4a52      	ldr	r2, [pc, #328]	; (2e14 <run_transfer_single_9bit_char_test+0x330>)
    2ccc:	4b58      	ldr	r3, [pc, #352]	; (2e30 <run_transfer_single_9bit_char_test+0x34c>)
    2cce:	4c55      	ldr	r4, [pc, #340]	; (2e24 <run_transfer_single_9bit_char_test+0x340>)
    2cd0:	47a0      	blx	r4
    2cd2:	e7fe      	b.n	2cd2 <run_transfer_single_9bit_char_test+0x1ee>

	SercomUsart *const usart_hw = &(module->hw->USART);
    2cd4:	4b5a      	ldr	r3, [pc, #360]	; (2e40 <run_transfer_single_9bit_char_test+0x35c>)
    2cd6:	681b      	ldr	r3, [r3, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2cd8:	69db      	ldr	r3, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    2cda:	2b00      	cmp	r3, #0
    2cdc:	d1df      	bne.n	2c9e <run_transfer_single_9bit_char_test+0x1ba>
#endif
	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    2cde:	6833      	ldr	r3, [r6, #0]
    2ce0:	2202      	movs	r2, #2
    2ce2:	4393      	bics	r3, r2
    2ce4:	6033      	str	r3, [r6, #0]
	usart_enable(&usart_rx_module);

	/* Re-configure TX USART to operate with 9 bit character size */
	usart_disable(&usart_tx_module);
	usart_tx_config.character_size = USART_CHARACTER_SIZE_9BIT;
    2ce6:	4a57      	ldr	r2, [pc, #348]	; (2e44 <run_transfer_single_9bit_char_test+0x360>)
    2ce8:	2301      	movs	r3, #1
    2cea:	72d3      	strb	r3, [r2, #11]
	usart_init(&usart_tx_module, CONF_TX_USART,	&usart_tx_config);
    2cec:	4854      	ldr	r0, [pc, #336]	; (2e40 <run_transfer_single_9bit_char_test+0x35c>)
    2cee:	4956      	ldr	r1, [pc, #344]	; (2e48 <run_transfer_single_9bit_char_test+0x364>)
    2cf0:	4b52      	ldr	r3, [pc, #328]	; (2e3c <run_transfer_single_9bit_char_test+0x358>)
    2cf2:	4798      	blx	r3
    2cf4:	4b43      	ldr	r3, [pc, #268]	; (2e04 <run_transfer_single_9bit_char_test+0x320>)
    2cf6:	6818      	ldr	r0, [r3, #0]
static inline void usart_enable(
		const struct usart_module *const module)
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
    2cf8:	2800      	cmp	r0, #0
    2cfa:	d00e      	beq.n	2d1a <run_transfer_single_9bit_char_test+0x236>
    2cfc:	4b50      	ldr	r3, [pc, #320]	; (2e40 <run_transfer_single_9bit_char_test+0x35c>)
    2cfe:	681b      	ldr	r3, [r3, #0]
    2d00:	2b00      	cmp	r3, #0
    2d02:	d116      	bne.n	2d32 <run_transfer_single_9bit_char_test+0x24e>
    2d04:	4b41      	ldr	r3, [pc, #260]	; (2e0c <run_transfer_single_9bit_char_test+0x328>)
    2d06:	9300      	str	r3, [sp, #0]
    2d08:	4b41      	ldr	r3, [pc, #260]	; (2e10 <run_transfer_single_9bit_char_test+0x32c>)
    2d0a:	9301      	str	r3, [sp, #4]
    2d0c:	2101      	movs	r1, #1
    2d0e:	4a41      	ldr	r2, [pc, #260]	; (2e14 <run_transfer_single_9bit_char_test+0x330>)
    2d10:	23d6      	movs	r3, #214	; 0xd6
    2d12:	009b      	lsls	r3, r3, #2
    2d14:	4c41      	ldr	r4, [pc, #260]	; (2e1c <run_transfer_single_9bit_char_test+0x338>)
    2d16:	47a0      	blx	r4
    2d18:	e00b      	b.n	2d32 <run_transfer_single_9bit_char_test+0x24e>
    2d1a:	4b49      	ldr	r3, [pc, #292]	; (2e40 <run_transfer_single_9bit_char_test+0x35c>)
    2d1c:	681b      	ldr	r3, [r3, #0]
    2d1e:	2b00      	cmp	r3, #0
    2d20:	d107      	bne.n	2d32 <run_transfer_single_9bit_char_test+0x24e>
    2d22:	483f      	ldr	r0, [pc, #252]	; (2e20 <run_transfer_single_9bit_char_test+0x33c>)
    2d24:	493a      	ldr	r1, [pc, #232]	; (2e10 <run_transfer_single_9bit_char_test+0x32c>)
    2d26:	4a3b      	ldr	r2, [pc, #236]	; (2e14 <run_transfer_single_9bit_char_test+0x330>)
    2d28:	23d6      	movs	r3, #214	; 0xd6
    2d2a:	009b      	lsls	r3, r3, #2
    2d2c:	4c3d      	ldr	r4, [pc, #244]	; (2e24 <run_transfer_single_9bit_char_test+0x340>)
    2d2e:	47a0      	blx	r4
    2d30:	e7fe      	b.n	2d30 <run_transfer_single_9bit_char_test+0x24c>

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2d32:	4b43      	ldr	r3, [pc, #268]	; (2e40 <run_transfer_single_9bit_char_test+0x35c>)
    2d34:	681c      	ldr	r4, [r3, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2d36:	1c20      	adds	r0, r4, #0
    2d38:	4b3b      	ldr	r3, [pc, #236]	; (2e28 <run_transfer_single_9bit_char_test+0x344>)
    2d3a:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2d3c:	221f      	movs	r2, #31
    2d3e:	4010      	ands	r0, r2
    2d40:	2201      	movs	r2, #1
    2d42:	4082      	lsls	r2, r0
    2d44:	4b39      	ldr	r3, [pc, #228]	; (2e2c <run_transfer_single_9bit_char_test+0x348>)
    2d46:	601a      	str	r2, [r3, #0]
    2d48:	4e2e      	ldr	r6, [pc, #184]	; (2e04 <run_transfer_single_9bit_char_test+0x320>)
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
    2d4a:	4b3d      	ldr	r3, [pc, #244]	; (2e40 <run_transfer_single_9bit_char_test+0x35c>)
    2d4c:	4698      	mov	r8, r3
    2d4e:	1c1d      	adds	r5, r3, #0
    2d50:	6830      	ldr	r0, [r6, #0]
    2d52:	2800      	cmp	r0, #0
    2d54:	d00c      	beq.n	2d70 <run_transfer_single_9bit_char_test+0x28c>
    2d56:	682f      	ldr	r7, [r5, #0]
    2d58:	2f00      	cmp	r7, #0
    2d5a:	d114      	bne.n	2d86 <run_transfer_single_9bit_char_test+0x2a2>
    2d5c:	4b2b      	ldr	r3, [pc, #172]	; (2e0c <run_transfer_single_9bit_char_test+0x328>)
    2d5e:	9300      	str	r3, [sp, #0]
    2d60:	4b2b      	ldr	r3, [pc, #172]	; (2e10 <run_transfer_single_9bit_char_test+0x32c>)
    2d62:	9301      	str	r3, [sp, #4]
    2d64:	2101      	movs	r1, #1
    2d66:	4a2b      	ldr	r2, [pc, #172]	; (2e14 <run_transfer_single_9bit_char_test+0x330>)
    2d68:	4b31      	ldr	r3, [pc, #196]	; (2e30 <run_transfer_single_9bit_char_test+0x34c>)
    2d6a:	4f2c      	ldr	r7, [pc, #176]	; (2e1c <run_transfer_single_9bit_char_test+0x338>)
    2d6c:	47b8      	blx	r7
    2d6e:	e00a      	b.n	2d86 <run_transfer_single_9bit_char_test+0x2a2>
    2d70:	4642      	mov	r2, r8
    2d72:	6812      	ldr	r2, [r2, #0]
    2d74:	2a00      	cmp	r2, #0
    2d76:	d106      	bne.n	2d86 <run_transfer_single_9bit_char_test+0x2a2>
    2d78:	4829      	ldr	r0, [pc, #164]	; (2e20 <run_transfer_single_9bit_char_test+0x33c>)
    2d7a:	4925      	ldr	r1, [pc, #148]	; (2e10 <run_transfer_single_9bit_char_test+0x32c>)
    2d7c:	4a25      	ldr	r2, [pc, #148]	; (2e14 <run_transfer_single_9bit_char_test+0x330>)
    2d7e:	4b2c      	ldr	r3, [pc, #176]	; (2e30 <run_transfer_single_9bit_char_test+0x34c>)
    2d80:	4c28      	ldr	r4, [pc, #160]	; (2e24 <run_transfer_single_9bit_char_test+0x340>)
    2d82:	47a0      	blx	r4
    2d84:	e7fe      	b.n	2d84 <run_transfer_single_9bit_char_test+0x2a0>

	SercomUsart *const usart_hw = &(module->hw->USART);
    2d86:	4b2e      	ldr	r3, [pc, #184]	; (2e40 <run_transfer_single_9bit_char_test+0x35c>)
    2d88:	681b      	ldr	r3, [r3, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2d8a:	69db      	ldr	r3, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    2d8c:	2b00      	cmp	r3, #0
    2d8e:	d1df      	bne.n	2d50 <run_transfer_single_9bit_char_test+0x26c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2d90:	6822      	ldr	r2, [r4, #0]
    2d92:	2302      	movs	r3, #2
    2d94:	4313      	orrs	r3, r2
    2d96:	6023      	str	r3, [r4, #0]
	usart_enable(&usart_tx_module);

	/* Write and read the data */
	usart_write_wait(&usart_tx_module, tx_char);
    2d98:	24b3      	movs	r4, #179	; 0xb3
    2d9a:	0064      	lsls	r4, r4, #1
    2d9c:	4828      	ldr	r0, [pc, #160]	; (2e40 <run_transfer_single_9bit_char_test+0x35c>)
    2d9e:	1c21      	adds	r1, r4, #0
    2da0:	4b2a      	ldr	r3, [pc, #168]	; (2e4c <run_transfer_single_9bit_char_test+0x368>)
    2da2:	4798      	blx	r3
	usart_read_wait(&usart_rx_module, &rx_char);
    2da4:	466d      	mov	r5, sp
    2da6:	3516      	adds	r5, #22
    2da8:	4817      	ldr	r0, [pc, #92]	; (2e08 <run_transfer_single_9bit_char_test+0x324>)
    2daa:	1c29      	adds	r1, r5, #0
    2dac:	4b28      	ldr	r3, [pc, #160]	; (2e50 <run_transfer_single_9bit_char_test+0x36c>)
    2dae:	4798      	blx	r3

	/* Make sure we received what we sent */
	test_assert_true(test, tx_char==rx_char,
    2db0:	882b      	ldrh	r3, [r5, #0]
    2db2:	42a3      	cmp	r3, r4
    2db4:	d009      	beq.n	2dca <run_transfer_single_9bit_char_test+0x2e6>
    2db6:	4a27      	ldr	r2, [pc, #156]	; (2e54 <run_transfer_single_9bit_char_test+0x370>)
    2db8:	9200      	str	r2, [sp, #0]
    2dba:	9401      	str	r4, [sp, #4]
    2dbc:	9302      	str	r3, [sp, #8]
    2dbe:	4648      	mov	r0, r9
    2dc0:	2101      	movs	r1, #1
    2dc2:	4a25      	ldr	r2, [pc, #148]	; (2e58 <run_transfer_single_9bit_char_test+0x374>)
    2dc4:	23e8      	movs	r3, #232	; 0xe8
    2dc6:	4c15      	ldr	r4, [pc, #84]	; (2e1c <run_transfer_single_9bit_char_test+0x338>)
    2dc8:	47a0      	blx	r4
    2dca:	4b0e      	ldr	r3, [pc, #56]	; (2e04 <run_transfer_single_9bit_char_test+0x320>)
    2dcc:	6818      	ldr	r0, [r3, #0]
static inline void usart_disable(
		const struct usart_module *const module)
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
    2dce:	2800      	cmp	r0, #0
    2dd0:	d00d      	beq.n	2dee <run_transfer_single_9bit_char_test+0x30a>
    2dd2:	4b0d      	ldr	r3, [pc, #52]	; (2e08 <run_transfer_single_9bit_char_test+0x324>)
    2dd4:	681b      	ldr	r3, [r3, #0]
    2dd6:	2b00      	cmp	r3, #0
    2dd8:	d140      	bne.n	2e5c <run_transfer_single_9bit_char_test+0x378>
    2dda:	4b0c      	ldr	r3, [pc, #48]	; (2e0c <run_transfer_single_9bit_char_test+0x328>)
    2ddc:	9300      	str	r3, [sp, #0]
    2dde:	4b0c      	ldr	r3, [pc, #48]	; (2e10 <run_transfer_single_9bit_char_test+0x32c>)
    2de0:	9301      	str	r3, [sp, #4]
    2de2:	2101      	movs	r1, #1
    2de4:	4a0b      	ldr	r2, [pc, #44]	; (2e14 <run_transfer_single_9bit_char_test+0x330>)
    2de6:	4b0c      	ldr	r3, [pc, #48]	; (2e18 <run_transfer_single_9bit_char_test+0x334>)
    2de8:	4c0c      	ldr	r4, [pc, #48]	; (2e1c <run_transfer_single_9bit_char_test+0x338>)
    2dea:	47a0      	blx	r4
    2dec:	e036      	b.n	2e5c <run_transfer_single_9bit_char_test+0x378>
    2dee:	4b06      	ldr	r3, [pc, #24]	; (2e08 <run_transfer_single_9bit_char_test+0x324>)
    2df0:	681b      	ldr	r3, [r3, #0]
    2df2:	2b00      	cmp	r3, #0
    2df4:	d132      	bne.n	2e5c <run_transfer_single_9bit_char_test+0x378>
    2df6:	480a      	ldr	r0, [pc, #40]	; (2e20 <run_transfer_single_9bit_char_test+0x33c>)
    2df8:	4905      	ldr	r1, [pc, #20]	; (2e10 <run_transfer_single_9bit_char_test+0x32c>)
    2dfa:	4a06      	ldr	r2, [pc, #24]	; (2e14 <run_transfer_single_9bit_char_test+0x330>)
    2dfc:	4b06      	ldr	r3, [pc, #24]	; (2e18 <run_transfer_single_9bit_char_test+0x334>)
    2dfe:	4c09      	ldr	r4, [pc, #36]	; (2e24 <run_transfer_single_9bit_char_test+0x340>)
    2e00:	47a0      	blx	r4
    2e02:	e7fe      	b.n	2e02 <run_transfer_single_9bit_char_test+0x31e>
    2e04:	2000008c 	.word	0x2000008c
    2e08:	20000154 	.word	0x20000154
    2e0c:	00004444 	.word	0x00004444
    2e10:	00004694 	.word	0x00004694
    2e14:	000046a0 	.word	0x000046a0
    2e18:	00000375 	.word	0x00000375
    2e1c:	0000020d 	.word	0x0000020d
    2e20:	00004484 	.word	0x00004484
    2e24:	000033cd 	.word	0x000033cd
    2e28:	000009d9 	.word	0x000009d9
    2e2c:	e000e100 	.word	0xe000e100
    2e30:	000002ea 	.word	0x000002ea
    2e34:	20000234 	.word	0x20000234
    2e38:	42001800 	.word	0x42001800
    2e3c:	00000a65 	.word	0x00000a65
    2e40:	20000200 	.word	0x20000200
    2e44:	200001c0 	.word	0x200001c0
    2e48:	42000800 	.word	0x42000800
    2e4c:	000010f9 	.word	0x000010f9
    2e50:	00001275 	.word	0x00001275
    2e54:	00004970 	.word	0x00004970
    2e58:	00004908 	.word	0x00004908

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2e5c:	4b9d      	ldr	r3, [pc, #628]	; (30d4 <run_transfer_single_9bit_char_test+0x5f0>)
    2e5e:	681c      	ldr	r4, [r3, #0]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    2e60:	1c20      	adds	r0, r4, #0
    2e62:	4b9d      	ldr	r3, [pc, #628]	; (30d8 <run_transfer_single_9bit_char_test+0x5f4>)
    2e64:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2e66:	211f      	movs	r1, #31
    2e68:	4008      	ands	r0, r1
    2e6a:	2101      	movs	r1, #1
    2e6c:	4081      	lsls	r1, r0
    2e6e:	2380      	movs	r3, #128	; 0x80
    2e70:	4a9a      	ldr	r2, [pc, #616]	; (30dc <run_transfer_single_9bit_char_test+0x5f8>)
    2e72:	50d1      	str	r1, [r2, r3]
    2e74:	4d9a      	ldr	r5, [pc, #616]	; (30e0 <run_transfer_single_9bit_char_test+0x5fc>)
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
    2e76:	4b97      	ldr	r3, [pc, #604]	; (30d4 <run_transfer_single_9bit_char_test+0x5f0>)
    2e78:	4698      	mov	r8, r3
    2e7a:	1c1e      	adds	r6, r3, #0
    2e7c:	6828      	ldr	r0, [r5, #0]
    2e7e:	2800      	cmp	r0, #0
    2e80:	d00c      	beq.n	2e9c <run_transfer_single_9bit_char_test+0x3b8>
    2e82:	6837      	ldr	r7, [r6, #0]
    2e84:	2f00      	cmp	r7, #0
    2e86:	d114      	bne.n	2eb2 <run_transfer_single_9bit_char_test+0x3ce>
    2e88:	4b96      	ldr	r3, [pc, #600]	; (30e4 <run_transfer_single_9bit_char_test+0x600>)
    2e8a:	9300      	str	r3, [sp, #0]
    2e8c:	4b96      	ldr	r3, [pc, #600]	; (30e8 <run_transfer_single_9bit_char_test+0x604>)
    2e8e:	9301      	str	r3, [sp, #4]
    2e90:	2101      	movs	r1, #1
    2e92:	4a96      	ldr	r2, [pc, #600]	; (30ec <run_transfer_single_9bit_char_test+0x608>)
    2e94:	4b96      	ldr	r3, [pc, #600]	; (30f0 <run_transfer_single_9bit_char_test+0x60c>)
    2e96:	4f97      	ldr	r7, [pc, #604]	; (30f4 <run_transfer_single_9bit_char_test+0x610>)
    2e98:	47b8      	blx	r7
    2e9a:	e00a      	b.n	2eb2 <run_transfer_single_9bit_char_test+0x3ce>
    2e9c:	4642      	mov	r2, r8
    2e9e:	6812      	ldr	r2, [r2, #0]
    2ea0:	2a00      	cmp	r2, #0
    2ea2:	d106      	bne.n	2eb2 <run_transfer_single_9bit_char_test+0x3ce>
    2ea4:	4894      	ldr	r0, [pc, #592]	; (30f8 <run_transfer_single_9bit_char_test+0x614>)
    2ea6:	4990      	ldr	r1, [pc, #576]	; (30e8 <run_transfer_single_9bit_char_test+0x604>)
    2ea8:	4a90      	ldr	r2, [pc, #576]	; (30ec <run_transfer_single_9bit_char_test+0x608>)
    2eaa:	4b91      	ldr	r3, [pc, #580]	; (30f0 <run_transfer_single_9bit_char_test+0x60c>)
    2eac:	4c93      	ldr	r4, [pc, #588]	; (30fc <run_transfer_single_9bit_char_test+0x618>)
    2eae:	47a0      	blx	r4
    2eb0:	e7fe      	b.n	2eb0 <run_transfer_single_9bit_char_test+0x3cc>

	SercomUsart *const usart_hw = &(module->hw->USART);
    2eb2:	4b88      	ldr	r3, [pc, #544]	; (30d4 <run_transfer_single_9bit_char_test+0x5f0>)
    2eb4:	681b      	ldr	r3, [r3, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2eb6:	69db      	ldr	r3, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    2eb8:	2b00      	cmp	r3, #0
    2eba:	d1df      	bne.n	2e7c <run_transfer_single_9bit_char_test+0x398>
#endif
	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    2ebc:	6823      	ldr	r3, [r4, #0]
    2ebe:	2202      	movs	r2, #2
    2ec0:	4393      	bics	r3, r2
    2ec2:	6023      	str	r3, [r4, #0]
			"Failed receiving sent byte. TX=%d, RX=%d", tx_char, rx_char);

	/* Put RX USART back in 8 bit mode */
	usart_disable(&usart_rx_module);
	usart_rx_config.character_size = USART_CHARACTER_SIZE_8BIT;
    2ec4:	4a8e      	ldr	r2, [pc, #568]	; (3100 <run_transfer_single_9bit_char_test+0x61c>)
    2ec6:	2300      	movs	r3, #0
    2ec8:	72d3      	strb	r3, [r2, #11]
	usart_init(&usart_rx_module, CONF_RX_USART,	&usart_rx_config);
    2eca:	4882      	ldr	r0, [pc, #520]	; (30d4 <run_transfer_single_9bit_char_test+0x5f0>)
    2ecc:	498d      	ldr	r1, [pc, #564]	; (3104 <run_transfer_single_9bit_char_test+0x620>)
    2ece:	4b8e      	ldr	r3, [pc, #568]	; (3108 <run_transfer_single_9bit_char_test+0x624>)
    2ed0:	4798      	blx	r3
    2ed2:	4b83      	ldr	r3, [pc, #524]	; (30e0 <run_transfer_single_9bit_char_test+0x5fc>)
    2ed4:	6818      	ldr	r0, [r3, #0]
static inline void usart_enable(
		const struct usart_module *const module)
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
    2ed6:	2800      	cmp	r0, #0
    2ed8:	d00e      	beq.n	2ef8 <run_transfer_single_9bit_char_test+0x414>
    2eda:	4b7e      	ldr	r3, [pc, #504]	; (30d4 <run_transfer_single_9bit_char_test+0x5f0>)
    2edc:	681b      	ldr	r3, [r3, #0]
    2ede:	2b00      	cmp	r3, #0
    2ee0:	d116      	bne.n	2f10 <run_transfer_single_9bit_char_test+0x42c>
    2ee2:	4b80      	ldr	r3, [pc, #512]	; (30e4 <run_transfer_single_9bit_char_test+0x600>)
    2ee4:	9300      	str	r3, [sp, #0]
    2ee6:	4b80      	ldr	r3, [pc, #512]	; (30e8 <run_transfer_single_9bit_char_test+0x604>)
    2ee8:	9301      	str	r3, [sp, #4]
    2eea:	2101      	movs	r1, #1
    2eec:	4a7f      	ldr	r2, [pc, #508]	; (30ec <run_transfer_single_9bit_char_test+0x608>)
    2eee:	23d6      	movs	r3, #214	; 0xd6
    2ef0:	009b      	lsls	r3, r3, #2
    2ef2:	4c80      	ldr	r4, [pc, #512]	; (30f4 <run_transfer_single_9bit_char_test+0x610>)
    2ef4:	47a0      	blx	r4
    2ef6:	e00b      	b.n	2f10 <run_transfer_single_9bit_char_test+0x42c>
    2ef8:	4b76      	ldr	r3, [pc, #472]	; (30d4 <run_transfer_single_9bit_char_test+0x5f0>)
    2efa:	681b      	ldr	r3, [r3, #0]
    2efc:	2b00      	cmp	r3, #0
    2efe:	d107      	bne.n	2f10 <run_transfer_single_9bit_char_test+0x42c>
    2f00:	487d      	ldr	r0, [pc, #500]	; (30f8 <run_transfer_single_9bit_char_test+0x614>)
    2f02:	4979      	ldr	r1, [pc, #484]	; (30e8 <run_transfer_single_9bit_char_test+0x604>)
    2f04:	4a79      	ldr	r2, [pc, #484]	; (30ec <run_transfer_single_9bit_char_test+0x608>)
    2f06:	23d6      	movs	r3, #214	; 0xd6
    2f08:	009b      	lsls	r3, r3, #2
    2f0a:	4c7c      	ldr	r4, [pc, #496]	; (30fc <run_transfer_single_9bit_char_test+0x618>)
    2f0c:	47a0      	blx	r4
    2f0e:	e7fe      	b.n	2f0e <run_transfer_single_9bit_char_test+0x42a>

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2f10:	4b70      	ldr	r3, [pc, #448]	; (30d4 <run_transfer_single_9bit_char_test+0x5f0>)
    2f12:	681c      	ldr	r4, [r3, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2f14:	1c20      	adds	r0, r4, #0
    2f16:	4b70      	ldr	r3, [pc, #448]	; (30d8 <run_transfer_single_9bit_char_test+0x5f4>)
    2f18:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2f1a:	221f      	movs	r2, #31
    2f1c:	4010      	ands	r0, r2
    2f1e:	2201      	movs	r2, #1
    2f20:	4082      	lsls	r2, r0
    2f22:	4b6e      	ldr	r3, [pc, #440]	; (30dc <run_transfer_single_9bit_char_test+0x5f8>)
    2f24:	601a      	str	r2, [r3, #0]
    2f26:	4e6e      	ldr	r6, [pc, #440]	; (30e0 <run_transfer_single_9bit_char_test+0x5fc>)
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
    2f28:	4b6a      	ldr	r3, [pc, #424]	; (30d4 <run_transfer_single_9bit_char_test+0x5f0>)
    2f2a:	4698      	mov	r8, r3
    2f2c:	1c1d      	adds	r5, r3, #0
    2f2e:	6830      	ldr	r0, [r6, #0]
    2f30:	2800      	cmp	r0, #0
    2f32:	d00c      	beq.n	2f4e <run_transfer_single_9bit_char_test+0x46a>
    2f34:	682f      	ldr	r7, [r5, #0]
    2f36:	2f00      	cmp	r7, #0
    2f38:	d114      	bne.n	2f64 <run_transfer_single_9bit_char_test+0x480>
    2f3a:	4b6a      	ldr	r3, [pc, #424]	; (30e4 <run_transfer_single_9bit_char_test+0x600>)
    2f3c:	9300      	str	r3, [sp, #0]
    2f3e:	4b6a      	ldr	r3, [pc, #424]	; (30e8 <run_transfer_single_9bit_char_test+0x604>)
    2f40:	9301      	str	r3, [sp, #4]
    2f42:	2101      	movs	r1, #1
    2f44:	4a69      	ldr	r2, [pc, #420]	; (30ec <run_transfer_single_9bit_char_test+0x608>)
    2f46:	4b6a      	ldr	r3, [pc, #424]	; (30f0 <run_transfer_single_9bit_char_test+0x60c>)
    2f48:	4f6a      	ldr	r7, [pc, #424]	; (30f4 <run_transfer_single_9bit_char_test+0x610>)
    2f4a:	47b8      	blx	r7
    2f4c:	e00a      	b.n	2f64 <run_transfer_single_9bit_char_test+0x480>
    2f4e:	4642      	mov	r2, r8
    2f50:	6812      	ldr	r2, [r2, #0]
    2f52:	2a00      	cmp	r2, #0
    2f54:	d106      	bne.n	2f64 <run_transfer_single_9bit_char_test+0x480>
    2f56:	4868      	ldr	r0, [pc, #416]	; (30f8 <run_transfer_single_9bit_char_test+0x614>)
    2f58:	4963      	ldr	r1, [pc, #396]	; (30e8 <run_transfer_single_9bit_char_test+0x604>)
    2f5a:	4a64      	ldr	r2, [pc, #400]	; (30ec <run_transfer_single_9bit_char_test+0x608>)
    2f5c:	4b64      	ldr	r3, [pc, #400]	; (30f0 <run_transfer_single_9bit_char_test+0x60c>)
    2f5e:	4c67      	ldr	r4, [pc, #412]	; (30fc <run_transfer_single_9bit_char_test+0x618>)
    2f60:	47a0      	blx	r4
    2f62:	e7fe      	b.n	2f62 <run_transfer_single_9bit_char_test+0x47e>

	SercomUsart *const usart_hw = &(module->hw->USART);
    2f64:	4b5b      	ldr	r3, [pc, #364]	; (30d4 <run_transfer_single_9bit_char_test+0x5f0>)
    2f66:	681b      	ldr	r3, [r3, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2f68:	69db      	ldr	r3, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    2f6a:	2b00      	cmp	r3, #0
    2f6c:	d1df      	bne.n	2f2e <run_transfer_single_9bit_char_test+0x44a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2f6e:	6822      	ldr	r2, [r4, #0]
    2f70:	2302      	movs	r3, #2
    2f72:	4313      	orrs	r3, r2
    2f74:	6023      	str	r3, [r4, #0]
    2f76:	4b5a      	ldr	r3, [pc, #360]	; (30e0 <run_transfer_single_9bit_char_test+0x5fc>)
    2f78:	6818      	ldr	r0, [r3, #0]
static inline void usart_disable(
		const struct usart_module *const module)
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
    2f7a:	2800      	cmp	r0, #0
    2f7c:	d00d      	beq.n	2f9a <run_transfer_single_9bit_char_test+0x4b6>
    2f7e:	4b63      	ldr	r3, [pc, #396]	; (310c <run_transfer_single_9bit_char_test+0x628>)
    2f80:	681b      	ldr	r3, [r3, #0]
    2f82:	2b00      	cmp	r3, #0
    2f84:	d114      	bne.n	2fb0 <run_transfer_single_9bit_char_test+0x4cc>
    2f86:	4b57      	ldr	r3, [pc, #348]	; (30e4 <run_transfer_single_9bit_char_test+0x600>)
    2f88:	9300      	str	r3, [sp, #0]
    2f8a:	4b57      	ldr	r3, [pc, #348]	; (30e8 <run_transfer_single_9bit_char_test+0x604>)
    2f8c:	9301      	str	r3, [sp, #4]
    2f8e:	2101      	movs	r1, #1
    2f90:	4a56      	ldr	r2, [pc, #344]	; (30ec <run_transfer_single_9bit_char_test+0x608>)
    2f92:	4b5f      	ldr	r3, [pc, #380]	; (3110 <run_transfer_single_9bit_char_test+0x62c>)
    2f94:	4c57      	ldr	r4, [pc, #348]	; (30f4 <run_transfer_single_9bit_char_test+0x610>)
    2f96:	47a0      	blx	r4
    2f98:	e00a      	b.n	2fb0 <run_transfer_single_9bit_char_test+0x4cc>
    2f9a:	4b5c      	ldr	r3, [pc, #368]	; (310c <run_transfer_single_9bit_char_test+0x628>)
    2f9c:	681b      	ldr	r3, [r3, #0]
    2f9e:	2b00      	cmp	r3, #0
    2fa0:	d106      	bne.n	2fb0 <run_transfer_single_9bit_char_test+0x4cc>
    2fa2:	4855      	ldr	r0, [pc, #340]	; (30f8 <run_transfer_single_9bit_char_test+0x614>)
    2fa4:	4950      	ldr	r1, [pc, #320]	; (30e8 <run_transfer_single_9bit_char_test+0x604>)
    2fa6:	4a51      	ldr	r2, [pc, #324]	; (30ec <run_transfer_single_9bit_char_test+0x608>)
    2fa8:	4b59      	ldr	r3, [pc, #356]	; (3110 <run_transfer_single_9bit_char_test+0x62c>)
    2faa:	4c54      	ldr	r4, [pc, #336]	; (30fc <run_transfer_single_9bit_char_test+0x618>)
    2fac:	47a0      	blx	r4
    2fae:	e7fe      	b.n	2fae <run_transfer_single_9bit_char_test+0x4ca>

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2fb0:	4b56      	ldr	r3, [pc, #344]	; (310c <run_transfer_single_9bit_char_test+0x628>)
    2fb2:	681c      	ldr	r4, [r3, #0]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    2fb4:	1c20      	adds	r0, r4, #0
    2fb6:	4b48      	ldr	r3, [pc, #288]	; (30d8 <run_transfer_single_9bit_char_test+0x5f4>)
    2fb8:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2fba:	211f      	movs	r1, #31
    2fbc:	4008      	ands	r0, r1
    2fbe:	2101      	movs	r1, #1
    2fc0:	4081      	lsls	r1, r0
    2fc2:	2380      	movs	r3, #128	; 0x80
    2fc4:	4a45      	ldr	r2, [pc, #276]	; (30dc <run_transfer_single_9bit_char_test+0x5f8>)
    2fc6:	50d1      	str	r1, [r2, r3]
    2fc8:	4e45      	ldr	r6, [pc, #276]	; (30e0 <run_transfer_single_9bit_char_test+0x5fc>)
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
    2fca:	4b50      	ldr	r3, [pc, #320]	; (310c <run_transfer_single_9bit_char_test+0x628>)
    2fcc:	4698      	mov	r8, r3
    2fce:	1c1d      	adds	r5, r3, #0
    2fd0:	6830      	ldr	r0, [r6, #0]
    2fd2:	2800      	cmp	r0, #0
    2fd4:	d00c      	beq.n	2ff0 <run_transfer_single_9bit_char_test+0x50c>
    2fd6:	682f      	ldr	r7, [r5, #0]
    2fd8:	2f00      	cmp	r7, #0
    2fda:	d114      	bne.n	3006 <run_transfer_single_9bit_char_test+0x522>
    2fdc:	4b41      	ldr	r3, [pc, #260]	; (30e4 <run_transfer_single_9bit_char_test+0x600>)
    2fde:	9300      	str	r3, [sp, #0]
    2fe0:	4b41      	ldr	r3, [pc, #260]	; (30e8 <run_transfer_single_9bit_char_test+0x604>)
    2fe2:	9301      	str	r3, [sp, #4]
    2fe4:	2101      	movs	r1, #1
    2fe6:	4a41      	ldr	r2, [pc, #260]	; (30ec <run_transfer_single_9bit_char_test+0x608>)
    2fe8:	4b41      	ldr	r3, [pc, #260]	; (30f0 <run_transfer_single_9bit_char_test+0x60c>)
    2fea:	4f42      	ldr	r7, [pc, #264]	; (30f4 <run_transfer_single_9bit_char_test+0x610>)
    2fec:	47b8      	blx	r7
    2fee:	e00a      	b.n	3006 <run_transfer_single_9bit_char_test+0x522>
    2ff0:	4642      	mov	r2, r8
    2ff2:	6812      	ldr	r2, [r2, #0]
    2ff4:	2a00      	cmp	r2, #0
    2ff6:	d106      	bne.n	3006 <run_transfer_single_9bit_char_test+0x522>
    2ff8:	483f      	ldr	r0, [pc, #252]	; (30f8 <run_transfer_single_9bit_char_test+0x614>)
    2ffa:	493b      	ldr	r1, [pc, #236]	; (30e8 <run_transfer_single_9bit_char_test+0x604>)
    2ffc:	4a3b      	ldr	r2, [pc, #236]	; (30ec <run_transfer_single_9bit_char_test+0x608>)
    2ffe:	4b3c      	ldr	r3, [pc, #240]	; (30f0 <run_transfer_single_9bit_char_test+0x60c>)
    3000:	4c3e      	ldr	r4, [pc, #248]	; (30fc <run_transfer_single_9bit_char_test+0x618>)
    3002:	47a0      	blx	r4
    3004:	e7fe      	b.n	3004 <run_transfer_single_9bit_char_test+0x520>

	SercomUsart *const usart_hw = &(module->hw->USART);
    3006:	4b41      	ldr	r3, [pc, #260]	; (310c <run_transfer_single_9bit_char_test+0x628>)
    3008:	681b      	ldr	r3, [r3, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    300a:	69db      	ldr	r3, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    300c:	2b00      	cmp	r3, #0
    300e:	d1df      	bne.n	2fd0 <run_transfer_single_9bit_char_test+0x4ec>
#endif
	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    3010:	6823      	ldr	r3, [r4, #0]
    3012:	2202      	movs	r2, #2
    3014:	4393      	bics	r3, r2
    3016:	6023      	str	r3, [r4, #0]
	usart_enable(&usart_rx_module);

	/* Put TX USART back in 8 bit mode */
	usart_disable(&usart_tx_module);
	usart_tx_config.character_size = USART_CHARACTER_SIZE_8BIT;
    3018:	4a3e      	ldr	r2, [pc, #248]	; (3114 <run_transfer_single_9bit_char_test+0x630>)
    301a:	2300      	movs	r3, #0
    301c:	72d3      	strb	r3, [r2, #11]
	usart_init(&usart_tx_module, CONF_TX_USART,	&usart_tx_config);
    301e:	483b      	ldr	r0, [pc, #236]	; (310c <run_transfer_single_9bit_char_test+0x628>)
    3020:	493d      	ldr	r1, [pc, #244]	; (3118 <run_transfer_single_9bit_char_test+0x634>)
    3022:	4b39      	ldr	r3, [pc, #228]	; (3108 <run_transfer_single_9bit_char_test+0x624>)
    3024:	4798      	blx	r3
    3026:	4b2e      	ldr	r3, [pc, #184]	; (30e0 <run_transfer_single_9bit_char_test+0x5fc>)
    3028:	6818      	ldr	r0, [r3, #0]
static inline void usart_enable(
		const struct usart_module *const module)
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
    302a:	2800      	cmp	r0, #0
    302c:	d00e      	beq.n	304c <run_transfer_single_9bit_char_test+0x568>
    302e:	4b37      	ldr	r3, [pc, #220]	; (310c <run_transfer_single_9bit_char_test+0x628>)
    3030:	681b      	ldr	r3, [r3, #0]
    3032:	2b00      	cmp	r3, #0
    3034:	d116      	bne.n	3064 <run_transfer_single_9bit_char_test+0x580>
    3036:	4b2b      	ldr	r3, [pc, #172]	; (30e4 <run_transfer_single_9bit_char_test+0x600>)
    3038:	9300      	str	r3, [sp, #0]
    303a:	4b2b      	ldr	r3, [pc, #172]	; (30e8 <run_transfer_single_9bit_char_test+0x604>)
    303c:	9301      	str	r3, [sp, #4]
    303e:	2101      	movs	r1, #1
    3040:	4a2a      	ldr	r2, [pc, #168]	; (30ec <run_transfer_single_9bit_char_test+0x608>)
    3042:	23d6      	movs	r3, #214	; 0xd6
    3044:	009b      	lsls	r3, r3, #2
    3046:	4c2b      	ldr	r4, [pc, #172]	; (30f4 <run_transfer_single_9bit_char_test+0x610>)
    3048:	47a0      	blx	r4
    304a:	e00b      	b.n	3064 <run_transfer_single_9bit_char_test+0x580>
    304c:	4b2f      	ldr	r3, [pc, #188]	; (310c <run_transfer_single_9bit_char_test+0x628>)
    304e:	681b      	ldr	r3, [r3, #0]
    3050:	2b00      	cmp	r3, #0
    3052:	d107      	bne.n	3064 <run_transfer_single_9bit_char_test+0x580>
    3054:	4828      	ldr	r0, [pc, #160]	; (30f8 <run_transfer_single_9bit_char_test+0x614>)
    3056:	4924      	ldr	r1, [pc, #144]	; (30e8 <run_transfer_single_9bit_char_test+0x604>)
    3058:	4a24      	ldr	r2, [pc, #144]	; (30ec <run_transfer_single_9bit_char_test+0x608>)
    305a:	23d6      	movs	r3, #214	; 0xd6
    305c:	009b      	lsls	r3, r3, #2
    305e:	4c27      	ldr	r4, [pc, #156]	; (30fc <run_transfer_single_9bit_char_test+0x618>)
    3060:	47a0      	blx	r4
    3062:	e7fe      	b.n	3062 <run_transfer_single_9bit_char_test+0x57e>

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3064:	4b29      	ldr	r3, [pc, #164]	; (310c <run_transfer_single_9bit_char_test+0x628>)
    3066:	681c      	ldr	r4, [r3, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3068:	1c20      	adds	r0, r4, #0
    306a:	4b1b      	ldr	r3, [pc, #108]	; (30d8 <run_transfer_single_9bit_char_test+0x5f4>)
    306c:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    306e:	221f      	movs	r2, #31
    3070:	4010      	ands	r0, r2
    3072:	2201      	movs	r2, #1
    3074:	4082      	lsls	r2, r0
    3076:	4b19      	ldr	r3, [pc, #100]	; (30dc <run_transfer_single_9bit_char_test+0x5f8>)
    3078:	601a      	str	r2, [r3, #0]
    307a:	4d19      	ldr	r5, [pc, #100]	; (30e0 <run_transfer_single_9bit_char_test+0x5fc>)
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
    307c:	4f23      	ldr	r7, [pc, #140]	; (310c <run_transfer_single_9bit_char_test+0x628>)
    307e:	46b8      	mov	r8, r7
    3080:	6828      	ldr	r0, [r5, #0]
    3082:	2800      	cmp	r0, #0
    3084:	d00d      	beq.n	30a2 <run_transfer_single_9bit_char_test+0x5be>
    3086:	4646      	mov	r6, r8
    3088:	6836      	ldr	r6, [r6, #0]
    308a:	2e00      	cmp	r6, #0
    308c:	d113      	bne.n	30b6 <run_transfer_single_9bit_char_test+0x5d2>
    308e:	4b15      	ldr	r3, [pc, #84]	; (30e4 <run_transfer_single_9bit_char_test+0x600>)
    3090:	9300      	str	r3, [sp, #0]
    3092:	4b15      	ldr	r3, [pc, #84]	; (30e8 <run_transfer_single_9bit_char_test+0x604>)
    3094:	9301      	str	r3, [sp, #4]
    3096:	2101      	movs	r1, #1
    3098:	4a14      	ldr	r2, [pc, #80]	; (30ec <run_transfer_single_9bit_char_test+0x608>)
    309a:	4b15      	ldr	r3, [pc, #84]	; (30f0 <run_transfer_single_9bit_char_test+0x60c>)
    309c:	4e15      	ldr	r6, [pc, #84]	; (30f4 <run_transfer_single_9bit_char_test+0x610>)
    309e:	47b0      	blx	r6
    30a0:	e009      	b.n	30b6 <run_transfer_single_9bit_char_test+0x5d2>
    30a2:	683a      	ldr	r2, [r7, #0]
    30a4:	2a00      	cmp	r2, #0
    30a6:	d106      	bne.n	30b6 <run_transfer_single_9bit_char_test+0x5d2>
    30a8:	4813      	ldr	r0, [pc, #76]	; (30f8 <run_transfer_single_9bit_char_test+0x614>)
    30aa:	490f      	ldr	r1, [pc, #60]	; (30e8 <run_transfer_single_9bit_char_test+0x604>)
    30ac:	4a0f      	ldr	r2, [pc, #60]	; (30ec <run_transfer_single_9bit_char_test+0x608>)
    30ae:	4b10      	ldr	r3, [pc, #64]	; (30f0 <run_transfer_single_9bit_char_test+0x60c>)
    30b0:	4c12      	ldr	r4, [pc, #72]	; (30fc <run_transfer_single_9bit_char_test+0x618>)
    30b2:	47a0      	blx	r4
    30b4:	e7fe      	b.n	30b4 <run_transfer_single_9bit_char_test+0x5d0>

	SercomUsart *const usart_hw = &(module->hw->USART);
    30b6:	4b15      	ldr	r3, [pc, #84]	; (310c <run_transfer_single_9bit_char_test+0x628>)
    30b8:	681b      	ldr	r3, [r3, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    30ba:	69db      	ldr	r3, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    30bc:	2b00      	cmp	r3, #0
    30be:	d1df      	bne.n	3080 <run_transfer_single_9bit_char_test+0x59c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    30c0:	6822      	ldr	r2, [r4, #0]
    30c2:	2302      	movs	r3, #2
    30c4:	4313      	orrs	r3, r2
    30c6:	6023      	str	r3, [r4, #0]
	usart_enable(&usart_tx_module);
}
    30c8:	b007      	add	sp, #28
    30ca:	bc0c      	pop	{r2, r3}
    30cc:	4690      	mov	r8, r2
    30ce:	4699      	mov	r9, r3
    30d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    30d2:	46c0      	nop			; (mov r8, r8)
    30d4:	20000154 	.word	0x20000154
    30d8:	000009d9 	.word	0x000009d9
    30dc:	e000e100 	.word	0xe000e100
    30e0:	2000008c 	.word	0x2000008c
    30e4:	00004444 	.word	0x00004444
    30e8:	00004694 	.word	0x00004694
    30ec:	000046a0 	.word	0x000046a0
    30f0:	000002ea 	.word	0x000002ea
    30f4:	0000020d 	.word	0x0000020d
    30f8:	00004484 	.word	0x00004484
    30fc:	000033cd 	.word	0x000033cd
    3100:	20000234 	.word	0x20000234
    3104:	42001800 	.word	0x42001800
    3108:	00000a65 	.word	0x00000a65
    310c:	20000200 	.word	0x20000200
    3110:	00000375 	.word	0x00000375
    3114:	200001c0 	.word	0x200001c0
    3118:	42000800 	.word	0x42000800

0000311c <main>:
 *
 * Initializes the system and serial output, then sets up the
 * USART unit test suite and runs it.
 */
int main(void)
{
    311c:	b5f0      	push	{r4, r5, r6, r7, lr}
    311e:	4657      	mov	r7, sl
    3120:	464e      	mov	r6, r9
    3122:	4645      	mov	r5, r8
    3124:	b4e0      	push	{r5, r6, r7}
    3126:	b098      	sub	sp, #96	; 0x60
	system_init();
    3128:	4b35      	ldr	r3, [pc, #212]	; (3200 <main+0xe4>)
    312a:	4798      	blx	r3
static void cdc_uart_init(void)
{
	struct usart_config usart_conf;

	/* Configure USART for unit test output */
	usart_get_config_defaults(&usart_conf);
    312c:	a801      	add	r0, sp, #4
    312e:	4a35      	ldr	r2, [pc, #212]	; (3204 <main+0xe8>)
    3130:	4691      	mov	r9, r2
    3132:	4790      	blx	r2
	usart_conf.mux_setting = CONF_STDIO_MUX_SETTING;
    3134:	2380      	movs	r3, #128	; 0x80
    3136:	035b      	lsls	r3, r3, #13
    3138:	4698      	mov	r8, r3
    313a:	9304      	str	r3, [sp, #16]
	usart_conf.pinmux_pad0 = CONF_STDIO_PINMUX_PAD0;
    313c:	4b32      	ldr	r3, [pc, #200]	; (3208 <main+0xec>)
    313e:	930d      	str	r3, [sp, #52]	; 0x34
	usart_conf.pinmux_pad1 = CONF_STDIO_PINMUX_PAD1;
    3140:	4b32      	ldr	r3, [pc, #200]	; (320c <main+0xf0>)
    3142:	930e      	str	r3, [sp, #56]	; 0x38
	usart_conf.pinmux_pad2 = CONF_STDIO_PINMUX_PAD2;
    3144:	2501      	movs	r5, #1
    3146:	426d      	negs	r5, r5
    3148:	950f      	str	r5, [sp, #60]	; 0x3c
	usart_conf.pinmux_pad3 = CONF_STDIO_PINMUX_PAD3;
    314a:	9510      	str	r5, [sp, #64]	; 0x40
	usart_conf.baudrate    = CONF_STDIO_BAUDRATE;
    314c:	2396      	movs	r3, #150	; 0x96
    314e:	021b      	lsls	r3, r3, #8
    3150:	9309      	str	r3, [sp, #36]	; 0x24
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    3152:	4c2f      	ldr	r4, [pc, #188]	; (3210 <main+0xf4>)
    3154:	4b2f      	ldr	r3, [pc, #188]	; (3214 <main+0xf8>)
    3156:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    3158:	4a2f      	ldr	r2, [pc, #188]	; (3218 <main+0xfc>)
    315a:	4b30      	ldr	r3, [pc, #192]	; (321c <main+0x100>)
    315c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    315e:	4a30      	ldr	r2, [pc, #192]	; (3220 <main+0x104>)
    3160:	4b30      	ldr	r3, [pc, #192]	; (3224 <main+0x108>)
    3162:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    3164:	1c20      	adds	r0, r4, #0
    3166:	4930      	ldr	r1, [pc, #192]	; (3228 <main+0x10c>)
    3168:	aa01      	add	r2, sp, #4
    316a:	4f30      	ldr	r7, [pc, #192]	; (322c <main+0x110>)
    316c:	47b8      	blx	r7

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    316e:	4b30      	ldr	r3, [pc, #192]	; (3230 <main+0x114>)
    3170:	469a      	mov	sl, r3
    3172:	681b      	ldr	r3, [r3, #0]
    3174:	6898      	ldr	r0, [r3, #8]
    3176:	2100      	movs	r1, #0
    3178:	4e2e      	ldr	r6, [pc, #184]	; (3234 <main+0x118>)
    317a:	47b0      	blx	r6
	setbuf(stdin, NULL);
    317c:	4652      	mov	r2, sl
    317e:	6813      	ldr	r3, [r2, #0]
    3180:	6858      	ldr	r0, [r3, #4]
    3182:	2100      	movs	r1, #0
    3184:	47b0      	blx	r6

	stdio_serial_init(&cdc_uart_module, CONF_STDIO_USART, &usart_conf);
	usart_enable(&cdc_uart_module);
    3186:	1c20      	adds	r0, r4, #0
    3188:	4e2b      	ldr	r6, [pc, #172]	; (3238 <main+0x11c>)
    318a:	47b0      	blx	r6
 *
 */
static void test_system_init(void)
{
	/* Configure RX USART */
	usart_get_config_defaults(&usart_rx_config);
    318c:	4c2b      	ldr	r4, [pc, #172]	; (323c <main+0x120>)
    318e:	1c20      	adds	r0, r4, #0
    3190:	47c8      	blx	r9
	usart_rx_config.mux_setting = CONF_RX_USART_SERCOM_MUX;
    3192:	4643      	mov	r3, r8
    3194:	60e3      	str	r3, [r4, #12]
	usart_rx_config.pinmux_pad0 = CONF_RX_USART_PINMUX_PAD0;
    3196:	4b2a      	ldr	r3, [pc, #168]	; (3240 <main+0x124>)
    3198:	6323      	str	r3, [r4, #48]	; 0x30
	usart_rx_config.pinmux_pad1 = CONF_RX_USART_PINMUX_PAD1;
    319a:	4b2a      	ldr	r3, [pc, #168]	; (3244 <main+0x128>)
    319c:	6363      	str	r3, [r4, #52]	; 0x34
	usart_rx_config.pinmux_pad2 = CONF_RX_USART_PINMUX_PAD2;
    319e:	63a5      	str	r5, [r4, #56]	; 0x38
	usart_rx_config.pinmux_pad3 = CONF_RX_USART_PINMUX_PAD3;
    31a0:	63e5      	str	r5, [r4, #60]	; 0x3c
	usart_rx_config.baudrate    = TEST_USART_SPEED;
    31a2:	25e1      	movs	r5, #225	; 0xe1
    31a4:	026d      	lsls	r5, r5, #9
    31a6:	6225      	str	r5, [r4, #32]
	/* Apply configuration */
	usart_init(&usart_rx_module, CONF_RX_USART, &usart_rx_config);
    31a8:	4827      	ldr	r0, [pc, #156]	; (3248 <main+0x12c>)
    31aa:	4682      	mov	sl, r0
    31ac:	4927      	ldr	r1, [pc, #156]	; (324c <main+0x130>)
    31ae:	1c22      	adds	r2, r4, #0
    31b0:	47b8      	blx	r7
	/* Enable USART */
	usart_enable(&usart_rx_module);
    31b2:	4650      	mov	r0, sl
    31b4:	47b0      	blx	r6

	/* Configure TX USART */
	usart_get_config_defaults(&usart_tx_config);
    31b6:	4c26      	ldr	r4, [pc, #152]	; (3250 <main+0x134>)
    31b8:	1c20      	adds	r0, r4, #0
    31ba:	47c8      	blx	r9
	usart_tx_config.mux_setting = CONF_TX_USART_SERCOM_MUX;
    31bc:	4642      	mov	r2, r8
    31be:	60e2      	str	r2, [r4, #12]
	usart_tx_config.pinmux_pad0 = CONF_TX_USART_PINMUX_PAD0;
    31c0:	4b24      	ldr	r3, [pc, #144]	; (3254 <main+0x138>)
    31c2:	6323      	str	r3, [r4, #48]	; 0x30
	usart_tx_config.pinmux_pad1 = CONF_TX_USART_PINMUX_PAD1;
    31c4:	4b24      	ldr	r3, [pc, #144]	; (3258 <main+0x13c>)
    31c6:	6363      	str	r3, [r4, #52]	; 0x34
	usart_tx_config.pinmux_pad2 = CONF_TX_USART_PINMUX_PAD2;
    31c8:	4b24      	ldr	r3, [pc, #144]	; (325c <main+0x140>)
    31ca:	63a3      	str	r3, [r4, #56]	; 0x38
	usart_tx_config.pinmux_pad3 = CONF_TX_USART_PINMUX_PAD3;
    31cc:	4b24      	ldr	r3, [pc, #144]	; (3260 <main+0x144>)
    31ce:	63e3      	str	r3, [r4, #60]	; 0x3c
	usart_tx_config.baudrate    = TEST_USART_SPEED;
    31d0:	6225      	str	r5, [r4, #32]
	/* Apply configuration */
	usart_init(&usart_tx_module, CONF_TX_USART, &usart_tx_config);
    31d2:	4d24      	ldr	r5, [pc, #144]	; (3264 <main+0x148>)
    31d4:	1c28      	adds	r0, r5, #0
    31d6:	4924      	ldr	r1, [pc, #144]	; (3268 <main+0x14c>)
    31d8:	1c22      	adds	r2, r4, #0
    31da:	47b8      	blx	r7
	/* Enable USART */
	usart_enable(&usart_tx_module);
    31dc:	1c28      	adds	r0, r5, #0
    31de:	47b0      	blx	r6
	DEFINE_TEST_CASE(receive_buffer_test, NULL,
			run_buffer_read_write_interrupt_test, NULL,
			"Buffer interrupt read and write");

	/* Put test case addresses in an array */
	DEFINE_TEST_ARRAY(usart_tests) = {
    31e0:	ab14      	add	r3, sp, #80	; 0x50
    31e2:	4a22      	ldr	r2, [pc, #136]	; (326c <main+0x150>)
    31e4:	1c19      	adds	r1, r3, #0
    31e6:	ca31      	ldmia	r2!, {r0, r4, r5}
    31e8:	c131      	stmia	r1!, {r0, r4, r5}
    31ea:	6812      	ldr	r2, [r2, #0]
    31ec:	600a      	str	r2, [r1, #0]
			&transfer_buffer_test,
			&receive_buffer_test,
			};

	/* Define the test suite */
	DEFINE_TEST_SUITE(usart_suite, usart_tests,
    31ee:	2204      	movs	r2, #4
    31f0:	9211      	str	r2, [sp, #68]	; 0x44
    31f2:	9312      	str	r3, [sp, #72]	; 0x48
    31f4:	4b1e      	ldr	r3, [pc, #120]	; (3270 <main+0x154>)
    31f6:	9313      	str	r3, [sp, #76]	; 0x4c
			"SAM USART driver test suite");

	/* Run all tests in the suite*/
	test_suite_run(&usart_suite);
    31f8:	a811      	add	r0, sp, #68	; 0x44
    31fa:	4b1e      	ldr	r3, [pc, #120]	; (3274 <main+0x158>)
    31fc:	4798      	blx	r3
    31fe:	e7fe      	b.n	31fe <main+0xe2>
    3200:	00002445 	.word	0x00002445
    3204:	00002631 	.word	0x00002631
    3208:	00160002 	.word	0x00160002
    320c:	00170002 	.word	0x00170002
    3210:	2000018c 	.word	0x2000018c
    3214:	20000150 	.word	0x20000150
    3218:	000027e5 	.word	0x000027e5
    321c:	2000014c 	.word	0x2000014c
    3220:	00002861 	.word	0x00002861
    3224:	20000148 	.word	0x20000148
    3228:	42001400 	.word	0x42001400
    322c:	00000a65 	.word	0x00000a65
    3230:	20000064 	.word	0x20000064
    3234:	000034d9 	.word	0x000034d9
    3238:	0000288d 	.word	0x0000288d
    323c:	20000234 	.word	0x20000234
    3240:	00280003 	.word	0x00280003
    3244:	00290003 	.word	0x00290003
    3248:	20000154 	.word	0x20000154
    324c:	42001800 	.word	0x42001800
    3250:	200001c0 	.word	0x200001c0
    3254:	00040003 	.word	0x00040003
    3258:	00050003 	.word	0x00050003
    325c:	00060003 	.word	0x00060003
    3260:	00070003 	.word	0x00070003
    3264:	20000200 	.word	0x20000200
    3268:	42000800 	.word	0x42000800
    326c:	0000486c 	.word	0x0000486c
    3270:	000048dc 	.word	0x000048dc
    3274:	00000301 	.word	0x00000301

00003278 <__aeabi_uidiv>:
    3278:	2900      	cmp	r1, #0
    327a:	d034      	beq.n	32e6 <.udivsi3_skip_div0_test+0x6a>

0000327c <.udivsi3_skip_div0_test>:
    327c:	2301      	movs	r3, #1
    327e:	2200      	movs	r2, #0
    3280:	b410      	push	{r4}
    3282:	4288      	cmp	r0, r1
    3284:	d32c      	bcc.n	32e0 <.udivsi3_skip_div0_test+0x64>
    3286:	2401      	movs	r4, #1
    3288:	0724      	lsls	r4, r4, #28
    328a:	42a1      	cmp	r1, r4
    328c:	d204      	bcs.n	3298 <.udivsi3_skip_div0_test+0x1c>
    328e:	4281      	cmp	r1, r0
    3290:	d202      	bcs.n	3298 <.udivsi3_skip_div0_test+0x1c>
    3292:	0109      	lsls	r1, r1, #4
    3294:	011b      	lsls	r3, r3, #4
    3296:	e7f8      	b.n	328a <.udivsi3_skip_div0_test+0xe>
    3298:	00e4      	lsls	r4, r4, #3
    329a:	42a1      	cmp	r1, r4
    329c:	d204      	bcs.n	32a8 <.udivsi3_skip_div0_test+0x2c>
    329e:	4281      	cmp	r1, r0
    32a0:	d202      	bcs.n	32a8 <.udivsi3_skip_div0_test+0x2c>
    32a2:	0049      	lsls	r1, r1, #1
    32a4:	005b      	lsls	r3, r3, #1
    32a6:	e7f8      	b.n	329a <.udivsi3_skip_div0_test+0x1e>
    32a8:	4288      	cmp	r0, r1
    32aa:	d301      	bcc.n	32b0 <.udivsi3_skip_div0_test+0x34>
    32ac:	1a40      	subs	r0, r0, r1
    32ae:	431a      	orrs	r2, r3
    32b0:	084c      	lsrs	r4, r1, #1
    32b2:	42a0      	cmp	r0, r4
    32b4:	d302      	bcc.n	32bc <.udivsi3_skip_div0_test+0x40>
    32b6:	1b00      	subs	r0, r0, r4
    32b8:	085c      	lsrs	r4, r3, #1
    32ba:	4322      	orrs	r2, r4
    32bc:	088c      	lsrs	r4, r1, #2
    32be:	42a0      	cmp	r0, r4
    32c0:	d302      	bcc.n	32c8 <.udivsi3_skip_div0_test+0x4c>
    32c2:	1b00      	subs	r0, r0, r4
    32c4:	089c      	lsrs	r4, r3, #2
    32c6:	4322      	orrs	r2, r4
    32c8:	08cc      	lsrs	r4, r1, #3
    32ca:	42a0      	cmp	r0, r4
    32cc:	d302      	bcc.n	32d4 <.udivsi3_skip_div0_test+0x58>
    32ce:	1b00      	subs	r0, r0, r4
    32d0:	08dc      	lsrs	r4, r3, #3
    32d2:	4322      	orrs	r2, r4
    32d4:	2800      	cmp	r0, #0
    32d6:	d003      	beq.n	32e0 <.udivsi3_skip_div0_test+0x64>
    32d8:	091b      	lsrs	r3, r3, #4
    32da:	d001      	beq.n	32e0 <.udivsi3_skip_div0_test+0x64>
    32dc:	0909      	lsrs	r1, r1, #4
    32de:	e7e3      	b.n	32a8 <.udivsi3_skip_div0_test+0x2c>
    32e0:	1c10      	adds	r0, r2, #0
    32e2:	bc10      	pop	{r4}
    32e4:	4770      	bx	lr
    32e6:	2800      	cmp	r0, #0
    32e8:	d001      	beq.n	32ee <.udivsi3_skip_div0_test+0x72>
    32ea:	2000      	movs	r0, #0
    32ec:	43c0      	mvns	r0, r0
    32ee:	b407      	push	{r0, r1, r2}
    32f0:	4802      	ldr	r0, [pc, #8]	; (32fc <.udivsi3_skip_div0_test+0x80>)
    32f2:	a102      	add	r1, pc, #8	; (adr r1, 32fc <.udivsi3_skip_div0_test+0x80>)
    32f4:	1840      	adds	r0, r0, r1
    32f6:	9002      	str	r0, [sp, #8]
    32f8:	bd03      	pop	{r0, r1, pc}
    32fa:	46c0      	nop			; (mov r8, r8)
    32fc:	00000019 	.word	0x00000019

00003300 <__aeabi_uidivmod>:
    3300:	2900      	cmp	r1, #0
    3302:	d0f0      	beq.n	32e6 <.udivsi3_skip_div0_test+0x6a>
    3304:	b503      	push	{r0, r1, lr}
    3306:	f7ff ffb9 	bl	327c <.udivsi3_skip_div0_test>
    330a:	bc0e      	pop	{r1, r2, r3}
    330c:	4342      	muls	r2, r0
    330e:	1a89      	subs	r1, r1, r2
    3310:	4718      	bx	r3
    3312:	46c0      	nop			; (mov r8, r8)

00003314 <__aeabi_idiv0>:
    3314:	4770      	bx	lr
    3316:	46c0      	nop			; (mov r8, r8)

00003318 <__aeabi_lmul>:
    3318:	469c      	mov	ip, r3
    331a:	0403      	lsls	r3, r0, #16
    331c:	b5f0      	push	{r4, r5, r6, r7, lr}
    331e:	0c1b      	lsrs	r3, r3, #16
    3320:	0417      	lsls	r7, r2, #16
    3322:	0c3f      	lsrs	r7, r7, #16
    3324:	0c15      	lsrs	r5, r2, #16
    3326:	1c1e      	adds	r6, r3, #0
    3328:	1c04      	adds	r4, r0, #0
    332a:	0c00      	lsrs	r0, r0, #16
    332c:	437e      	muls	r6, r7
    332e:	436b      	muls	r3, r5
    3330:	4347      	muls	r7, r0
    3332:	4345      	muls	r5, r0
    3334:	18fb      	adds	r3, r7, r3
    3336:	0c30      	lsrs	r0, r6, #16
    3338:	1818      	adds	r0, r3, r0
    333a:	4287      	cmp	r7, r0
    333c:	d902      	bls.n	3344 <__aeabi_lmul+0x2c>
    333e:	2380      	movs	r3, #128	; 0x80
    3340:	025b      	lsls	r3, r3, #9
    3342:	18ed      	adds	r5, r5, r3
    3344:	0c03      	lsrs	r3, r0, #16
    3346:	18ed      	adds	r5, r5, r3
    3348:	4663      	mov	r3, ip
    334a:	435c      	muls	r4, r3
    334c:	434a      	muls	r2, r1
    334e:	0436      	lsls	r6, r6, #16
    3350:	0c36      	lsrs	r6, r6, #16
    3352:	18a1      	adds	r1, r4, r2
    3354:	0400      	lsls	r0, r0, #16
    3356:	1980      	adds	r0, r0, r6
    3358:	1949      	adds	r1, r1, r5
    335a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000335c <__libc_init_array>:
    335c:	b570      	push	{r4, r5, r6, lr}
    335e:	4b0e      	ldr	r3, [pc, #56]	; (3398 <__libc_init_array+0x3c>)
    3360:	4d0e      	ldr	r5, [pc, #56]	; (339c <__libc_init_array+0x40>)
    3362:	2400      	movs	r4, #0
    3364:	1aed      	subs	r5, r5, r3
    3366:	10ad      	asrs	r5, r5, #2
    3368:	1c1e      	adds	r6, r3, #0
    336a:	42ac      	cmp	r4, r5
    336c:	d004      	beq.n	3378 <__libc_init_array+0x1c>
    336e:	00a3      	lsls	r3, r4, #2
    3370:	58f3      	ldr	r3, [r6, r3]
    3372:	4798      	blx	r3
    3374:	3401      	adds	r4, #1
    3376:	e7f8      	b.n	336a <__libc_init_array+0xe>
    3378:	f001 fb96 	bl	4aa8 <_init>
    337c:	4b08      	ldr	r3, [pc, #32]	; (33a0 <__libc_init_array+0x44>)
    337e:	4d09      	ldr	r5, [pc, #36]	; (33a4 <__libc_init_array+0x48>)
    3380:	2400      	movs	r4, #0
    3382:	1aed      	subs	r5, r5, r3
    3384:	10ad      	asrs	r5, r5, #2
    3386:	1c1e      	adds	r6, r3, #0
    3388:	42ac      	cmp	r4, r5
    338a:	d004      	beq.n	3396 <__libc_init_array+0x3a>
    338c:	00a3      	lsls	r3, r4, #2
    338e:	58f3      	ldr	r3, [r6, r3]
    3390:	4798      	blx	r3
    3392:	3401      	adds	r4, #1
    3394:	e7f8      	b.n	3388 <__libc_init_array+0x2c>
    3396:	bd70      	pop	{r4, r5, r6, pc}
    3398:	00004ab4 	.word	0x00004ab4
    339c:	00004ab4 	.word	0x00004ab4
    33a0:	00004ab4 	.word	0x00004ab4
    33a4:	00004ab8 	.word	0x00004ab8

000033a8 <memcpy>:
    33a8:	b510      	push	{r4, lr}
    33aa:	2300      	movs	r3, #0
    33ac:	4293      	cmp	r3, r2
    33ae:	d003      	beq.n	33b8 <memcpy+0x10>
    33b0:	5ccc      	ldrb	r4, [r1, r3]
    33b2:	54c4      	strb	r4, [r0, r3]
    33b4:	3301      	adds	r3, #1
    33b6:	e7f9      	b.n	33ac <memcpy+0x4>
    33b8:	bd10      	pop	{r4, pc}

000033ba <memset>:
    33ba:	1c03      	adds	r3, r0, #0
    33bc:	1882      	adds	r2, r0, r2
    33be:	4293      	cmp	r3, r2
    33c0:	d002      	beq.n	33c8 <memset+0xe>
    33c2:	7019      	strb	r1, [r3, #0]
    33c4:	3301      	adds	r3, #1
    33c6:	e7fa      	b.n	33be <memset+0x4>
    33c8:	4770      	bx	lr
	...

000033cc <iprintf>:
    33cc:	b40f      	push	{r0, r1, r2, r3}
    33ce:	4b0b      	ldr	r3, [pc, #44]	; (33fc <iprintf+0x30>)
    33d0:	b513      	push	{r0, r1, r4, lr}
    33d2:	681c      	ldr	r4, [r3, #0]
    33d4:	2c00      	cmp	r4, #0
    33d6:	d005      	beq.n	33e4 <iprintf+0x18>
    33d8:	69a3      	ldr	r3, [r4, #24]
    33da:	2b00      	cmp	r3, #0
    33dc:	d102      	bne.n	33e4 <iprintf+0x18>
    33de:	1c20      	adds	r0, r4, #0
    33e0:	f000 fdca 	bl	3f78 <__sinit>
    33e4:	ab05      	add	r3, sp, #20
    33e6:	68a1      	ldr	r1, [r4, #8]
    33e8:	1c20      	adds	r0, r4, #0
    33ea:	9a04      	ldr	r2, [sp, #16]
    33ec:	9301      	str	r3, [sp, #4]
    33ee:	f000 f94f 	bl	3690 <_vfiprintf_r>
    33f2:	bc16      	pop	{r1, r2, r4}
    33f4:	bc08      	pop	{r3}
    33f6:	b004      	add	sp, #16
    33f8:	4718      	bx	r3
    33fa:	46c0      	nop			; (mov r8, r8)
    33fc:	20000064 	.word	0x20000064

00003400 <_puts_r>:
    3400:	b570      	push	{r4, r5, r6, lr}
    3402:	1c05      	adds	r5, r0, #0
    3404:	1c0e      	adds	r6, r1, #0
    3406:	2800      	cmp	r0, #0
    3408:	d004      	beq.n	3414 <_puts_r+0x14>
    340a:	6982      	ldr	r2, [r0, #24]
    340c:	2a00      	cmp	r2, #0
    340e:	d101      	bne.n	3414 <_puts_r+0x14>
    3410:	f000 fdb2 	bl	3f78 <__sinit>
    3414:	68ac      	ldr	r4, [r5, #8]
    3416:	89a3      	ldrh	r3, [r4, #12]
    3418:	071a      	lsls	r2, r3, #28
    341a:	d502      	bpl.n	3422 <_puts_r+0x22>
    341c:	6923      	ldr	r3, [r4, #16]
    341e:	2b00      	cmp	r3, #0
    3420:	d119      	bne.n	3456 <_puts_r+0x56>
    3422:	1c28      	adds	r0, r5, #0
    3424:	1c21      	adds	r1, r4, #0
    3426:	f000 fc2b 	bl	3c80 <__swsetup_r>
    342a:	2800      	cmp	r0, #0
    342c:	d013      	beq.n	3456 <_puts_r+0x56>
    342e:	2001      	movs	r0, #1
    3430:	4240      	negs	r0, r0
    3432:	e045      	b.n	34c0 <_puts_r+0xc0>
    3434:	7831      	ldrb	r1, [r6, #0]
    3436:	2b00      	cmp	r3, #0
    3438:	da1b      	bge.n	3472 <_puts_r+0x72>
    343a:	69a2      	ldr	r2, [r4, #24]
    343c:	4293      	cmp	r3, r2
    343e:	da11      	bge.n	3464 <_puts_r+0x64>
    3440:	1c28      	adds	r0, r5, #0
    3442:	1c22      	adds	r2, r4, #0
    3444:	f000 fbc4 	bl	3bd0 <__swbuf_r>
    3448:	3001      	adds	r0, #1
    344a:	4243      	negs	r3, r0
    344c:	4158      	adcs	r0, r3
    344e:	b2c0      	uxtb	r0, r0
    3450:	2800      	cmp	r0, #0
    3452:	d1ec      	bne.n	342e <_puts_r+0x2e>
    3454:	3601      	adds	r6, #1
    3456:	68a3      	ldr	r3, [r4, #8]
    3458:	7832      	ldrb	r2, [r6, #0]
    345a:	3b01      	subs	r3, #1
    345c:	60a3      	str	r3, [r4, #8]
    345e:	2a00      	cmp	r2, #0
    3460:	d1e8      	bne.n	3434 <_puts_r+0x34>
    3462:	e00c      	b.n	347e <_puts_r+0x7e>
    3464:	6823      	ldr	r3, [r4, #0]
    3466:	7019      	strb	r1, [r3, #0]
    3468:	6823      	ldr	r3, [r4, #0]
    346a:	7819      	ldrb	r1, [r3, #0]
    346c:	290a      	cmp	r1, #10
    346e:	d103      	bne.n	3478 <_puts_r+0x78>
    3470:	e7e6      	b.n	3440 <_puts_r+0x40>
    3472:	6822      	ldr	r2, [r4, #0]
    3474:	7011      	strb	r1, [r2, #0]
    3476:	6823      	ldr	r3, [r4, #0]
    3478:	3301      	adds	r3, #1
    347a:	6023      	str	r3, [r4, #0]
    347c:	e7ea      	b.n	3454 <_puts_r+0x54>
    347e:	2b00      	cmp	r3, #0
    3480:	da17      	bge.n	34b2 <_puts_r+0xb2>
    3482:	69a2      	ldr	r2, [r4, #24]
    3484:	4293      	cmp	r3, r2
    3486:	db08      	blt.n	349a <_puts_r+0x9a>
    3488:	6822      	ldr	r2, [r4, #0]
    348a:	230a      	movs	r3, #10
    348c:	7013      	strb	r3, [r2, #0]
    348e:	6823      	ldr	r3, [r4, #0]
    3490:	7819      	ldrb	r1, [r3, #0]
    3492:	290a      	cmp	r1, #10
    3494:	d111      	bne.n	34ba <_puts_r+0xba>
    3496:	1c28      	adds	r0, r5, #0
    3498:	e001      	b.n	349e <_puts_r+0x9e>
    349a:	1c28      	adds	r0, r5, #0
    349c:	210a      	movs	r1, #10
    349e:	1c22      	adds	r2, r4, #0
    34a0:	f000 fb96 	bl	3bd0 <__swbuf_r>
    34a4:	3001      	adds	r0, #1
    34a6:	4243      	negs	r3, r0
    34a8:	4158      	adcs	r0, r3
    34aa:	b2c0      	uxtb	r0, r0
    34ac:	2800      	cmp	r0, #0
    34ae:	d006      	beq.n	34be <_puts_r+0xbe>
    34b0:	e7bd      	b.n	342e <_puts_r+0x2e>
    34b2:	6822      	ldr	r2, [r4, #0]
    34b4:	230a      	movs	r3, #10
    34b6:	7013      	strb	r3, [r2, #0]
    34b8:	6823      	ldr	r3, [r4, #0]
    34ba:	3301      	adds	r3, #1
    34bc:	6023      	str	r3, [r4, #0]
    34be:	200a      	movs	r0, #10
    34c0:	bd70      	pop	{r4, r5, r6, pc}
	...

000034c4 <puts>:
    34c4:	b508      	push	{r3, lr}
    34c6:	4b03      	ldr	r3, [pc, #12]	; (34d4 <puts+0x10>)
    34c8:	1c01      	adds	r1, r0, #0
    34ca:	6818      	ldr	r0, [r3, #0]
    34cc:	f7ff ff98 	bl	3400 <_puts_r>
    34d0:	bd08      	pop	{r3, pc}
    34d2:	46c0      	nop			; (mov r8, r8)
    34d4:	20000064 	.word	0x20000064

000034d8 <setbuf>:
    34d8:	b508      	push	{r3, lr}
    34da:	424a      	negs	r2, r1
    34dc:	414a      	adcs	r2, r1
    34de:	2380      	movs	r3, #128	; 0x80
    34e0:	0052      	lsls	r2, r2, #1
    34e2:	00db      	lsls	r3, r3, #3
    34e4:	f000 f81c 	bl	3520 <setvbuf>
    34e8:	bd08      	pop	{r3, pc}

000034ea <setjmp>:
    34ea:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    34ec:	4641      	mov	r1, r8
    34ee:	464a      	mov	r2, r9
    34f0:	4653      	mov	r3, sl
    34f2:	465c      	mov	r4, fp
    34f4:	466d      	mov	r5, sp
    34f6:	4676      	mov	r6, lr
    34f8:	c07e      	stmia	r0!, {r1, r2, r3, r4, r5, r6}
    34fa:	3828      	subs	r0, #40	; 0x28
    34fc:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    34fe:	2000      	movs	r0, #0
    3500:	4770      	bx	lr

00003502 <longjmp>:
    3502:	3010      	adds	r0, #16
    3504:	c87c      	ldmia	r0!, {r2, r3, r4, r5, r6}
    3506:	4690      	mov	r8, r2
    3508:	4699      	mov	r9, r3
    350a:	46a2      	mov	sl, r4
    350c:	46ab      	mov	fp, r5
    350e:	46b5      	mov	sp, r6
    3510:	c808      	ldmia	r0!, {r3}
    3512:	3828      	subs	r0, #40	; 0x28
    3514:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    3516:	1c08      	adds	r0, r1, #0
    3518:	d100      	bne.n	351c <longjmp+0x1a>
    351a:	2001      	movs	r0, #1
    351c:	4718      	bx	r3
	...

00003520 <setvbuf>:
    3520:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3522:	1c1e      	adds	r6, r3, #0
    3524:	4b3c      	ldr	r3, [pc, #240]	; (3618 <setvbuf+0xf8>)
    3526:	1c04      	adds	r4, r0, #0
    3528:	681d      	ldr	r5, [r3, #0]
    352a:	1c0f      	adds	r7, r1, #0
    352c:	9201      	str	r2, [sp, #4]
    352e:	2d00      	cmp	r5, #0
    3530:	d005      	beq.n	353e <setvbuf+0x1e>
    3532:	69aa      	ldr	r2, [r5, #24]
    3534:	2a00      	cmp	r2, #0
    3536:	d102      	bne.n	353e <setvbuf+0x1e>
    3538:	1c28      	adds	r0, r5, #0
    353a:	f000 fd1d 	bl	3f78 <__sinit>
    353e:	4b37      	ldr	r3, [pc, #220]	; (361c <setvbuf+0xfc>)
    3540:	429c      	cmp	r4, r3
    3542:	d101      	bne.n	3548 <setvbuf+0x28>
    3544:	686c      	ldr	r4, [r5, #4]
    3546:	e008      	b.n	355a <setvbuf+0x3a>
    3548:	4b35      	ldr	r3, [pc, #212]	; (3620 <setvbuf+0x100>)
    354a:	429c      	cmp	r4, r3
    354c:	d101      	bne.n	3552 <setvbuf+0x32>
    354e:	68ac      	ldr	r4, [r5, #8]
    3550:	e003      	b.n	355a <setvbuf+0x3a>
    3552:	4b34      	ldr	r3, [pc, #208]	; (3624 <setvbuf+0x104>)
    3554:	429c      	cmp	r4, r3
    3556:	d100      	bne.n	355a <setvbuf+0x3a>
    3558:	68ec      	ldr	r4, [r5, #12]
    355a:	9b01      	ldr	r3, [sp, #4]
    355c:	2b02      	cmp	r3, #2
    355e:	d857      	bhi.n	3610 <setvbuf+0xf0>
    3560:	2e00      	cmp	r6, #0
    3562:	db55      	blt.n	3610 <setvbuf+0xf0>
    3564:	1c28      	adds	r0, r5, #0
    3566:	1c21      	adds	r1, r4, #0
    3568:	f000 fc86 	bl	3e78 <_fflush_r>
    356c:	2300      	movs	r3, #0
    356e:	6063      	str	r3, [r4, #4]
    3570:	61a3      	str	r3, [r4, #24]
    3572:	89a3      	ldrh	r3, [r4, #12]
    3574:	061a      	lsls	r2, r3, #24
    3576:	d503      	bpl.n	3580 <setvbuf+0x60>
    3578:	1c28      	adds	r0, r5, #0
    357a:	6921      	ldr	r1, [r4, #16]
    357c:	f000 fdd2 	bl	4124 <_free_r>
    3580:	89a3      	ldrh	r3, [r4, #12]
    3582:	2283      	movs	r2, #131	; 0x83
    3584:	4393      	bics	r3, r2
    3586:	81a3      	strh	r3, [r4, #12]
    3588:	9b01      	ldr	r3, [sp, #4]
    358a:	2b02      	cmp	r3, #2
    358c:	d013      	beq.n	35b6 <setvbuf+0x96>
    358e:	2f00      	cmp	r7, #0
    3590:	d125      	bne.n	35de <setvbuf+0xbe>
    3592:	2e00      	cmp	r6, #0
    3594:	d101      	bne.n	359a <setvbuf+0x7a>
    3596:	2680      	movs	r6, #128	; 0x80
    3598:	00f6      	lsls	r6, r6, #3
    359a:	1c30      	adds	r0, r6, #0
    359c:	f000 fdac 	bl	40f8 <malloc>
    35a0:	1e07      	subs	r7, r0, #0
    35a2:	d118      	bne.n	35d6 <setvbuf+0xb6>
    35a4:	2080      	movs	r0, #128	; 0x80
    35a6:	00c0      	lsls	r0, r0, #3
    35a8:	f000 fda6 	bl	40f8 <malloc>
    35ac:	1e07      	subs	r7, r0, #0
    35ae:	d110      	bne.n	35d2 <setvbuf+0xb2>
    35b0:	2001      	movs	r0, #1
    35b2:	4240      	negs	r0, r0
    35b4:	e000      	b.n	35b8 <setvbuf+0x98>
    35b6:	2000      	movs	r0, #0
    35b8:	89a3      	ldrh	r3, [r4, #12]
    35ba:	2202      	movs	r2, #2
    35bc:	4313      	orrs	r3, r2
    35be:	81a3      	strh	r3, [r4, #12]
    35c0:	2300      	movs	r3, #0
    35c2:	60a3      	str	r3, [r4, #8]
    35c4:	1c23      	adds	r3, r4, #0
    35c6:	3347      	adds	r3, #71	; 0x47
    35c8:	6023      	str	r3, [r4, #0]
    35ca:	6123      	str	r3, [r4, #16]
    35cc:	2301      	movs	r3, #1
    35ce:	6163      	str	r3, [r4, #20]
    35d0:	e020      	b.n	3614 <setvbuf+0xf4>
    35d2:	2680      	movs	r6, #128	; 0x80
    35d4:	00f6      	lsls	r6, r6, #3
    35d6:	89a3      	ldrh	r3, [r4, #12]
    35d8:	2280      	movs	r2, #128	; 0x80
    35da:	4313      	orrs	r3, r2
    35dc:	81a3      	strh	r3, [r4, #12]
    35de:	9a01      	ldr	r2, [sp, #4]
    35e0:	2a01      	cmp	r2, #1
    35e2:	d104      	bne.n	35ee <setvbuf+0xce>
    35e4:	89a3      	ldrh	r3, [r4, #12]
    35e6:	4313      	orrs	r3, r2
    35e8:	81a3      	strh	r3, [r4, #12]
    35ea:	4273      	negs	r3, r6
    35ec:	61a3      	str	r3, [r4, #24]
    35ee:	4b0e      	ldr	r3, [pc, #56]	; (3628 <setvbuf+0x108>)
    35f0:	2000      	movs	r0, #0
    35f2:	62ab      	str	r3, [r5, #40]	; 0x28
    35f4:	89a3      	ldrh	r3, [r4, #12]
    35f6:	6027      	str	r7, [r4, #0]
    35f8:	6127      	str	r7, [r4, #16]
    35fa:	6166      	str	r6, [r4, #20]
    35fc:	071a      	lsls	r2, r3, #28
    35fe:	d509      	bpl.n	3614 <setvbuf+0xf4>
    3600:	2203      	movs	r2, #3
    3602:	4013      	ands	r3, r2
    3604:	425a      	negs	r2, r3
    3606:	4153      	adcs	r3, r2
    3608:	425b      	negs	r3, r3
    360a:	401e      	ands	r6, r3
    360c:	60a6      	str	r6, [r4, #8]
    360e:	e001      	b.n	3614 <setvbuf+0xf4>
    3610:	2001      	movs	r0, #1
    3612:	4240      	negs	r0, r0
    3614:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3616:	46c0      	nop			; (mov r8, r8)
    3618:	20000064 	.word	0x20000064
    361c:	00004a48 	.word	0x00004a48
    3620:	00004a68 	.word	0x00004a68
    3624:	00004a88 	.word	0x00004a88
    3628:	00003ed1 	.word	0x00003ed1

0000362c <strcmp>:
    362c:	7802      	ldrb	r2, [r0, #0]
    362e:	780b      	ldrb	r3, [r1, #0]
    3630:	3001      	adds	r0, #1
    3632:	3101      	adds	r1, #1
    3634:	2a00      	cmp	r2, #0
    3636:	d001      	beq.n	363c <strcmp+0x10>
    3638:	429a      	cmp	r2, r3
    363a:	d0f7      	beq.n	362c <strcmp>
    363c:	1ad0      	subs	r0, r2, r3
    363e:	4770      	bx	lr

00003640 <__sfputc_r>:
    3640:	6893      	ldr	r3, [r2, #8]
    3642:	b510      	push	{r4, lr}
    3644:	3b01      	subs	r3, #1
    3646:	6093      	str	r3, [r2, #8]
    3648:	2b00      	cmp	r3, #0
    364a:	da05      	bge.n	3658 <__sfputc_r+0x18>
    364c:	6994      	ldr	r4, [r2, #24]
    364e:	42a3      	cmp	r3, r4
    3650:	db08      	blt.n	3664 <__sfputc_r+0x24>
    3652:	b2cb      	uxtb	r3, r1
    3654:	2b0a      	cmp	r3, #10
    3656:	d005      	beq.n	3664 <__sfputc_r+0x24>
    3658:	6813      	ldr	r3, [r2, #0]
    365a:	1c58      	adds	r0, r3, #1
    365c:	6010      	str	r0, [r2, #0]
    365e:	7019      	strb	r1, [r3, #0]
    3660:	b2c8      	uxtb	r0, r1
    3662:	e001      	b.n	3668 <__sfputc_r+0x28>
    3664:	f000 fab4 	bl	3bd0 <__swbuf_r>
    3668:	bd10      	pop	{r4, pc}

0000366a <__sfputs_r>:
    366a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    366c:	1c06      	adds	r6, r0, #0
    366e:	1c0f      	adds	r7, r1, #0
    3670:	1c14      	adds	r4, r2, #0
    3672:	18d5      	adds	r5, r2, r3
    3674:	42ac      	cmp	r4, r5
    3676:	d008      	beq.n	368a <__sfputs_r+0x20>
    3678:	7821      	ldrb	r1, [r4, #0]
    367a:	1c30      	adds	r0, r6, #0
    367c:	1c3a      	adds	r2, r7, #0
    367e:	f7ff ffdf 	bl	3640 <__sfputc_r>
    3682:	3401      	adds	r4, #1
    3684:	1c43      	adds	r3, r0, #1
    3686:	d1f5      	bne.n	3674 <__sfputs_r+0xa>
    3688:	e000      	b.n	368c <__sfputs_r+0x22>
    368a:	2000      	movs	r0, #0
    368c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00003690 <_vfiprintf_r>:
    3690:	b5f0      	push	{r4, r5, r6, r7, lr}
    3692:	b09f      	sub	sp, #124	; 0x7c
    3694:	1c06      	adds	r6, r0, #0
    3696:	1c0f      	adds	r7, r1, #0
    3698:	9203      	str	r2, [sp, #12]
    369a:	9305      	str	r3, [sp, #20]
    369c:	2800      	cmp	r0, #0
    369e:	d004      	beq.n	36aa <_vfiprintf_r+0x1a>
    36a0:	6981      	ldr	r1, [r0, #24]
    36a2:	2900      	cmp	r1, #0
    36a4:	d101      	bne.n	36aa <_vfiprintf_r+0x1a>
    36a6:	f000 fc67 	bl	3f78 <__sinit>
    36aa:	4b75      	ldr	r3, [pc, #468]	; (3880 <_vfiprintf_r+0x1f0>)
    36ac:	429f      	cmp	r7, r3
    36ae:	d101      	bne.n	36b4 <_vfiprintf_r+0x24>
    36b0:	6877      	ldr	r7, [r6, #4]
    36b2:	e008      	b.n	36c6 <_vfiprintf_r+0x36>
    36b4:	4b73      	ldr	r3, [pc, #460]	; (3884 <_vfiprintf_r+0x1f4>)
    36b6:	429f      	cmp	r7, r3
    36b8:	d101      	bne.n	36be <_vfiprintf_r+0x2e>
    36ba:	68b7      	ldr	r7, [r6, #8]
    36bc:	e003      	b.n	36c6 <_vfiprintf_r+0x36>
    36be:	4b72      	ldr	r3, [pc, #456]	; (3888 <_vfiprintf_r+0x1f8>)
    36c0:	429f      	cmp	r7, r3
    36c2:	d100      	bne.n	36c6 <_vfiprintf_r+0x36>
    36c4:	68f7      	ldr	r7, [r6, #12]
    36c6:	89bb      	ldrh	r3, [r7, #12]
    36c8:	071a      	lsls	r2, r3, #28
    36ca:	d50a      	bpl.n	36e2 <_vfiprintf_r+0x52>
    36cc:	693b      	ldr	r3, [r7, #16]
    36ce:	2b00      	cmp	r3, #0
    36d0:	d007      	beq.n	36e2 <_vfiprintf_r+0x52>
    36d2:	ad06      	add	r5, sp, #24
    36d4:	2300      	movs	r3, #0
    36d6:	616b      	str	r3, [r5, #20]
    36d8:	2320      	movs	r3, #32
    36da:	766b      	strb	r3, [r5, #25]
    36dc:	2330      	movs	r3, #48	; 0x30
    36de:	76ab      	strb	r3, [r5, #26]
    36e0:	e03b      	b.n	375a <_vfiprintf_r+0xca>
    36e2:	1c30      	adds	r0, r6, #0
    36e4:	1c39      	adds	r1, r7, #0
    36e6:	f000 facb 	bl	3c80 <__swsetup_r>
    36ea:	2800      	cmp	r0, #0
    36ec:	d0f1      	beq.n	36d2 <_vfiprintf_r+0x42>
    36ee:	2001      	movs	r0, #1
    36f0:	4240      	negs	r0, r0
    36f2:	e0c2      	b.n	387a <_vfiprintf_r+0x1ea>
    36f4:	9a05      	ldr	r2, [sp, #20]
    36f6:	1d11      	adds	r1, r2, #4
    36f8:	6812      	ldr	r2, [r2, #0]
    36fa:	9105      	str	r1, [sp, #20]
    36fc:	2a00      	cmp	r2, #0
    36fe:	db76      	blt.n	37ee <_vfiprintf_r+0x15e>
    3700:	9209      	str	r2, [sp, #36]	; 0x24
    3702:	3401      	adds	r4, #1
    3704:	7823      	ldrb	r3, [r4, #0]
    3706:	2b2e      	cmp	r3, #46	; 0x2e
    3708:	d100      	bne.n	370c <_vfiprintf_r+0x7c>
    370a:	e081      	b.n	3810 <_vfiprintf_r+0x180>
    370c:	7821      	ldrb	r1, [r4, #0]
    370e:	485f      	ldr	r0, [pc, #380]	; (388c <_vfiprintf_r+0x1fc>)
    3710:	2203      	movs	r2, #3
    3712:	f000 fcfb 	bl	410c <memchr>
    3716:	2800      	cmp	r0, #0
    3718:	d007      	beq.n	372a <_vfiprintf_r+0x9a>
    371a:	495c      	ldr	r1, [pc, #368]	; (388c <_vfiprintf_r+0x1fc>)
    371c:	682a      	ldr	r2, [r5, #0]
    371e:	1a43      	subs	r3, r0, r1
    3720:	2040      	movs	r0, #64	; 0x40
    3722:	4098      	lsls	r0, r3
    3724:	4310      	orrs	r0, r2
    3726:	6028      	str	r0, [r5, #0]
    3728:	3401      	adds	r4, #1
    372a:	7821      	ldrb	r1, [r4, #0]
    372c:	1c63      	adds	r3, r4, #1
    372e:	4858      	ldr	r0, [pc, #352]	; (3890 <_vfiprintf_r+0x200>)
    3730:	2206      	movs	r2, #6
    3732:	9303      	str	r3, [sp, #12]
    3734:	7629      	strb	r1, [r5, #24]
    3736:	f000 fce9 	bl	410c <memchr>
    373a:	2800      	cmp	r0, #0
    373c:	d100      	bne.n	3740 <_vfiprintf_r+0xb0>
    373e:	e08a      	b.n	3856 <_vfiprintf_r+0x1c6>
    3740:	4b54      	ldr	r3, [pc, #336]	; (3894 <_vfiprintf_r+0x204>)
    3742:	2b00      	cmp	r3, #0
    3744:	d17e      	bne.n	3844 <_vfiprintf_r+0x1b4>
    3746:	9b05      	ldr	r3, [sp, #20]
    3748:	2207      	movs	r2, #7
    374a:	3307      	adds	r3, #7
    374c:	4393      	bics	r3, r2
    374e:	3308      	adds	r3, #8
    3750:	9305      	str	r3, [sp, #20]
    3752:	696a      	ldr	r2, [r5, #20]
    3754:	9904      	ldr	r1, [sp, #16]
    3756:	1853      	adds	r3, r2, r1
    3758:	616b      	str	r3, [r5, #20]
    375a:	9c03      	ldr	r4, [sp, #12]
    375c:	7823      	ldrb	r3, [r4, #0]
    375e:	2b00      	cmp	r3, #0
    3760:	d104      	bne.n	376c <_vfiprintf_r+0xdc>
    3762:	9903      	ldr	r1, [sp, #12]
    3764:	1a61      	subs	r1, r4, r1
    3766:	9102      	str	r1, [sp, #8]
    3768:	d010      	beq.n	378c <_vfiprintf_r+0xfc>
    376a:	e003      	b.n	3774 <_vfiprintf_r+0xe4>
    376c:	2b25      	cmp	r3, #37	; 0x25
    376e:	d0f8      	beq.n	3762 <_vfiprintf_r+0xd2>
    3770:	3401      	adds	r4, #1
    3772:	e7f3      	b.n	375c <_vfiprintf_r+0xcc>
    3774:	1c30      	adds	r0, r6, #0
    3776:	1c39      	adds	r1, r7, #0
    3778:	9a03      	ldr	r2, [sp, #12]
    377a:	9b02      	ldr	r3, [sp, #8]
    377c:	f7ff ff75 	bl	366a <__sfputs_r>
    3780:	3001      	adds	r0, #1
    3782:	d075      	beq.n	3870 <_vfiprintf_r+0x1e0>
    3784:	696a      	ldr	r2, [r5, #20]
    3786:	9902      	ldr	r1, [sp, #8]
    3788:	1853      	adds	r3, r2, r1
    378a:	616b      	str	r3, [r5, #20]
    378c:	7823      	ldrb	r3, [r4, #0]
    378e:	2b00      	cmp	r3, #0
    3790:	d06e      	beq.n	3870 <_vfiprintf_r+0x1e0>
    3792:	2201      	movs	r2, #1
    3794:	4252      	negs	r2, r2
    3796:	606a      	str	r2, [r5, #4]
    3798:	466a      	mov	r2, sp
    379a:	2300      	movs	r3, #0
    379c:	325b      	adds	r2, #91	; 0x5b
    379e:	3401      	adds	r4, #1
    37a0:	602b      	str	r3, [r5, #0]
    37a2:	60eb      	str	r3, [r5, #12]
    37a4:	60ab      	str	r3, [r5, #8]
    37a6:	7013      	strb	r3, [r2, #0]
    37a8:	65ab      	str	r3, [r5, #88]	; 0x58
    37aa:	7821      	ldrb	r1, [r4, #0]
    37ac:	483a      	ldr	r0, [pc, #232]	; (3898 <_vfiprintf_r+0x208>)
    37ae:	2205      	movs	r2, #5
    37b0:	f000 fcac 	bl	410c <memchr>
    37b4:	2800      	cmp	r0, #0
    37b6:	d008      	beq.n	37ca <_vfiprintf_r+0x13a>
    37b8:	4a37      	ldr	r2, [pc, #220]	; (3898 <_vfiprintf_r+0x208>)
    37ba:	3401      	adds	r4, #1
    37bc:	1a83      	subs	r3, r0, r2
    37be:	2001      	movs	r0, #1
    37c0:	4098      	lsls	r0, r3
    37c2:	682b      	ldr	r3, [r5, #0]
    37c4:	4318      	orrs	r0, r3
    37c6:	6028      	str	r0, [r5, #0]
    37c8:	e7ef      	b.n	37aa <_vfiprintf_r+0x11a>
    37ca:	682b      	ldr	r3, [r5, #0]
    37cc:	06d9      	lsls	r1, r3, #27
    37ce:	d503      	bpl.n	37d8 <_vfiprintf_r+0x148>
    37d0:	466a      	mov	r2, sp
    37d2:	2120      	movs	r1, #32
    37d4:	325b      	adds	r2, #91	; 0x5b
    37d6:	7011      	strb	r1, [r2, #0]
    37d8:	071a      	lsls	r2, r3, #28
    37da:	d503      	bpl.n	37e4 <_vfiprintf_r+0x154>
    37dc:	466a      	mov	r2, sp
    37de:	212b      	movs	r1, #43	; 0x2b
    37e0:	325b      	adds	r2, #91	; 0x5b
    37e2:	7011      	strb	r1, [r2, #0]
    37e4:	7822      	ldrb	r2, [r4, #0]
    37e6:	2a2a      	cmp	r2, #42	; 0x2a
    37e8:	d084      	beq.n	36f4 <_vfiprintf_r+0x64>
    37ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    37ec:	e005      	b.n	37fa <_vfiprintf_r+0x16a>
    37ee:	4252      	negs	r2, r2
    37f0:	60ea      	str	r2, [r5, #12]
    37f2:	2202      	movs	r2, #2
    37f4:	4313      	orrs	r3, r2
    37f6:	602b      	str	r3, [r5, #0]
    37f8:	e783      	b.n	3702 <_vfiprintf_r+0x72>
    37fa:	7822      	ldrb	r2, [r4, #0]
    37fc:	3a30      	subs	r2, #48	; 0x30
    37fe:	2a09      	cmp	r2, #9
    3800:	d804      	bhi.n	380c <_vfiprintf_r+0x17c>
    3802:	210a      	movs	r1, #10
    3804:	434b      	muls	r3, r1
    3806:	3401      	adds	r4, #1
    3808:	189b      	adds	r3, r3, r2
    380a:	e7f6      	b.n	37fa <_vfiprintf_r+0x16a>
    380c:	9309      	str	r3, [sp, #36]	; 0x24
    380e:	e779      	b.n	3704 <_vfiprintf_r+0x74>
    3810:	7863      	ldrb	r3, [r4, #1]
    3812:	2b2a      	cmp	r3, #42	; 0x2a
    3814:	d109      	bne.n	382a <_vfiprintf_r+0x19a>
    3816:	9b05      	ldr	r3, [sp, #20]
    3818:	3402      	adds	r4, #2
    381a:	1d1a      	adds	r2, r3, #4
    381c:	681b      	ldr	r3, [r3, #0]
    381e:	9205      	str	r2, [sp, #20]
    3820:	2b00      	cmp	r3, #0
    3822:	da0d      	bge.n	3840 <_vfiprintf_r+0x1b0>
    3824:	2301      	movs	r3, #1
    3826:	425b      	negs	r3, r3
    3828:	e00a      	b.n	3840 <_vfiprintf_r+0x1b0>
    382a:	3401      	adds	r4, #1
    382c:	2300      	movs	r3, #0
    382e:	7822      	ldrb	r2, [r4, #0]
    3830:	3a30      	subs	r2, #48	; 0x30
    3832:	2a09      	cmp	r2, #9
    3834:	d804      	bhi.n	3840 <_vfiprintf_r+0x1b0>
    3836:	210a      	movs	r1, #10
    3838:	434b      	muls	r3, r1
    383a:	3401      	adds	r4, #1
    383c:	189b      	adds	r3, r3, r2
    383e:	e7f6      	b.n	382e <_vfiprintf_r+0x19e>
    3840:	9307      	str	r3, [sp, #28]
    3842:	e763      	b.n	370c <_vfiprintf_r+0x7c>
    3844:	ab05      	add	r3, sp, #20
    3846:	9300      	str	r3, [sp, #0]
    3848:	1c30      	adds	r0, r6, #0
    384a:	1c29      	adds	r1, r5, #0
    384c:	1c3a      	adds	r2, r7, #0
    384e:	4b13      	ldr	r3, [pc, #76]	; (389c <_vfiprintf_r+0x20c>)
    3850:	e000      	b.n	3854 <_vfiprintf_r+0x1c4>
    3852:	bf00      	nop
    3854:	e007      	b.n	3866 <_vfiprintf_r+0x1d6>
    3856:	ab05      	add	r3, sp, #20
    3858:	9300      	str	r3, [sp, #0]
    385a:	1c30      	adds	r0, r6, #0
    385c:	1c29      	adds	r1, r5, #0
    385e:	1c3a      	adds	r2, r7, #0
    3860:	4b0e      	ldr	r3, [pc, #56]	; (389c <_vfiprintf_r+0x20c>)
    3862:	f000 f89f 	bl	39a4 <_printf_i>
    3866:	9004      	str	r0, [sp, #16]
    3868:	9904      	ldr	r1, [sp, #16]
    386a:	3101      	adds	r1, #1
    386c:	d000      	beq.n	3870 <_vfiprintf_r+0x1e0>
    386e:	e770      	b.n	3752 <_vfiprintf_r+0xc2>
    3870:	89bb      	ldrh	r3, [r7, #12]
    3872:	065a      	lsls	r2, r3, #25
    3874:	d500      	bpl.n	3878 <_vfiprintf_r+0x1e8>
    3876:	e73a      	b.n	36ee <_vfiprintf_r+0x5e>
    3878:	980b      	ldr	r0, [sp, #44]	; 0x2c
    387a:	b01f      	add	sp, #124	; 0x7c
    387c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    387e:	46c0      	nop			; (mov r8, r8)
    3880:	00004a48 	.word	0x00004a48
    3884:	00004a68 	.word	0x00004a68
    3888:	00004a88 	.word	0x00004a88
    388c:	00004a1a 	.word	0x00004a1a
    3890:	00004a1e 	.word	0x00004a1e
    3894:	00000000 	.word	0x00000000
    3898:	00004a14 	.word	0x00004a14
    389c:	0000366b 	.word	0x0000366b

000038a0 <vfiprintf>:
    38a0:	b538      	push	{r3, r4, r5, lr}
    38a2:	1c13      	adds	r3, r2, #0
    38a4:	4a04      	ldr	r2, [pc, #16]	; (38b8 <vfiprintf+0x18>)
    38a6:	1c05      	adds	r5, r0, #0
    38a8:	1c0c      	adds	r4, r1, #0
    38aa:	6810      	ldr	r0, [r2, #0]
    38ac:	1c29      	adds	r1, r5, #0
    38ae:	1c22      	adds	r2, r4, #0
    38b0:	f7ff feee 	bl	3690 <_vfiprintf_r>
    38b4:	bd38      	pop	{r3, r4, r5, pc}
    38b6:	46c0      	nop			; (mov r8, r8)
    38b8:	20000064 	.word	0x20000064

000038bc <_printf_common>:
    38bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    38be:	1c15      	adds	r5, r2, #0
    38c0:	9301      	str	r3, [sp, #4]
    38c2:	690a      	ldr	r2, [r1, #16]
    38c4:	688b      	ldr	r3, [r1, #8]
    38c6:	1c06      	adds	r6, r0, #0
    38c8:	1c0c      	adds	r4, r1, #0
    38ca:	4293      	cmp	r3, r2
    38cc:	da00      	bge.n	38d0 <_printf_common+0x14>
    38ce:	1c13      	adds	r3, r2, #0
    38d0:	1c22      	adds	r2, r4, #0
    38d2:	602b      	str	r3, [r5, #0]
    38d4:	3243      	adds	r2, #67	; 0x43
    38d6:	7812      	ldrb	r2, [r2, #0]
    38d8:	2a00      	cmp	r2, #0
    38da:	d001      	beq.n	38e0 <_printf_common+0x24>
    38dc:	3301      	adds	r3, #1
    38de:	602b      	str	r3, [r5, #0]
    38e0:	6820      	ldr	r0, [r4, #0]
    38e2:	0680      	lsls	r0, r0, #26
    38e4:	d502      	bpl.n	38ec <_printf_common+0x30>
    38e6:	682b      	ldr	r3, [r5, #0]
    38e8:	3302      	adds	r3, #2
    38ea:	602b      	str	r3, [r5, #0]
    38ec:	6821      	ldr	r1, [r4, #0]
    38ee:	2706      	movs	r7, #6
    38f0:	400f      	ands	r7, r1
    38f2:	d01f      	beq.n	3934 <_printf_common+0x78>
    38f4:	1c23      	adds	r3, r4, #0
    38f6:	3343      	adds	r3, #67	; 0x43
    38f8:	781b      	ldrb	r3, [r3, #0]
    38fa:	1e5a      	subs	r2, r3, #1
    38fc:	4193      	sbcs	r3, r2
    38fe:	6822      	ldr	r2, [r4, #0]
    3900:	0692      	lsls	r2, r2, #26
    3902:	d51f      	bpl.n	3944 <_printf_common+0x88>
    3904:	18e1      	adds	r1, r4, r3
    3906:	3140      	adds	r1, #64	; 0x40
    3908:	2030      	movs	r0, #48	; 0x30
    390a:	70c8      	strb	r0, [r1, #3]
    390c:	1c21      	adds	r1, r4, #0
    390e:	1c5a      	adds	r2, r3, #1
    3910:	3145      	adds	r1, #69	; 0x45
    3912:	7809      	ldrb	r1, [r1, #0]
    3914:	18a2      	adds	r2, r4, r2
    3916:	3240      	adds	r2, #64	; 0x40
    3918:	3302      	adds	r3, #2
    391a:	70d1      	strb	r1, [r2, #3]
    391c:	e012      	b.n	3944 <_printf_common+0x88>
    391e:	1c22      	adds	r2, r4, #0
    3920:	1c30      	adds	r0, r6, #0
    3922:	9901      	ldr	r1, [sp, #4]
    3924:	3219      	adds	r2, #25
    3926:	2301      	movs	r3, #1
    3928:	9f08      	ldr	r7, [sp, #32]
    392a:	47b8      	blx	r7
    392c:	3001      	adds	r0, #1
    392e:	d011      	beq.n	3954 <_printf_common+0x98>
    3930:	9f00      	ldr	r7, [sp, #0]
    3932:	3701      	adds	r7, #1
    3934:	9700      	str	r7, [sp, #0]
    3936:	68e0      	ldr	r0, [r4, #12]
    3938:	6829      	ldr	r1, [r5, #0]
    393a:	9f00      	ldr	r7, [sp, #0]
    393c:	1a43      	subs	r3, r0, r1
    393e:	429f      	cmp	r7, r3
    3940:	dbed      	blt.n	391e <_printf_common+0x62>
    3942:	e7d7      	b.n	38f4 <_printf_common+0x38>
    3944:	1c22      	adds	r2, r4, #0
    3946:	1c30      	adds	r0, r6, #0
    3948:	9901      	ldr	r1, [sp, #4]
    394a:	3243      	adds	r2, #67	; 0x43
    394c:	9f08      	ldr	r7, [sp, #32]
    394e:	47b8      	blx	r7
    3950:	3001      	adds	r0, #1
    3952:	d102      	bne.n	395a <_printf_common+0x9e>
    3954:	2001      	movs	r0, #1
    3956:	4240      	negs	r0, r0
    3958:	e023      	b.n	39a2 <_printf_common+0xe6>
    395a:	6820      	ldr	r0, [r4, #0]
    395c:	2106      	movs	r1, #6
    395e:	682b      	ldr	r3, [r5, #0]
    3960:	68e2      	ldr	r2, [r4, #12]
    3962:	4001      	ands	r1, r0
    3964:	2500      	movs	r5, #0
    3966:	2904      	cmp	r1, #4
    3968:	d103      	bne.n	3972 <_printf_common+0xb6>
    396a:	1ad5      	subs	r5, r2, r3
    396c:	43eb      	mvns	r3, r5
    396e:	17db      	asrs	r3, r3, #31
    3970:	401d      	ands	r5, r3
    3972:	68a2      	ldr	r2, [r4, #8]
    3974:	6923      	ldr	r3, [r4, #16]
    3976:	429a      	cmp	r2, r3
    3978:	dd01      	ble.n	397e <_printf_common+0xc2>
    397a:	1ad3      	subs	r3, r2, r3
    397c:	18ed      	adds	r5, r5, r3
    397e:	2700      	movs	r7, #0
    3980:	9700      	str	r7, [sp, #0]
    3982:	9f00      	ldr	r7, [sp, #0]
    3984:	42af      	cmp	r7, r5
    3986:	da0b      	bge.n	39a0 <_printf_common+0xe4>
    3988:	1c22      	adds	r2, r4, #0
    398a:	1c30      	adds	r0, r6, #0
    398c:	9901      	ldr	r1, [sp, #4]
    398e:	321a      	adds	r2, #26
    3990:	2301      	movs	r3, #1
    3992:	9f08      	ldr	r7, [sp, #32]
    3994:	47b8      	blx	r7
    3996:	3001      	adds	r0, #1
    3998:	d0dc      	beq.n	3954 <_printf_common+0x98>
    399a:	9f00      	ldr	r7, [sp, #0]
    399c:	3701      	adds	r7, #1
    399e:	e7ef      	b.n	3980 <_printf_common+0xc4>
    39a0:	2000      	movs	r0, #0
    39a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000039a4 <_printf_i>:
    39a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    39a6:	1c0d      	adds	r5, r1, #0
    39a8:	b08b      	sub	sp, #44	; 0x2c
    39aa:	3543      	adds	r5, #67	; 0x43
    39ac:	9206      	str	r2, [sp, #24]
    39ae:	9005      	str	r0, [sp, #20]
    39b0:	9307      	str	r3, [sp, #28]
    39b2:	9504      	str	r5, [sp, #16]
    39b4:	7e0b      	ldrb	r3, [r1, #24]
    39b6:	1c0c      	adds	r4, r1, #0
    39b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    39ba:	2b6e      	cmp	r3, #110	; 0x6e
    39bc:	d100      	bne.n	39c0 <_printf_i+0x1c>
    39be:	e0a7      	b.n	3b10 <_printf_i+0x16c>
    39c0:	d811      	bhi.n	39e6 <_printf_i+0x42>
    39c2:	2b63      	cmp	r3, #99	; 0x63
    39c4:	d022      	beq.n	3a0c <_printf_i+0x68>
    39c6:	d809      	bhi.n	39dc <_printf_i+0x38>
    39c8:	2b00      	cmp	r3, #0
    39ca:	d100      	bne.n	39ce <_printf_i+0x2a>
    39cc:	e0b0      	b.n	3b30 <_printf_i+0x18c>
    39ce:	2b58      	cmp	r3, #88	; 0x58
    39d0:	d000      	beq.n	39d4 <_printf_i+0x30>
    39d2:	e0c0      	b.n	3b56 <_printf_i+0x1b2>
    39d4:	3145      	adds	r1, #69	; 0x45
    39d6:	700b      	strb	r3, [r1, #0]
    39d8:	4d7b      	ldr	r5, [pc, #492]	; (3bc8 <_printf_i+0x224>)
    39da:	e04e      	b.n	3a7a <_printf_i+0xd6>
    39dc:	2b64      	cmp	r3, #100	; 0x64
    39de:	d01c      	beq.n	3a1a <_printf_i+0x76>
    39e0:	2b69      	cmp	r3, #105	; 0x69
    39e2:	d01a      	beq.n	3a1a <_printf_i+0x76>
    39e4:	e0b7      	b.n	3b56 <_printf_i+0x1b2>
    39e6:	2b73      	cmp	r3, #115	; 0x73
    39e8:	d100      	bne.n	39ec <_printf_i+0x48>
    39ea:	e0a5      	b.n	3b38 <_printf_i+0x194>
    39ec:	d809      	bhi.n	3a02 <_printf_i+0x5e>
    39ee:	2b6f      	cmp	r3, #111	; 0x6f
    39f0:	d029      	beq.n	3a46 <_printf_i+0xa2>
    39f2:	2b70      	cmp	r3, #112	; 0x70
    39f4:	d000      	beq.n	39f8 <_printf_i+0x54>
    39f6:	e0ae      	b.n	3b56 <_printf_i+0x1b2>
    39f8:	680e      	ldr	r6, [r1, #0]
    39fa:	2320      	movs	r3, #32
    39fc:	4333      	orrs	r3, r6
    39fe:	600b      	str	r3, [r1, #0]
    3a00:	e036      	b.n	3a70 <_printf_i+0xcc>
    3a02:	2b75      	cmp	r3, #117	; 0x75
    3a04:	d01f      	beq.n	3a46 <_printf_i+0xa2>
    3a06:	2b78      	cmp	r3, #120	; 0x78
    3a08:	d032      	beq.n	3a70 <_printf_i+0xcc>
    3a0a:	e0a4      	b.n	3b56 <_printf_i+0x1b2>
    3a0c:	6813      	ldr	r3, [r2, #0]
    3a0e:	1c0d      	adds	r5, r1, #0
    3a10:	1d19      	adds	r1, r3, #4
    3a12:	3542      	adds	r5, #66	; 0x42
    3a14:	6011      	str	r1, [r2, #0]
    3a16:	681b      	ldr	r3, [r3, #0]
    3a18:	e09f      	b.n	3b5a <_printf_i+0x1b6>
    3a1a:	6821      	ldr	r1, [r4, #0]
    3a1c:	6813      	ldr	r3, [r2, #0]
    3a1e:	060e      	lsls	r6, r1, #24
    3a20:	d503      	bpl.n	3a2a <_printf_i+0x86>
    3a22:	1d19      	adds	r1, r3, #4
    3a24:	6011      	str	r1, [r2, #0]
    3a26:	681e      	ldr	r6, [r3, #0]
    3a28:	e005      	b.n	3a36 <_printf_i+0x92>
    3a2a:	0648      	lsls	r0, r1, #25
    3a2c:	d5f9      	bpl.n	3a22 <_printf_i+0x7e>
    3a2e:	1d19      	adds	r1, r3, #4
    3a30:	6011      	str	r1, [r2, #0]
    3a32:	2100      	movs	r1, #0
    3a34:	5e5e      	ldrsh	r6, [r3, r1]
    3a36:	4b64      	ldr	r3, [pc, #400]	; (3bc8 <_printf_i+0x224>)
    3a38:	2e00      	cmp	r6, #0
    3a3a:	da3b      	bge.n	3ab4 <_printf_i+0x110>
    3a3c:	9d04      	ldr	r5, [sp, #16]
    3a3e:	222d      	movs	r2, #45	; 0x2d
    3a40:	4276      	negs	r6, r6
    3a42:	702a      	strb	r2, [r5, #0]
    3a44:	e036      	b.n	3ab4 <_printf_i+0x110>
    3a46:	6821      	ldr	r1, [r4, #0]
    3a48:	6813      	ldr	r3, [r2, #0]
    3a4a:	060e      	lsls	r6, r1, #24
    3a4c:	d503      	bpl.n	3a56 <_printf_i+0xb2>
    3a4e:	1d19      	adds	r1, r3, #4
    3a50:	6011      	str	r1, [r2, #0]
    3a52:	681e      	ldr	r6, [r3, #0]
    3a54:	e004      	b.n	3a60 <_printf_i+0xbc>
    3a56:	0648      	lsls	r0, r1, #25
    3a58:	d5f9      	bpl.n	3a4e <_printf_i+0xaa>
    3a5a:	1d19      	adds	r1, r3, #4
    3a5c:	881e      	ldrh	r6, [r3, #0]
    3a5e:	6011      	str	r1, [r2, #0]
    3a60:	4b59      	ldr	r3, [pc, #356]	; (3bc8 <_printf_i+0x224>)
    3a62:	7e22      	ldrb	r2, [r4, #24]
    3a64:	9303      	str	r3, [sp, #12]
    3a66:	2708      	movs	r7, #8
    3a68:	2a6f      	cmp	r2, #111	; 0x6f
    3a6a:	d01e      	beq.n	3aaa <_printf_i+0x106>
    3a6c:	270a      	movs	r7, #10
    3a6e:	e01c      	b.n	3aaa <_printf_i+0x106>
    3a70:	1c23      	adds	r3, r4, #0
    3a72:	2178      	movs	r1, #120	; 0x78
    3a74:	3345      	adds	r3, #69	; 0x45
    3a76:	4d55      	ldr	r5, [pc, #340]	; (3bcc <_printf_i+0x228>)
    3a78:	7019      	strb	r1, [r3, #0]
    3a7a:	6811      	ldr	r1, [r2, #0]
    3a7c:	6823      	ldr	r3, [r4, #0]
    3a7e:	1d08      	adds	r0, r1, #4
    3a80:	9503      	str	r5, [sp, #12]
    3a82:	6010      	str	r0, [r2, #0]
    3a84:	061e      	lsls	r6, r3, #24
    3a86:	d501      	bpl.n	3a8c <_printf_i+0xe8>
    3a88:	680e      	ldr	r6, [r1, #0]
    3a8a:	e002      	b.n	3a92 <_printf_i+0xee>
    3a8c:	0658      	lsls	r0, r3, #25
    3a8e:	d5fb      	bpl.n	3a88 <_printf_i+0xe4>
    3a90:	880e      	ldrh	r6, [r1, #0]
    3a92:	07d9      	lsls	r1, r3, #31
    3a94:	d502      	bpl.n	3a9c <_printf_i+0xf8>
    3a96:	2220      	movs	r2, #32
    3a98:	4313      	orrs	r3, r2
    3a9a:	6023      	str	r3, [r4, #0]
    3a9c:	2710      	movs	r7, #16
    3a9e:	2e00      	cmp	r6, #0
    3aa0:	d103      	bne.n	3aaa <_printf_i+0x106>
    3aa2:	6822      	ldr	r2, [r4, #0]
    3aa4:	2320      	movs	r3, #32
    3aa6:	439a      	bics	r2, r3
    3aa8:	6022      	str	r2, [r4, #0]
    3aaa:	1c23      	adds	r3, r4, #0
    3aac:	2200      	movs	r2, #0
    3aae:	3343      	adds	r3, #67	; 0x43
    3ab0:	701a      	strb	r2, [r3, #0]
    3ab2:	e001      	b.n	3ab8 <_printf_i+0x114>
    3ab4:	9303      	str	r3, [sp, #12]
    3ab6:	270a      	movs	r7, #10
    3ab8:	6863      	ldr	r3, [r4, #4]
    3aba:	60a3      	str	r3, [r4, #8]
    3abc:	2b00      	cmp	r3, #0
    3abe:	db03      	blt.n	3ac8 <_printf_i+0x124>
    3ac0:	6825      	ldr	r5, [r4, #0]
    3ac2:	2204      	movs	r2, #4
    3ac4:	4395      	bics	r5, r2
    3ac6:	6025      	str	r5, [r4, #0]
    3ac8:	2e00      	cmp	r6, #0
    3aca:	d102      	bne.n	3ad2 <_printf_i+0x12e>
    3acc:	9d04      	ldr	r5, [sp, #16]
    3ace:	2b00      	cmp	r3, #0
    3ad0:	d00e      	beq.n	3af0 <_printf_i+0x14c>
    3ad2:	9d04      	ldr	r5, [sp, #16]
    3ad4:	1c30      	adds	r0, r6, #0
    3ad6:	1c39      	adds	r1, r7, #0
    3ad8:	f7ff fc12 	bl	3300 <__aeabi_uidivmod>
    3adc:	9803      	ldr	r0, [sp, #12]
    3ade:	3d01      	subs	r5, #1
    3ae0:	5c43      	ldrb	r3, [r0, r1]
    3ae2:	1c30      	adds	r0, r6, #0
    3ae4:	702b      	strb	r3, [r5, #0]
    3ae6:	1c39      	adds	r1, r7, #0
    3ae8:	f7ff fbc6 	bl	3278 <__aeabi_uidiv>
    3aec:	1e06      	subs	r6, r0, #0
    3aee:	d1f1      	bne.n	3ad4 <_printf_i+0x130>
    3af0:	2f08      	cmp	r7, #8
    3af2:	d109      	bne.n	3b08 <_printf_i+0x164>
    3af4:	6821      	ldr	r1, [r4, #0]
    3af6:	07c9      	lsls	r1, r1, #31
    3af8:	d506      	bpl.n	3b08 <_printf_i+0x164>
    3afa:	6862      	ldr	r2, [r4, #4]
    3afc:	6923      	ldr	r3, [r4, #16]
    3afe:	429a      	cmp	r2, r3
    3b00:	dc02      	bgt.n	3b08 <_printf_i+0x164>
    3b02:	3d01      	subs	r5, #1
    3b04:	2330      	movs	r3, #48	; 0x30
    3b06:	702b      	strb	r3, [r5, #0]
    3b08:	9e04      	ldr	r6, [sp, #16]
    3b0a:	1b73      	subs	r3, r6, r5
    3b0c:	6123      	str	r3, [r4, #16]
    3b0e:	e02a      	b.n	3b66 <_printf_i+0x1c2>
    3b10:	6808      	ldr	r0, [r1, #0]
    3b12:	6813      	ldr	r3, [r2, #0]
    3b14:	6949      	ldr	r1, [r1, #20]
    3b16:	0605      	lsls	r5, r0, #24
    3b18:	d504      	bpl.n	3b24 <_printf_i+0x180>
    3b1a:	1d18      	adds	r0, r3, #4
    3b1c:	6010      	str	r0, [r2, #0]
    3b1e:	681b      	ldr	r3, [r3, #0]
    3b20:	6019      	str	r1, [r3, #0]
    3b22:	e005      	b.n	3b30 <_printf_i+0x18c>
    3b24:	0646      	lsls	r6, r0, #25
    3b26:	d5f8      	bpl.n	3b1a <_printf_i+0x176>
    3b28:	1d18      	adds	r0, r3, #4
    3b2a:	6010      	str	r0, [r2, #0]
    3b2c:	681b      	ldr	r3, [r3, #0]
    3b2e:	8019      	strh	r1, [r3, #0]
    3b30:	2300      	movs	r3, #0
    3b32:	6123      	str	r3, [r4, #16]
    3b34:	9d04      	ldr	r5, [sp, #16]
    3b36:	e016      	b.n	3b66 <_printf_i+0x1c2>
    3b38:	6813      	ldr	r3, [r2, #0]
    3b3a:	1d19      	adds	r1, r3, #4
    3b3c:	6011      	str	r1, [r2, #0]
    3b3e:	681d      	ldr	r5, [r3, #0]
    3b40:	1c28      	adds	r0, r5, #0
    3b42:	f000 fbe9 	bl	4318 <strlen>
    3b46:	6863      	ldr	r3, [r4, #4]
    3b48:	6120      	str	r0, [r4, #16]
    3b4a:	4298      	cmp	r0, r3
    3b4c:	d900      	bls.n	3b50 <_printf_i+0x1ac>
    3b4e:	6123      	str	r3, [r4, #16]
    3b50:	6920      	ldr	r0, [r4, #16]
    3b52:	6060      	str	r0, [r4, #4]
    3b54:	e004      	b.n	3b60 <_printf_i+0x1bc>
    3b56:	1c25      	adds	r5, r4, #0
    3b58:	3542      	adds	r5, #66	; 0x42
    3b5a:	702b      	strb	r3, [r5, #0]
    3b5c:	2301      	movs	r3, #1
    3b5e:	6123      	str	r3, [r4, #16]
    3b60:	9e04      	ldr	r6, [sp, #16]
    3b62:	2300      	movs	r3, #0
    3b64:	7033      	strb	r3, [r6, #0]
    3b66:	9e07      	ldr	r6, [sp, #28]
    3b68:	9805      	ldr	r0, [sp, #20]
    3b6a:	9600      	str	r6, [sp, #0]
    3b6c:	1c21      	adds	r1, r4, #0
    3b6e:	aa09      	add	r2, sp, #36	; 0x24
    3b70:	9b06      	ldr	r3, [sp, #24]
    3b72:	f7ff fea3 	bl	38bc <_printf_common>
    3b76:	3001      	adds	r0, #1
    3b78:	d102      	bne.n	3b80 <_printf_i+0x1dc>
    3b7a:	2001      	movs	r0, #1
    3b7c:	4240      	negs	r0, r0
    3b7e:	e021      	b.n	3bc4 <_printf_i+0x220>
    3b80:	1c2a      	adds	r2, r5, #0
    3b82:	9805      	ldr	r0, [sp, #20]
    3b84:	9906      	ldr	r1, [sp, #24]
    3b86:	6923      	ldr	r3, [r4, #16]
    3b88:	9d07      	ldr	r5, [sp, #28]
    3b8a:	47a8      	blx	r5
    3b8c:	3001      	adds	r0, #1
    3b8e:	d0f4      	beq.n	3b7a <_printf_i+0x1d6>
    3b90:	6826      	ldr	r6, [r4, #0]
    3b92:	07b6      	lsls	r6, r6, #30
    3b94:	d405      	bmi.n	3ba2 <_printf_i+0x1fe>
    3b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3b98:	68e0      	ldr	r0, [r4, #12]
    3b9a:	4298      	cmp	r0, r3
    3b9c:	da12      	bge.n	3bc4 <_printf_i+0x220>
    3b9e:	1c18      	adds	r0, r3, #0
    3ba0:	e010      	b.n	3bc4 <_printf_i+0x220>
    3ba2:	2500      	movs	r5, #0
    3ba4:	68e0      	ldr	r0, [r4, #12]
    3ba6:	9909      	ldr	r1, [sp, #36]	; 0x24
    3ba8:	1a43      	subs	r3, r0, r1
    3baa:	429d      	cmp	r5, r3
    3bac:	daf3      	bge.n	3b96 <_printf_i+0x1f2>
    3bae:	1c22      	adds	r2, r4, #0
    3bb0:	9805      	ldr	r0, [sp, #20]
    3bb2:	9906      	ldr	r1, [sp, #24]
    3bb4:	3219      	adds	r2, #25
    3bb6:	2301      	movs	r3, #1
    3bb8:	9e07      	ldr	r6, [sp, #28]
    3bba:	47b0      	blx	r6
    3bbc:	3001      	adds	r0, #1
    3bbe:	d0dc      	beq.n	3b7a <_printf_i+0x1d6>
    3bc0:	3501      	adds	r5, #1
    3bc2:	e7ef      	b.n	3ba4 <_printf_i+0x200>
    3bc4:	b00b      	add	sp, #44	; 0x2c
    3bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3bc8:	00004a25 	.word	0x00004a25
    3bcc:	00004a36 	.word	0x00004a36

00003bd0 <__swbuf_r>:
    3bd0:	b570      	push	{r4, r5, r6, lr}
    3bd2:	1c05      	adds	r5, r0, #0
    3bd4:	1c0e      	adds	r6, r1, #0
    3bd6:	1c14      	adds	r4, r2, #0
    3bd8:	2800      	cmp	r0, #0
    3bda:	d004      	beq.n	3be6 <__swbuf_r+0x16>
    3bdc:	6982      	ldr	r2, [r0, #24]
    3bde:	2a00      	cmp	r2, #0
    3be0:	d101      	bne.n	3be6 <__swbuf_r+0x16>
    3be2:	f000 f9c9 	bl	3f78 <__sinit>
    3be6:	4b23      	ldr	r3, [pc, #140]	; (3c74 <__swbuf_r+0xa4>)
    3be8:	429c      	cmp	r4, r3
    3bea:	d101      	bne.n	3bf0 <__swbuf_r+0x20>
    3bec:	686c      	ldr	r4, [r5, #4]
    3bee:	e008      	b.n	3c02 <__swbuf_r+0x32>
    3bf0:	4b21      	ldr	r3, [pc, #132]	; (3c78 <__swbuf_r+0xa8>)
    3bf2:	429c      	cmp	r4, r3
    3bf4:	d101      	bne.n	3bfa <__swbuf_r+0x2a>
    3bf6:	68ac      	ldr	r4, [r5, #8]
    3bf8:	e003      	b.n	3c02 <__swbuf_r+0x32>
    3bfa:	4b20      	ldr	r3, [pc, #128]	; (3c7c <__swbuf_r+0xac>)
    3bfc:	429c      	cmp	r4, r3
    3bfe:	d100      	bne.n	3c02 <__swbuf_r+0x32>
    3c00:	68ec      	ldr	r4, [r5, #12]
    3c02:	69a3      	ldr	r3, [r4, #24]
    3c04:	60a3      	str	r3, [r4, #8]
    3c06:	89a3      	ldrh	r3, [r4, #12]
    3c08:	071a      	lsls	r2, r3, #28
    3c0a:	d50a      	bpl.n	3c22 <__swbuf_r+0x52>
    3c0c:	6923      	ldr	r3, [r4, #16]
    3c0e:	2b00      	cmp	r3, #0
    3c10:	d007      	beq.n	3c22 <__swbuf_r+0x52>
    3c12:	6822      	ldr	r2, [r4, #0]
    3c14:	6923      	ldr	r3, [r4, #16]
    3c16:	b2f6      	uxtb	r6, r6
    3c18:	1ad0      	subs	r0, r2, r3
    3c1a:	6962      	ldr	r2, [r4, #20]
    3c1c:	4290      	cmp	r0, r2
    3c1e:	db0f      	blt.n	3c40 <__swbuf_r+0x70>
    3c20:	e008      	b.n	3c34 <__swbuf_r+0x64>
    3c22:	1c28      	adds	r0, r5, #0
    3c24:	1c21      	adds	r1, r4, #0
    3c26:	f000 f82b 	bl	3c80 <__swsetup_r>
    3c2a:	2800      	cmp	r0, #0
    3c2c:	d0f1      	beq.n	3c12 <__swbuf_r+0x42>
    3c2e:	2001      	movs	r0, #1
    3c30:	4240      	negs	r0, r0
    3c32:	e01d      	b.n	3c70 <__swbuf_r+0xa0>
    3c34:	1c28      	adds	r0, r5, #0
    3c36:	1c21      	adds	r1, r4, #0
    3c38:	f000 f91e 	bl	3e78 <_fflush_r>
    3c3c:	2800      	cmp	r0, #0
    3c3e:	d1f6      	bne.n	3c2e <__swbuf_r+0x5e>
    3c40:	68a3      	ldr	r3, [r4, #8]
    3c42:	3001      	adds	r0, #1
    3c44:	3b01      	subs	r3, #1
    3c46:	60a3      	str	r3, [r4, #8]
    3c48:	6823      	ldr	r3, [r4, #0]
    3c4a:	1c5a      	adds	r2, r3, #1
    3c4c:	6022      	str	r2, [r4, #0]
    3c4e:	701e      	strb	r6, [r3, #0]
    3c50:	6963      	ldr	r3, [r4, #20]
    3c52:	4298      	cmp	r0, r3
    3c54:	d005      	beq.n	3c62 <__swbuf_r+0x92>
    3c56:	89a3      	ldrh	r3, [r4, #12]
    3c58:	1c30      	adds	r0, r6, #0
    3c5a:	07da      	lsls	r2, r3, #31
    3c5c:	d508      	bpl.n	3c70 <__swbuf_r+0xa0>
    3c5e:	2e0a      	cmp	r6, #10
    3c60:	d106      	bne.n	3c70 <__swbuf_r+0xa0>
    3c62:	1c28      	adds	r0, r5, #0
    3c64:	1c21      	adds	r1, r4, #0
    3c66:	f000 f907 	bl	3e78 <_fflush_r>
    3c6a:	2800      	cmp	r0, #0
    3c6c:	d1df      	bne.n	3c2e <__swbuf_r+0x5e>
    3c6e:	1c30      	adds	r0, r6, #0
    3c70:	bd70      	pop	{r4, r5, r6, pc}
    3c72:	46c0      	nop			; (mov r8, r8)
    3c74:	00004a48 	.word	0x00004a48
    3c78:	00004a68 	.word	0x00004a68
    3c7c:	00004a88 	.word	0x00004a88

00003c80 <__swsetup_r>:
    3c80:	4b34      	ldr	r3, [pc, #208]	; (3d54 <__swsetup_r+0xd4>)
    3c82:	b570      	push	{r4, r5, r6, lr}
    3c84:	681d      	ldr	r5, [r3, #0]
    3c86:	1c06      	adds	r6, r0, #0
    3c88:	1c0c      	adds	r4, r1, #0
    3c8a:	2d00      	cmp	r5, #0
    3c8c:	d005      	beq.n	3c9a <__swsetup_r+0x1a>
    3c8e:	69a9      	ldr	r1, [r5, #24]
    3c90:	2900      	cmp	r1, #0
    3c92:	d102      	bne.n	3c9a <__swsetup_r+0x1a>
    3c94:	1c28      	adds	r0, r5, #0
    3c96:	f000 f96f 	bl	3f78 <__sinit>
    3c9a:	4b2f      	ldr	r3, [pc, #188]	; (3d58 <__swsetup_r+0xd8>)
    3c9c:	429c      	cmp	r4, r3
    3c9e:	d101      	bne.n	3ca4 <__swsetup_r+0x24>
    3ca0:	686c      	ldr	r4, [r5, #4]
    3ca2:	e008      	b.n	3cb6 <__swsetup_r+0x36>
    3ca4:	4b2d      	ldr	r3, [pc, #180]	; (3d5c <__swsetup_r+0xdc>)
    3ca6:	429c      	cmp	r4, r3
    3ca8:	d101      	bne.n	3cae <__swsetup_r+0x2e>
    3caa:	68ac      	ldr	r4, [r5, #8]
    3cac:	e003      	b.n	3cb6 <__swsetup_r+0x36>
    3cae:	4b2c      	ldr	r3, [pc, #176]	; (3d60 <__swsetup_r+0xe0>)
    3cb0:	429c      	cmp	r4, r3
    3cb2:	d100      	bne.n	3cb6 <__swsetup_r+0x36>
    3cb4:	68ec      	ldr	r4, [r5, #12]
    3cb6:	89a2      	ldrh	r2, [r4, #12]
    3cb8:	b293      	uxth	r3, r2
    3cba:	0719      	lsls	r1, r3, #28
    3cbc:	d421      	bmi.n	3d02 <__swsetup_r+0x82>
    3cbe:	06d9      	lsls	r1, r3, #27
    3cc0:	d405      	bmi.n	3cce <__swsetup_r+0x4e>
    3cc2:	2309      	movs	r3, #9
    3cc4:	6033      	str	r3, [r6, #0]
    3cc6:	2340      	movs	r3, #64	; 0x40
    3cc8:	431a      	orrs	r2, r3
    3cca:	81a2      	strh	r2, [r4, #12]
    3ccc:	e03f      	b.n	3d4e <__swsetup_r+0xce>
    3cce:	075a      	lsls	r2, r3, #29
    3cd0:	d513      	bpl.n	3cfa <__swsetup_r+0x7a>
    3cd2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3cd4:	2900      	cmp	r1, #0
    3cd6:	d008      	beq.n	3cea <__swsetup_r+0x6a>
    3cd8:	1c23      	adds	r3, r4, #0
    3cda:	3344      	adds	r3, #68	; 0x44
    3cdc:	4299      	cmp	r1, r3
    3cde:	d002      	beq.n	3ce6 <__swsetup_r+0x66>
    3ce0:	1c30      	adds	r0, r6, #0
    3ce2:	f000 fa1f 	bl	4124 <_free_r>
    3ce6:	2300      	movs	r3, #0
    3ce8:	6363      	str	r3, [r4, #52]	; 0x34
    3cea:	89a3      	ldrh	r3, [r4, #12]
    3cec:	2224      	movs	r2, #36	; 0x24
    3cee:	4393      	bics	r3, r2
    3cf0:	81a3      	strh	r3, [r4, #12]
    3cf2:	2300      	movs	r3, #0
    3cf4:	6063      	str	r3, [r4, #4]
    3cf6:	6923      	ldr	r3, [r4, #16]
    3cf8:	6023      	str	r3, [r4, #0]
    3cfa:	89a3      	ldrh	r3, [r4, #12]
    3cfc:	2208      	movs	r2, #8
    3cfe:	4313      	orrs	r3, r2
    3d00:	81a3      	strh	r3, [r4, #12]
    3d02:	6921      	ldr	r1, [r4, #16]
    3d04:	2900      	cmp	r1, #0
    3d06:	d10b      	bne.n	3d20 <__swsetup_r+0xa0>
    3d08:	89a3      	ldrh	r3, [r4, #12]
    3d0a:	22a0      	movs	r2, #160	; 0xa0
    3d0c:	0092      	lsls	r2, r2, #2
    3d0e:	401a      	ands	r2, r3
    3d10:	2380      	movs	r3, #128	; 0x80
    3d12:	009b      	lsls	r3, r3, #2
    3d14:	429a      	cmp	r2, r3
    3d16:	d003      	beq.n	3d20 <__swsetup_r+0xa0>
    3d18:	1c30      	adds	r0, r6, #0
    3d1a:	1c21      	adds	r1, r4, #0
    3d1c:	f000 f99c 	bl	4058 <__smakebuf_r>
    3d20:	89a3      	ldrh	r3, [r4, #12]
    3d22:	2201      	movs	r2, #1
    3d24:	401a      	ands	r2, r3
    3d26:	d005      	beq.n	3d34 <__swsetup_r+0xb4>
    3d28:	6961      	ldr	r1, [r4, #20]
    3d2a:	2200      	movs	r2, #0
    3d2c:	60a2      	str	r2, [r4, #8]
    3d2e:	424a      	negs	r2, r1
    3d30:	61a2      	str	r2, [r4, #24]
    3d32:	e003      	b.n	3d3c <__swsetup_r+0xbc>
    3d34:	0799      	lsls	r1, r3, #30
    3d36:	d400      	bmi.n	3d3a <__swsetup_r+0xba>
    3d38:	6962      	ldr	r2, [r4, #20]
    3d3a:	60a2      	str	r2, [r4, #8]
    3d3c:	6922      	ldr	r2, [r4, #16]
    3d3e:	2000      	movs	r0, #0
    3d40:	4282      	cmp	r2, r0
    3d42:	d106      	bne.n	3d52 <__swsetup_r+0xd2>
    3d44:	0619      	lsls	r1, r3, #24
    3d46:	d504      	bpl.n	3d52 <__swsetup_r+0xd2>
    3d48:	2240      	movs	r2, #64	; 0x40
    3d4a:	4313      	orrs	r3, r2
    3d4c:	81a3      	strh	r3, [r4, #12]
    3d4e:	2001      	movs	r0, #1
    3d50:	4240      	negs	r0, r0
    3d52:	bd70      	pop	{r4, r5, r6, pc}
    3d54:	20000064 	.word	0x20000064
    3d58:	00004a48 	.word	0x00004a48
    3d5c:	00004a68 	.word	0x00004a68
    3d60:	00004a88 	.word	0x00004a88

00003d64 <__sflush_r>:
    3d64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3d66:	898b      	ldrh	r3, [r1, #12]
    3d68:	1c05      	adds	r5, r0, #0
    3d6a:	1c0c      	adds	r4, r1, #0
    3d6c:	0719      	lsls	r1, r3, #28
    3d6e:	d45e      	bmi.n	3e2e <__sflush_r+0xca>
    3d70:	6862      	ldr	r2, [r4, #4]
    3d72:	2a00      	cmp	r2, #0
    3d74:	dc02      	bgt.n	3d7c <__sflush_r+0x18>
    3d76:	6c27      	ldr	r7, [r4, #64]	; 0x40
    3d78:	2f00      	cmp	r7, #0
    3d7a:	dd1a      	ble.n	3db2 <__sflush_r+0x4e>
    3d7c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3d7e:	2f00      	cmp	r7, #0
    3d80:	d017      	beq.n	3db2 <__sflush_r+0x4e>
    3d82:	2200      	movs	r2, #0
    3d84:	682e      	ldr	r6, [r5, #0]
    3d86:	602a      	str	r2, [r5, #0]
    3d88:	2280      	movs	r2, #128	; 0x80
    3d8a:	0152      	lsls	r2, r2, #5
    3d8c:	401a      	ands	r2, r3
    3d8e:	d001      	beq.n	3d94 <__sflush_r+0x30>
    3d90:	6d62      	ldr	r2, [r4, #84]	; 0x54
    3d92:	e015      	b.n	3dc0 <__sflush_r+0x5c>
    3d94:	1c28      	adds	r0, r5, #0
    3d96:	6a21      	ldr	r1, [r4, #32]
    3d98:	2301      	movs	r3, #1
    3d9a:	47b8      	blx	r7
    3d9c:	1c02      	adds	r2, r0, #0
    3d9e:	1c41      	adds	r1, r0, #1
    3da0:	d10e      	bne.n	3dc0 <__sflush_r+0x5c>
    3da2:	682b      	ldr	r3, [r5, #0]
    3da4:	2b00      	cmp	r3, #0
    3da6:	d00b      	beq.n	3dc0 <__sflush_r+0x5c>
    3da8:	2b1d      	cmp	r3, #29
    3daa:	d001      	beq.n	3db0 <__sflush_r+0x4c>
    3dac:	2b16      	cmp	r3, #22
    3dae:	d102      	bne.n	3db6 <__sflush_r+0x52>
    3db0:	602e      	str	r6, [r5, #0]
    3db2:	2000      	movs	r0, #0
    3db4:	e05e      	b.n	3e74 <__sflush_r+0x110>
    3db6:	89a3      	ldrh	r3, [r4, #12]
    3db8:	2140      	movs	r1, #64	; 0x40
    3dba:	430b      	orrs	r3, r1
    3dbc:	81a3      	strh	r3, [r4, #12]
    3dbe:	e059      	b.n	3e74 <__sflush_r+0x110>
    3dc0:	89a3      	ldrh	r3, [r4, #12]
    3dc2:	075f      	lsls	r7, r3, #29
    3dc4:	d506      	bpl.n	3dd4 <__sflush_r+0x70>
    3dc6:	6861      	ldr	r1, [r4, #4]
    3dc8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3dca:	1a52      	subs	r2, r2, r1
    3dcc:	2b00      	cmp	r3, #0
    3dce:	d001      	beq.n	3dd4 <__sflush_r+0x70>
    3dd0:	6c27      	ldr	r7, [r4, #64]	; 0x40
    3dd2:	1bd2      	subs	r2, r2, r7
    3dd4:	1c28      	adds	r0, r5, #0
    3dd6:	6a21      	ldr	r1, [r4, #32]
    3dd8:	2300      	movs	r3, #0
    3dda:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    3ddc:	47b8      	blx	r7
    3dde:	89a2      	ldrh	r2, [r4, #12]
    3de0:	1c41      	adds	r1, r0, #1
    3de2:	d106      	bne.n	3df2 <__sflush_r+0x8e>
    3de4:	682b      	ldr	r3, [r5, #0]
    3de6:	2b00      	cmp	r3, #0
    3de8:	d003      	beq.n	3df2 <__sflush_r+0x8e>
    3dea:	2b1d      	cmp	r3, #29
    3dec:	d001      	beq.n	3df2 <__sflush_r+0x8e>
    3dee:	2b16      	cmp	r3, #22
    3df0:	d119      	bne.n	3e26 <__sflush_r+0xc2>
    3df2:	2300      	movs	r3, #0
    3df4:	6063      	str	r3, [r4, #4]
    3df6:	6923      	ldr	r3, [r4, #16]
    3df8:	6023      	str	r3, [r4, #0]
    3dfa:	04d7      	lsls	r7, r2, #19
    3dfc:	d505      	bpl.n	3e0a <__sflush_r+0xa6>
    3dfe:	1c41      	adds	r1, r0, #1
    3e00:	d102      	bne.n	3e08 <__sflush_r+0xa4>
    3e02:	682a      	ldr	r2, [r5, #0]
    3e04:	2a00      	cmp	r2, #0
    3e06:	d100      	bne.n	3e0a <__sflush_r+0xa6>
    3e08:	6560      	str	r0, [r4, #84]	; 0x54
    3e0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3e0c:	602e      	str	r6, [r5, #0]
    3e0e:	2900      	cmp	r1, #0
    3e10:	d0cf      	beq.n	3db2 <__sflush_r+0x4e>
    3e12:	1c23      	adds	r3, r4, #0
    3e14:	3344      	adds	r3, #68	; 0x44
    3e16:	4299      	cmp	r1, r3
    3e18:	d002      	beq.n	3e20 <__sflush_r+0xbc>
    3e1a:	1c28      	adds	r0, r5, #0
    3e1c:	f000 f982 	bl	4124 <_free_r>
    3e20:	2000      	movs	r0, #0
    3e22:	6360      	str	r0, [r4, #52]	; 0x34
    3e24:	e026      	b.n	3e74 <__sflush_r+0x110>
    3e26:	2340      	movs	r3, #64	; 0x40
    3e28:	431a      	orrs	r2, r3
    3e2a:	81a2      	strh	r2, [r4, #12]
    3e2c:	e022      	b.n	3e74 <__sflush_r+0x110>
    3e2e:	6926      	ldr	r6, [r4, #16]
    3e30:	2e00      	cmp	r6, #0
    3e32:	d0be      	beq.n	3db2 <__sflush_r+0x4e>
    3e34:	6827      	ldr	r7, [r4, #0]
    3e36:	2200      	movs	r2, #0
    3e38:	1bbf      	subs	r7, r7, r6
    3e3a:	9701      	str	r7, [sp, #4]
    3e3c:	6026      	str	r6, [r4, #0]
    3e3e:	0799      	lsls	r1, r3, #30
    3e40:	d100      	bne.n	3e44 <__sflush_r+0xe0>
    3e42:	6962      	ldr	r2, [r4, #20]
    3e44:	60a2      	str	r2, [r4, #8]
    3e46:	9f01      	ldr	r7, [sp, #4]
    3e48:	2f00      	cmp	r7, #0
    3e4a:	ddb2      	ble.n	3db2 <__sflush_r+0x4e>
    3e4c:	1c28      	adds	r0, r5, #0
    3e4e:	6a21      	ldr	r1, [r4, #32]
    3e50:	1c32      	adds	r2, r6, #0
    3e52:	9b01      	ldr	r3, [sp, #4]
    3e54:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    3e56:	47b8      	blx	r7
    3e58:	2800      	cmp	r0, #0
    3e5a:	dc06      	bgt.n	3e6a <__sflush_r+0x106>
    3e5c:	89a3      	ldrh	r3, [r4, #12]
    3e5e:	2240      	movs	r2, #64	; 0x40
    3e60:	4313      	orrs	r3, r2
    3e62:	2001      	movs	r0, #1
    3e64:	81a3      	strh	r3, [r4, #12]
    3e66:	4240      	negs	r0, r0
    3e68:	e004      	b.n	3e74 <__sflush_r+0x110>
    3e6a:	9f01      	ldr	r7, [sp, #4]
    3e6c:	1836      	adds	r6, r6, r0
    3e6e:	1a3f      	subs	r7, r7, r0
    3e70:	9701      	str	r7, [sp, #4]
    3e72:	e7e8      	b.n	3e46 <__sflush_r+0xe2>
    3e74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00003e78 <_fflush_r>:
    3e78:	690a      	ldr	r2, [r1, #16]
    3e7a:	b538      	push	{r3, r4, r5, lr}
    3e7c:	1c05      	adds	r5, r0, #0
    3e7e:	1c0c      	adds	r4, r1, #0
    3e80:	2a00      	cmp	r2, #0
    3e82:	d101      	bne.n	3e88 <_fflush_r+0x10>
    3e84:	2000      	movs	r0, #0
    3e86:	e01c      	b.n	3ec2 <_fflush_r+0x4a>
    3e88:	2800      	cmp	r0, #0
    3e8a:	d004      	beq.n	3e96 <_fflush_r+0x1e>
    3e8c:	6983      	ldr	r3, [r0, #24]
    3e8e:	2b00      	cmp	r3, #0
    3e90:	d101      	bne.n	3e96 <_fflush_r+0x1e>
    3e92:	f000 f871 	bl	3f78 <__sinit>
    3e96:	4b0b      	ldr	r3, [pc, #44]	; (3ec4 <_fflush_r+0x4c>)
    3e98:	429c      	cmp	r4, r3
    3e9a:	d101      	bne.n	3ea0 <_fflush_r+0x28>
    3e9c:	686c      	ldr	r4, [r5, #4]
    3e9e:	e008      	b.n	3eb2 <_fflush_r+0x3a>
    3ea0:	4b09      	ldr	r3, [pc, #36]	; (3ec8 <_fflush_r+0x50>)
    3ea2:	429c      	cmp	r4, r3
    3ea4:	d101      	bne.n	3eaa <_fflush_r+0x32>
    3ea6:	68ac      	ldr	r4, [r5, #8]
    3ea8:	e003      	b.n	3eb2 <_fflush_r+0x3a>
    3eaa:	4b08      	ldr	r3, [pc, #32]	; (3ecc <_fflush_r+0x54>)
    3eac:	429c      	cmp	r4, r3
    3eae:	d100      	bne.n	3eb2 <_fflush_r+0x3a>
    3eb0:	68ec      	ldr	r4, [r5, #12]
    3eb2:	220c      	movs	r2, #12
    3eb4:	5ea3      	ldrsh	r3, [r4, r2]
    3eb6:	2b00      	cmp	r3, #0
    3eb8:	d0e4      	beq.n	3e84 <_fflush_r+0xc>
    3eba:	1c28      	adds	r0, r5, #0
    3ebc:	1c21      	adds	r1, r4, #0
    3ebe:	f7ff ff51 	bl	3d64 <__sflush_r>
    3ec2:	bd38      	pop	{r3, r4, r5, pc}
    3ec4:	00004a48 	.word	0x00004a48
    3ec8:	00004a68 	.word	0x00004a68
    3ecc:	00004a88 	.word	0x00004a88

00003ed0 <_cleanup_r>:
    3ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3ed2:	1c04      	adds	r4, r0, #0
    3ed4:	1c07      	adds	r7, r0, #0
    3ed6:	3448      	adds	r4, #72	; 0x48
    3ed8:	2c00      	cmp	r4, #0
    3eda:	d012      	beq.n	3f02 <_cleanup_r+0x32>
    3edc:	68a5      	ldr	r5, [r4, #8]
    3ede:	6866      	ldr	r6, [r4, #4]
    3ee0:	3e01      	subs	r6, #1
    3ee2:	d40c      	bmi.n	3efe <_cleanup_r+0x2e>
    3ee4:	89ab      	ldrh	r3, [r5, #12]
    3ee6:	2b01      	cmp	r3, #1
    3ee8:	d907      	bls.n	3efa <_cleanup_r+0x2a>
    3eea:	220e      	movs	r2, #14
    3eec:	5eab      	ldrsh	r3, [r5, r2]
    3eee:	3301      	adds	r3, #1
    3ef0:	d003      	beq.n	3efa <_cleanup_r+0x2a>
    3ef2:	1c38      	adds	r0, r7, #0
    3ef4:	1c29      	adds	r1, r5, #0
    3ef6:	f7ff ffbf 	bl	3e78 <_fflush_r>
    3efa:	3568      	adds	r5, #104	; 0x68
    3efc:	e7f0      	b.n	3ee0 <_cleanup_r+0x10>
    3efe:	6824      	ldr	r4, [r4, #0]
    3f00:	e7ea      	b.n	3ed8 <_cleanup_r+0x8>
    3f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003f04 <std.isra.0>:
    3f04:	2300      	movs	r3, #0
    3f06:	b510      	push	{r4, lr}
    3f08:	1c04      	adds	r4, r0, #0
    3f0a:	6003      	str	r3, [r0, #0]
    3f0c:	6043      	str	r3, [r0, #4]
    3f0e:	6083      	str	r3, [r0, #8]
    3f10:	8181      	strh	r1, [r0, #12]
    3f12:	6643      	str	r3, [r0, #100]	; 0x64
    3f14:	81c2      	strh	r2, [r0, #14]
    3f16:	6103      	str	r3, [r0, #16]
    3f18:	6143      	str	r3, [r0, #20]
    3f1a:	6183      	str	r3, [r0, #24]
    3f1c:	1c19      	adds	r1, r3, #0
    3f1e:	2208      	movs	r2, #8
    3f20:	305c      	adds	r0, #92	; 0x5c
    3f22:	f7ff fa4a 	bl	33ba <memset>
    3f26:	4b05      	ldr	r3, [pc, #20]	; (3f3c <std.isra.0+0x38>)
    3f28:	6224      	str	r4, [r4, #32]
    3f2a:	6263      	str	r3, [r4, #36]	; 0x24
    3f2c:	4b04      	ldr	r3, [pc, #16]	; (3f40 <std.isra.0+0x3c>)
    3f2e:	62a3      	str	r3, [r4, #40]	; 0x28
    3f30:	4b04      	ldr	r3, [pc, #16]	; (3f44 <std.isra.0+0x40>)
    3f32:	62e3      	str	r3, [r4, #44]	; 0x2c
    3f34:	4b04      	ldr	r3, [pc, #16]	; (3f48 <std.isra.0+0x44>)
    3f36:	6323      	str	r3, [r4, #48]	; 0x30
    3f38:	bd10      	pop	{r4, pc}
    3f3a:	46c0      	nop			; (mov r8, r8)
    3f3c:	00004281 	.word	0x00004281
    3f40:	000042a9 	.word	0x000042a9
    3f44:	000042e1 	.word	0x000042e1
    3f48:	0000430d 	.word	0x0000430d

00003f4c <__sfmoreglue>:
    3f4c:	b570      	push	{r4, r5, r6, lr}
    3f4e:	1e4b      	subs	r3, r1, #1
    3f50:	2568      	movs	r5, #104	; 0x68
    3f52:	435d      	muls	r5, r3
    3f54:	1c0e      	adds	r6, r1, #0
    3f56:	1c29      	adds	r1, r5, #0
    3f58:	3174      	adds	r1, #116	; 0x74
    3f5a:	f000 f92b 	bl	41b4 <_malloc_r>
    3f5e:	1e04      	subs	r4, r0, #0
    3f60:	d008      	beq.n	3f74 <__sfmoreglue+0x28>
    3f62:	2100      	movs	r1, #0
    3f64:	6001      	str	r1, [r0, #0]
    3f66:	6046      	str	r6, [r0, #4]
    3f68:	1c2a      	adds	r2, r5, #0
    3f6a:	300c      	adds	r0, #12
    3f6c:	60a0      	str	r0, [r4, #8]
    3f6e:	3268      	adds	r2, #104	; 0x68
    3f70:	f7ff fa23 	bl	33ba <memset>
    3f74:	1c20      	adds	r0, r4, #0
    3f76:	bd70      	pop	{r4, r5, r6, pc}

00003f78 <__sinit>:
    3f78:	6983      	ldr	r3, [r0, #24]
    3f7a:	b513      	push	{r0, r1, r4, lr}
    3f7c:	1c04      	adds	r4, r0, #0
    3f7e:	2b00      	cmp	r3, #0
    3f80:	d127      	bne.n	3fd2 <__sinit+0x5a>
    3f82:	6483      	str	r3, [r0, #72]	; 0x48
    3f84:	64c3      	str	r3, [r0, #76]	; 0x4c
    3f86:	6503      	str	r3, [r0, #80]	; 0x50
    3f88:	4b12      	ldr	r3, [pc, #72]	; (3fd4 <__sinit+0x5c>)
    3f8a:	4a13      	ldr	r2, [pc, #76]	; (3fd8 <__sinit+0x60>)
    3f8c:	681b      	ldr	r3, [r3, #0]
    3f8e:	6282      	str	r2, [r0, #40]	; 0x28
    3f90:	4298      	cmp	r0, r3
    3f92:	d101      	bne.n	3f98 <__sinit+0x20>
    3f94:	2301      	movs	r3, #1
    3f96:	6183      	str	r3, [r0, #24]
    3f98:	1c20      	adds	r0, r4, #0
    3f9a:	f000 f81f 	bl	3fdc <__sfp>
    3f9e:	6060      	str	r0, [r4, #4]
    3fa0:	1c20      	adds	r0, r4, #0
    3fa2:	f000 f81b 	bl	3fdc <__sfp>
    3fa6:	60a0      	str	r0, [r4, #8]
    3fa8:	1c20      	adds	r0, r4, #0
    3faa:	f000 f817 	bl	3fdc <__sfp>
    3fae:	2104      	movs	r1, #4
    3fb0:	60e0      	str	r0, [r4, #12]
    3fb2:	2200      	movs	r2, #0
    3fb4:	6860      	ldr	r0, [r4, #4]
    3fb6:	f7ff ffa5 	bl	3f04 <std.isra.0>
    3fba:	68a0      	ldr	r0, [r4, #8]
    3fbc:	2109      	movs	r1, #9
    3fbe:	2201      	movs	r2, #1
    3fc0:	f7ff ffa0 	bl	3f04 <std.isra.0>
    3fc4:	68e0      	ldr	r0, [r4, #12]
    3fc6:	2112      	movs	r1, #18
    3fc8:	2202      	movs	r2, #2
    3fca:	f7ff ff9b 	bl	3f04 <std.isra.0>
    3fce:	2301      	movs	r3, #1
    3fd0:	61a3      	str	r3, [r4, #24]
    3fd2:	bd13      	pop	{r0, r1, r4, pc}
    3fd4:	00004a10 	.word	0x00004a10
    3fd8:	00003ed1 	.word	0x00003ed1

00003fdc <__sfp>:
    3fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3fde:	4b1d      	ldr	r3, [pc, #116]	; (4054 <__sfp+0x78>)
    3fe0:	1c07      	adds	r7, r0, #0
    3fe2:	681e      	ldr	r6, [r3, #0]
    3fe4:	69b2      	ldr	r2, [r6, #24]
    3fe6:	2a00      	cmp	r2, #0
    3fe8:	d102      	bne.n	3ff0 <__sfp+0x14>
    3fea:	1c30      	adds	r0, r6, #0
    3fec:	f7ff ffc4 	bl	3f78 <__sinit>
    3ff0:	3648      	adds	r6, #72	; 0x48
    3ff2:	68b4      	ldr	r4, [r6, #8]
    3ff4:	6873      	ldr	r3, [r6, #4]
    3ff6:	3b01      	subs	r3, #1
    3ff8:	d405      	bmi.n	4006 <__sfp+0x2a>
    3ffa:	220c      	movs	r2, #12
    3ffc:	5ea5      	ldrsh	r5, [r4, r2]
    3ffe:	2d00      	cmp	r5, #0
    4000:	d010      	beq.n	4024 <__sfp+0x48>
    4002:	3468      	adds	r4, #104	; 0x68
    4004:	e7f7      	b.n	3ff6 <__sfp+0x1a>
    4006:	6833      	ldr	r3, [r6, #0]
    4008:	2b00      	cmp	r3, #0
    400a:	d106      	bne.n	401a <__sfp+0x3e>
    400c:	1c38      	adds	r0, r7, #0
    400e:	2104      	movs	r1, #4
    4010:	f7ff ff9c 	bl	3f4c <__sfmoreglue>
    4014:	6030      	str	r0, [r6, #0]
    4016:	2800      	cmp	r0, #0
    4018:	d001      	beq.n	401e <__sfp+0x42>
    401a:	6836      	ldr	r6, [r6, #0]
    401c:	e7e9      	b.n	3ff2 <__sfp+0x16>
    401e:	230c      	movs	r3, #12
    4020:	603b      	str	r3, [r7, #0]
    4022:	e016      	b.n	4052 <__sfp+0x76>
    4024:	2301      	movs	r3, #1
    4026:	425b      	negs	r3, r3
    4028:	81e3      	strh	r3, [r4, #14]
    402a:	1c20      	adds	r0, r4, #0
    402c:	2301      	movs	r3, #1
    402e:	81a3      	strh	r3, [r4, #12]
    4030:	6665      	str	r5, [r4, #100]	; 0x64
    4032:	6025      	str	r5, [r4, #0]
    4034:	60a5      	str	r5, [r4, #8]
    4036:	6065      	str	r5, [r4, #4]
    4038:	6125      	str	r5, [r4, #16]
    403a:	6165      	str	r5, [r4, #20]
    403c:	61a5      	str	r5, [r4, #24]
    403e:	305c      	adds	r0, #92	; 0x5c
    4040:	1c29      	adds	r1, r5, #0
    4042:	2208      	movs	r2, #8
    4044:	f7ff f9b9 	bl	33ba <memset>
    4048:	6365      	str	r5, [r4, #52]	; 0x34
    404a:	63a5      	str	r5, [r4, #56]	; 0x38
    404c:	64a5      	str	r5, [r4, #72]	; 0x48
    404e:	64e5      	str	r5, [r4, #76]	; 0x4c
    4050:	1c20      	adds	r0, r4, #0
    4052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4054:	00004a10 	.word	0x00004a10

00004058 <__smakebuf_r>:
    4058:	b5f0      	push	{r4, r5, r6, r7, lr}
    405a:	898b      	ldrh	r3, [r1, #12]
    405c:	b091      	sub	sp, #68	; 0x44
    405e:	1c05      	adds	r5, r0, #0
    4060:	1c0c      	adds	r4, r1, #0
    4062:	079a      	lsls	r2, r3, #30
    4064:	d425      	bmi.n	40b2 <__smakebuf_r+0x5a>
    4066:	230e      	movs	r3, #14
    4068:	5ec9      	ldrsh	r1, [r1, r3]
    406a:	2900      	cmp	r1, #0
    406c:	da06      	bge.n	407c <__smakebuf_r+0x24>
    406e:	89a7      	ldrh	r7, [r4, #12]
    4070:	2380      	movs	r3, #128	; 0x80
    4072:	401f      	ands	r7, r3
    4074:	d00f      	beq.n	4096 <__smakebuf_r+0x3e>
    4076:	2700      	movs	r7, #0
    4078:	2640      	movs	r6, #64	; 0x40
    407a:	e00e      	b.n	409a <__smakebuf_r+0x42>
    407c:	aa01      	add	r2, sp, #4
    407e:	f000 f979 	bl	4374 <_fstat_r>
    4082:	2800      	cmp	r0, #0
    4084:	dbf3      	blt.n	406e <__smakebuf_r+0x16>
    4086:	9b02      	ldr	r3, [sp, #8]
    4088:	27f0      	movs	r7, #240	; 0xf0
    408a:	023f      	lsls	r7, r7, #8
    408c:	4a18      	ldr	r2, [pc, #96]	; (40f0 <__smakebuf_r+0x98>)
    408e:	401f      	ands	r7, r3
    4090:	18bf      	adds	r7, r7, r2
    4092:	427b      	negs	r3, r7
    4094:	415f      	adcs	r7, r3
    4096:	2680      	movs	r6, #128	; 0x80
    4098:	00f6      	lsls	r6, r6, #3
    409a:	1c28      	adds	r0, r5, #0
    409c:	1c31      	adds	r1, r6, #0
    409e:	f000 f889 	bl	41b4 <_malloc_r>
    40a2:	2800      	cmp	r0, #0
    40a4:	d10c      	bne.n	40c0 <__smakebuf_r+0x68>
    40a6:	89a3      	ldrh	r3, [r4, #12]
    40a8:	059a      	lsls	r2, r3, #22
    40aa:	d41f      	bmi.n	40ec <__smakebuf_r+0x94>
    40ac:	2202      	movs	r2, #2
    40ae:	4313      	orrs	r3, r2
    40b0:	81a3      	strh	r3, [r4, #12]
    40b2:	1c23      	adds	r3, r4, #0
    40b4:	3347      	adds	r3, #71	; 0x47
    40b6:	6023      	str	r3, [r4, #0]
    40b8:	6123      	str	r3, [r4, #16]
    40ba:	2301      	movs	r3, #1
    40bc:	6163      	str	r3, [r4, #20]
    40be:	e015      	b.n	40ec <__smakebuf_r+0x94>
    40c0:	4b0c      	ldr	r3, [pc, #48]	; (40f4 <__smakebuf_r+0x9c>)
    40c2:	2280      	movs	r2, #128	; 0x80
    40c4:	62ab      	str	r3, [r5, #40]	; 0x28
    40c6:	89a3      	ldrh	r3, [r4, #12]
    40c8:	6020      	str	r0, [r4, #0]
    40ca:	4313      	orrs	r3, r2
    40cc:	81a3      	strh	r3, [r4, #12]
    40ce:	6120      	str	r0, [r4, #16]
    40d0:	6166      	str	r6, [r4, #20]
    40d2:	2f00      	cmp	r7, #0
    40d4:	d00a      	beq.n	40ec <__smakebuf_r+0x94>
    40d6:	230e      	movs	r3, #14
    40d8:	5ee1      	ldrsh	r1, [r4, r3]
    40da:	1c28      	adds	r0, r5, #0
    40dc:	f000 f95c 	bl	4398 <_isatty_r>
    40e0:	2800      	cmp	r0, #0
    40e2:	d003      	beq.n	40ec <__smakebuf_r+0x94>
    40e4:	89a3      	ldrh	r3, [r4, #12]
    40e6:	2201      	movs	r2, #1
    40e8:	4313      	orrs	r3, r2
    40ea:	81a3      	strh	r3, [r4, #12]
    40ec:	b011      	add	sp, #68	; 0x44
    40ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    40f0:	ffffe000 	.word	0xffffe000
    40f4:	00003ed1 	.word	0x00003ed1

000040f8 <malloc>:
    40f8:	b508      	push	{r3, lr}
    40fa:	4b03      	ldr	r3, [pc, #12]	; (4108 <malloc+0x10>)
    40fc:	1c01      	adds	r1, r0, #0
    40fe:	6818      	ldr	r0, [r3, #0]
    4100:	f000 f858 	bl	41b4 <_malloc_r>
    4104:	bd08      	pop	{r3, pc}
    4106:	46c0      	nop			; (mov r8, r8)
    4108:	20000064 	.word	0x20000064

0000410c <memchr>:
    410c:	b2c9      	uxtb	r1, r1
    410e:	1882      	adds	r2, r0, r2
    4110:	4290      	cmp	r0, r2
    4112:	d004      	beq.n	411e <memchr+0x12>
    4114:	7803      	ldrb	r3, [r0, #0]
    4116:	428b      	cmp	r3, r1
    4118:	d002      	beq.n	4120 <memchr+0x14>
    411a:	3001      	adds	r0, #1
    411c:	e7f8      	b.n	4110 <memchr+0x4>
    411e:	2000      	movs	r0, #0
    4120:	4770      	bx	lr
	...

00004124 <_free_r>:
    4124:	b530      	push	{r4, r5, lr}
    4126:	2900      	cmp	r1, #0
    4128:	d040      	beq.n	41ac <_free_r+0x88>
    412a:	3904      	subs	r1, #4
    412c:	680b      	ldr	r3, [r1, #0]
    412e:	2b00      	cmp	r3, #0
    4130:	da00      	bge.n	4134 <_free_r+0x10>
    4132:	18c9      	adds	r1, r1, r3
    4134:	4a1e      	ldr	r2, [pc, #120]	; (41b0 <_free_r+0x8c>)
    4136:	6813      	ldr	r3, [r2, #0]
    4138:	1c14      	adds	r4, r2, #0
    413a:	2b00      	cmp	r3, #0
    413c:	d102      	bne.n	4144 <_free_r+0x20>
    413e:	604b      	str	r3, [r1, #4]
    4140:	6011      	str	r1, [r2, #0]
    4142:	e033      	b.n	41ac <_free_r+0x88>
    4144:	4299      	cmp	r1, r3
    4146:	d20f      	bcs.n	4168 <_free_r+0x44>
    4148:	6808      	ldr	r0, [r1, #0]
    414a:	180a      	adds	r2, r1, r0
    414c:	429a      	cmp	r2, r3
    414e:	d105      	bne.n	415c <_free_r+0x38>
    4150:	6813      	ldr	r3, [r2, #0]
    4152:	6852      	ldr	r2, [r2, #4]
    4154:	18c0      	adds	r0, r0, r3
    4156:	6008      	str	r0, [r1, #0]
    4158:	604a      	str	r2, [r1, #4]
    415a:	e000      	b.n	415e <_free_r+0x3a>
    415c:	604b      	str	r3, [r1, #4]
    415e:	6021      	str	r1, [r4, #0]
    4160:	e024      	b.n	41ac <_free_r+0x88>
    4162:	428a      	cmp	r2, r1
    4164:	d803      	bhi.n	416e <_free_r+0x4a>
    4166:	1c13      	adds	r3, r2, #0
    4168:	685a      	ldr	r2, [r3, #4]
    416a:	2a00      	cmp	r2, #0
    416c:	d1f9      	bne.n	4162 <_free_r+0x3e>
    416e:	681d      	ldr	r5, [r3, #0]
    4170:	195c      	adds	r4, r3, r5
    4172:	428c      	cmp	r4, r1
    4174:	d10b      	bne.n	418e <_free_r+0x6a>
    4176:	6809      	ldr	r1, [r1, #0]
    4178:	1869      	adds	r1, r5, r1
    417a:	1858      	adds	r0, r3, r1
    417c:	6019      	str	r1, [r3, #0]
    417e:	4290      	cmp	r0, r2
    4180:	d114      	bne.n	41ac <_free_r+0x88>
    4182:	6814      	ldr	r4, [r2, #0]
    4184:	6852      	ldr	r2, [r2, #4]
    4186:	1909      	adds	r1, r1, r4
    4188:	6019      	str	r1, [r3, #0]
    418a:	605a      	str	r2, [r3, #4]
    418c:	e00e      	b.n	41ac <_free_r+0x88>
    418e:	428c      	cmp	r4, r1
    4190:	d902      	bls.n	4198 <_free_r+0x74>
    4192:	230c      	movs	r3, #12
    4194:	6003      	str	r3, [r0, #0]
    4196:	e009      	b.n	41ac <_free_r+0x88>
    4198:	6808      	ldr	r0, [r1, #0]
    419a:	180c      	adds	r4, r1, r0
    419c:	4294      	cmp	r4, r2
    419e:	d103      	bne.n	41a8 <_free_r+0x84>
    41a0:	6814      	ldr	r4, [r2, #0]
    41a2:	6852      	ldr	r2, [r2, #4]
    41a4:	1900      	adds	r0, r0, r4
    41a6:	6008      	str	r0, [r1, #0]
    41a8:	604a      	str	r2, [r1, #4]
    41aa:	6059      	str	r1, [r3, #4]
    41ac:	bd30      	pop	{r4, r5, pc}
    41ae:	46c0      	nop			; (mov r8, r8)
    41b0:	2000012c 	.word	0x2000012c

000041b4 <_malloc_r>:
    41b4:	b570      	push	{r4, r5, r6, lr}
    41b6:	2303      	movs	r3, #3
    41b8:	1ccd      	adds	r5, r1, #3
    41ba:	439d      	bics	r5, r3
    41bc:	3508      	adds	r5, #8
    41be:	1c06      	adds	r6, r0, #0
    41c0:	2d0c      	cmp	r5, #12
    41c2:	d201      	bcs.n	41c8 <_malloc_r+0x14>
    41c4:	250c      	movs	r5, #12
    41c6:	e001      	b.n	41cc <_malloc_r+0x18>
    41c8:	2d00      	cmp	r5, #0
    41ca:	db3f      	blt.n	424c <_malloc_r+0x98>
    41cc:	428d      	cmp	r5, r1
    41ce:	d33d      	bcc.n	424c <_malloc_r+0x98>
    41d0:	4b20      	ldr	r3, [pc, #128]	; (4254 <_malloc_r+0xa0>)
    41d2:	681c      	ldr	r4, [r3, #0]
    41d4:	1c1a      	adds	r2, r3, #0
    41d6:	1c21      	adds	r1, r4, #0
    41d8:	2900      	cmp	r1, #0
    41da:	d013      	beq.n	4204 <_malloc_r+0x50>
    41dc:	6808      	ldr	r0, [r1, #0]
    41de:	1b43      	subs	r3, r0, r5
    41e0:	d40d      	bmi.n	41fe <_malloc_r+0x4a>
    41e2:	2b0b      	cmp	r3, #11
    41e4:	d902      	bls.n	41ec <_malloc_r+0x38>
    41e6:	600b      	str	r3, [r1, #0]
    41e8:	18cc      	adds	r4, r1, r3
    41ea:	e01e      	b.n	422a <_malloc_r+0x76>
    41ec:	428c      	cmp	r4, r1
    41ee:	d102      	bne.n	41f6 <_malloc_r+0x42>
    41f0:	6863      	ldr	r3, [r4, #4]
    41f2:	6013      	str	r3, [r2, #0]
    41f4:	e01a      	b.n	422c <_malloc_r+0x78>
    41f6:	6848      	ldr	r0, [r1, #4]
    41f8:	6060      	str	r0, [r4, #4]
    41fa:	1c0c      	adds	r4, r1, #0
    41fc:	e016      	b.n	422c <_malloc_r+0x78>
    41fe:	1c0c      	adds	r4, r1, #0
    4200:	6849      	ldr	r1, [r1, #4]
    4202:	e7e9      	b.n	41d8 <_malloc_r+0x24>
    4204:	4c14      	ldr	r4, [pc, #80]	; (4258 <_malloc_r+0xa4>)
    4206:	6820      	ldr	r0, [r4, #0]
    4208:	2800      	cmp	r0, #0
    420a:	d103      	bne.n	4214 <_malloc_r+0x60>
    420c:	1c30      	adds	r0, r6, #0
    420e:	f000 f825 	bl	425c <_sbrk_r>
    4212:	6020      	str	r0, [r4, #0]
    4214:	1c30      	adds	r0, r6, #0
    4216:	1c29      	adds	r1, r5, #0
    4218:	f000 f820 	bl	425c <_sbrk_r>
    421c:	1c43      	adds	r3, r0, #1
    421e:	d015      	beq.n	424c <_malloc_r+0x98>
    4220:	1cc4      	adds	r4, r0, #3
    4222:	2303      	movs	r3, #3
    4224:	439c      	bics	r4, r3
    4226:	4284      	cmp	r4, r0
    4228:	d10a      	bne.n	4240 <_malloc_r+0x8c>
    422a:	6025      	str	r5, [r4, #0]
    422c:	1c20      	adds	r0, r4, #0
    422e:	300b      	adds	r0, #11
    4230:	2207      	movs	r2, #7
    4232:	1d23      	adds	r3, r4, #4
    4234:	4390      	bics	r0, r2
    4236:	1ac3      	subs	r3, r0, r3
    4238:	d00b      	beq.n	4252 <_malloc_r+0x9e>
    423a:	425a      	negs	r2, r3
    423c:	50e2      	str	r2, [r4, r3]
    423e:	e008      	b.n	4252 <_malloc_r+0x9e>
    4240:	1a21      	subs	r1, r4, r0
    4242:	1c30      	adds	r0, r6, #0
    4244:	f000 f80a 	bl	425c <_sbrk_r>
    4248:	3001      	adds	r0, #1
    424a:	d1ee      	bne.n	422a <_malloc_r+0x76>
    424c:	230c      	movs	r3, #12
    424e:	6033      	str	r3, [r6, #0]
    4250:	2000      	movs	r0, #0
    4252:	bd70      	pop	{r4, r5, r6, pc}
    4254:	2000012c 	.word	0x2000012c
    4258:	20000128 	.word	0x20000128

0000425c <_sbrk_r>:
    425c:	b538      	push	{r3, r4, r5, lr}
    425e:	4c07      	ldr	r4, [pc, #28]	; (427c <_sbrk_r+0x20>)
    4260:	2300      	movs	r3, #0
    4262:	1c05      	adds	r5, r0, #0
    4264:	1c08      	adds	r0, r1, #0
    4266:	6023      	str	r3, [r4, #0]
    4268:	f7fe f9bc 	bl	25e4 <_sbrk>
    426c:	1c43      	adds	r3, r0, #1
    426e:	d103      	bne.n	4278 <_sbrk_r+0x1c>
    4270:	6823      	ldr	r3, [r4, #0]
    4272:	2b00      	cmp	r3, #0
    4274:	d000      	beq.n	4278 <_sbrk_r+0x1c>
    4276:	602b      	str	r3, [r5, #0]
    4278:	bd38      	pop	{r3, r4, r5, pc}
    427a:	46c0      	nop			; (mov r8, r8)
    427c:	20000274 	.word	0x20000274

00004280 <__sread>:
    4280:	b538      	push	{r3, r4, r5, lr}
    4282:	1c0c      	adds	r4, r1, #0
    4284:	250e      	movs	r5, #14
    4286:	5f49      	ldrsh	r1, [r1, r5]
    4288:	f000 f8ac 	bl	43e4 <_read_r>
    428c:	2800      	cmp	r0, #0
    428e:	db03      	blt.n	4298 <__sread+0x18>
    4290:	6d62      	ldr	r2, [r4, #84]	; 0x54
    4292:	1813      	adds	r3, r2, r0
    4294:	6563      	str	r3, [r4, #84]	; 0x54
    4296:	e003      	b.n	42a0 <__sread+0x20>
    4298:	89a2      	ldrh	r2, [r4, #12]
    429a:	4b02      	ldr	r3, [pc, #8]	; (42a4 <__sread+0x24>)
    429c:	4013      	ands	r3, r2
    429e:	81a3      	strh	r3, [r4, #12]
    42a0:	bd38      	pop	{r3, r4, r5, pc}
    42a2:	46c0      	nop			; (mov r8, r8)
    42a4:	ffffefff 	.word	0xffffefff

000042a8 <__swrite>:
    42a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    42aa:	1c1e      	adds	r6, r3, #0
    42ac:	898b      	ldrh	r3, [r1, #12]
    42ae:	1c05      	adds	r5, r0, #0
    42b0:	1c0c      	adds	r4, r1, #0
    42b2:	1c17      	adds	r7, r2, #0
    42b4:	05da      	lsls	r2, r3, #23
    42b6:	d505      	bpl.n	42c4 <__swrite+0x1c>
    42b8:	230e      	movs	r3, #14
    42ba:	5ec9      	ldrsh	r1, [r1, r3]
    42bc:	2200      	movs	r2, #0
    42be:	2302      	movs	r3, #2
    42c0:	f000 f87c 	bl	43bc <_lseek_r>
    42c4:	89a2      	ldrh	r2, [r4, #12]
    42c6:	4b05      	ldr	r3, [pc, #20]	; (42dc <__swrite+0x34>)
    42c8:	1c28      	adds	r0, r5, #0
    42ca:	4013      	ands	r3, r2
    42cc:	81a3      	strh	r3, [r4, #12]
    42ce:	220e      	movs	r2, #14
    42d0:	5ea1      	ldrsh	r1, [r4, r2]
    42d2:	1c33      	adds	r3, r6, #0
    42d4:	1c3a      	adds	r2, r7, #0
    42d6:	f000 f827 	bl	4328 <_write_r>
    42da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    42dc:	ffffefff 	.word	0xffffefff

000042e0 <__sseek>:
    42e0:	b538      	push	{r3, r4, r5, lr}
    42e2:	1c0c      	adds	r4, r1, #0
    42e4:	250e      	movs	r5, #14
    42e6:	5f49      	ldrsh	r1, [r1, r5]
    42e8:	f000 f868 	bl	43bc <_lseek_r>
    42ec:	89a3      	ldrh	r3, [r4, #12]
    42ee:	1c42      	adds	r2, r0, #1
    42f0:	d103      	bne.n	42fa <__sseek+0x1a>
    42f2:	4a05      	ldr	r2, [pc, #20]	; (4308 <__sseek+0x28>)
    42f4:	4013      	ands	r3, r2
    42f6:	81a3      	strh	r3, [r4, #12]
    42f8:	e004      	b.n	4304 <__sseek+0x24>
    42fa:	2280      	movs	r2, #128	; 0x80
    42fc:	0152      	lsls	r2, r2, #5
    42fe:	4313      	orrs	r3, r2
    4300:	81a3      	strh	r3, [r4, #12]
    4302:	6560      	str	r0, [r4, #84]	; 0x54
    4304:	bd38      	pop	{r3, r4, r5, pc}
    4306:	46c0      	nop			; (mov r8, r8)
    4308:	ffffefff 	.word	0xffffefff

0000430c <__sclose>:
    430c:	b508      	push	{r3, lr}
    430e:	230e      	movs	r3, #14
    4310:	5ec9      	ldrsh	r1, [r1, r3]
    4312:	f000 f81d 	bl	4350 <_close_r>
    4316:	bd08      	pop	{r3, pc}

00004318 <strlen>:
    4318:	2300      	movs	r3, #0
    431a:	5cc2      	ldrb	r2, [r0, r3]
    431c:	3301      	adds	r3, #1
    431e:	2a00      	cmp	r2, #0
    4320:	d1fb      	bne.n	431a <strlen+0x2>
    4322:	1e58      	subs	r0, r3, #1
    4324:	4770      	bx	lr
	...

00004328 <_write_r>:
    4328:	b538      	push	{r3, r4, r5, lr}
    432a:	4c08      	ldr	r4, [pc, #32]	; (434c <_write_r+0x24>)
    432c:	1c05      	adds	r5, r0, #0
    432e:	2000      	movs	r0, #0
    4330:	6020      	str	r0, [r4, #0]
    4332:	1c08      	adds	r0, r1, #0
    4334:	1c11      	adds	r1, r2, #0
    4336:	1c1a      	adds	r2, r3, #0
    4338:	f7fe f92a 	bl	2590 <_write>
    433c:	1c43      	adds	r3, r0, #1
    433e:	d103      	bne.n	4348 <_write_r+0x20>
    4340:	6823      	ldr	r3, [r4, #0]
    4342:	2b00      	cmp	r3, #0
    4344:	d000      	beq.n	4348 <_write_r+0x20>
    4346:	602b      	str	r3, [r5, #0]
    4348:	bd38      	pop	{r3, r4, r5, pc}
    434a:	46c0      	nop			; (mov r8, r8)
    434c:	20000274 	.word	0x20000274

00004350 <_close_r>:
    4350:	b538      	push	{r3, r4, r5, lr}
    4352:	4c07      	ldr	r4, [pc, #28]	; (4370 <_close_r+0x20>)
    4354:	2300      	movs	r3, #0
    4356:	1c05      	adds	r5, r0, #0
    4358:	1c08      	adds	r0, r1, #0
    435a:	6023      	str	r3, [r4, #0]
    435c:	f7fe f954 	bl	2608 <_close>
    4360:	1c43      	adds	r3, r0, #1
    4362:	d103      	bne.n	436c <_close_r+0x1c>
    4364:	6823      	ldr	r3, [r4, #0]
    4366:	2b00      	cmp	r3, #0
    4368:	d000      	beq.n	436c <_close_r+0x1c>
    436a:	602b      	str	r3, [r5, #0]
    436c:	bd38      	pop	{r3, r4, r5, pc}
    436e:	46c0      	nop			; (mov r8, r8)
    4370:	20000274 	.word	0x20000274

00004374 <_fstat_r>:
    4374:	b538      	push	{r3, r4, r5, lr}
    4376:	4c07      	ldr	r4, [pc, #28]	; (4394 <_fstat_r+0x20>)
    4378:	2300      	movs	r3, #0
    437a:	1c05      	adds	r5, r0, #0
    437c:	1c08      	adds	r0, r1, #0
    437e:	1c11      	adds	r1, r2, #0
    4380:	6023      	str	r3, [r4, #0]
    4382:	f7fe f945 	bl	2610 <_fstat>
    4386:	1c43      	adds	r3, r0, #1
    4388:	d103      	bne.n	4392 <_fstat_r+0x1e>
    438a:	6823      	ldr	r3, [r4, #0]
    438c:	2b00      	cmp	r3, #0
    438e:	d000      	beq.n	4392 <_fstat_r+0x1e>
    4390:	602b      	str	r3, [r5, #0]
    4392:	bd38      	pop	{r3, r4, r5, pc}
    4394:	20000274 	.word	0x20000274

00004398 <_isatty_r>:
    4398:	b538      	push	{r3, r4, r5, lr}
    439a:	4c07      	ldr	r4, [pc, #28]	; (43b8 <_isatty_r+0x20>)
    439c:	2300      	movs	r3, #0
    439e:	1c05      	adds	r5, r0, #0
    43a0:	1c08      	adds	r0, r1, #0
    43a2:	6023      	str	r3, [r4, #0]
    43a4:	f7fe f93a 	bl	261c <_isatty>
    43a8:	1c43      	adds	r3, r0, #1
    43aa:	d103      	bne.n	43b4 <_isatty_r+0x1c>
    43ac:	6823      	ldr	r3, [r4, #0]
    43ae:	2b00      	cmp	r3, #0
    43b0:	d000      	beq.n	43b4 <_isatty_r+0x1c>
    43b2:	602b      	str	r3, [r5, #0]
    43b4:	bd38      	pop	{r3, r4, r5, pc}
    43b6:	46c0      	nop			; (mov r8, r8)
    43b8:	20000274 	.word	0x20000274

000043bc <_lseek_r>:
    43bc:	b538      	push	{r3, r4, r5, lr}
    43be:	4c08      	ldr	r4, [pc, #32]	; (43e0 <_lseek_r+0x24>)
    43c0:	1c05      	adds	r5, r0, #0
    43c2:	2000      	movs	r0, #0
    43c4:	6020      	str	r0, [r4, #0]
    43c6:	1c08      	adds	r0, r1, #0
    43c8:	1c11      	adds	r1, r2, #0
    43ca:	1c1a      	adds	r2, r3, #0
    43cc:	f7fe f928 	bl	2620 <_lseek>
    43d0:	1c43      	adds	r3, r0, #1
    43d2:	d103      	bne.n	43dc <_lseek_r+0x20>
    43d4:	6823      	ldr	r3, [r4, #0]
    43d6:	2b00      	cmp	r3, #0
    43d8:	d000      	beq.n	43dc <_lseek_r+0x20>
    43da:	602b      	str	r3, [r5, #0]
    43dc:	bd38      	pop	{r3, r4, r5, pc}
    43de:	46c0      	nop			; (mov r8, r8)
    43e0:	20000274 	.word	0x20000274

000043e4 <_read_r>:
    43e4:	b538      	push	{r3, r4, r5, lr}
    43e6:	4c08      	ldr	r4, [pc, #32]	; (4408 <_read_r+0x24>)
    43e8:	1c05      	adds	r5, r0, #0
    43ea:	2000      	movs	r0, #0
    43ec:	6020      	str	r0, [r4, #0]
    43ee:	1c08      	adds	r0, r1, #0
    43f0:	1c11      	adds	r1, r2, #0
    43f2:	1c1a      	adds	r2, r3, #0
    43f4:	f7fe f8aa 	bl	254c <_read>
    43f8:	1c43      	adds	r3, r0, #1
    43fa:	d103      	bne.n	4404 <_read_r+0x20>
    43fc:	6823      	ldr	r3, [r4, #0]
    43fe:	2b00      	cmp	r3, #0
    4400:	d000      	beq.n	4404 <_read_r+0x20>
    4402:	602b      	str	r3, [r5, #0]
    4404:	bd38      	pop	{r3, r4, r5, pc}
    4406:	46c0      	nop			; (mov r8, r8)
    4408:	20000274 	.word	0x20000274
    440c:	732f2e2e 	.word	0x732f2e2e
    4410:	412f6372 	.word	0x412f6372
    4414:	632f4653 	.word	0x632f4653
    4418:	6f6d6d6f 	.word	0x6f6d6d6f
    441c:	74752f6e 	.word	0x74752f6e
    4420:	2f736c69 	.word	0x2f736c69
    4424:	65746e69 	.word	0x65746e69
    4428:	70757272 	.word	0x70757272
    442c:	6e692f74 	.word	0x6e692f74
    4430:	72726574 	.word	0x72726574
    4434:	5f747075 	.word	0x5f747075
    4438:	5f6d6173 	.word	0x5f6d6173
    443c:	6369766e 	.word	0x6369766e
    4440:	0000632e 	.word	0x0000632e
    4444:	65737341 	.word	0x65737341
    4448:	6f697472 	.word	0x6f697472
    444c:	6166206e 	.word	0x6166206e
    4450:	64656c69 	.word	0x64656c69
    4454:	7325203a 	.word	0x7325203a
    4458:	00000000 	.word	0x00000000
    445c:	5f757063 	.word	0x5f757063
    4460:	5f717269 	.word	0x5f717269
    4464:	74697263 	.word	0x74697263
    4468:	6c616369 	.word	0x6c616369
    446c:	6365735f 	.word	0x6365735f
    4470:	6e6f6974 	.word	0x6e6f6974
    4474:	756f635f 	.word	0x756f635f
    4478:	7265746e 	.word	0x7265746e
    447c:	30203e20 	.word	0x30203e20
    4480:	00000000 	.word	0x00000000
    4484:	65737341 	.word	0x65737341
    4488:	6f697472 	.word	0x6f697472
    448c:	2527206e 	.word	0x2527206e
    4490:	66202773 	.word	0x66202773
    4494:	656c6961 	.word	0x656c6961
    4498:	74612064 	.word	0x74612064
    449c:	3a732520 	.word	0x3a732520
    44a0:	0a0d6425 	.word	0x0a0d6425
    44a4:	00000000 	.word	0x00000000
    44a8:	74736554 	.word	0x74736554
    44ac:	73252720 	.word	0x73252720
    44b0:	61662027 	.word	0x61662027
    44b4:	64656c69 	.word	0x64656c69
    44b8:	20746120 	.word	0x20746120
    44bc:	253a7325 	.word	0x253a7325
    44c0:	0a0d3a75 	.word	0x0a0d3a75
    44c4:	00000009 	.word	0x00000009
    44c8:	6e6e7552 	.word	0x6e6e7552
    44cc:	20676e69 	.word	0x20676e69
    44d0:	74736574 	.word	0x74736574
    44d4:	69757320 	.word	0x69757320
    44d8:	27206574 	.word	0x27206574
    44dc:	2e277325 	.word	0x2e277325
    44e0:	0a0d2e2e 	.word	0x0a0d2e2e
    44e4:	00000000 	.word	0x00000000
    44e8:	6e6e7552 	.word	0x6e6e7552
    44ec:	20676e69 	.word	0x20676e69
    44f0:	74736574 	.word	0x74736574
    44f4:	7325203a 	.word	0x7325203a
    44f8:	00000a0d 	.word	0x00000a0d
    44fc:	74746553 	.word	0x74746553
    4500:	20676e69 	.word	0x20676e69
    4504:	66207075 	.word	0x66207075
    4508:	75747869 	.word	0x75747869
    450c:	000d6572 	.word	0x000d6572
    4510:	74736554 	.word	0x74736554
    4514:	73252720 	.word	0x73252720
    4518:	61662027 	.word	0x61662027
    451c:	64656c69 	.word	0x64656c69
    4520:	72756420 	.word	0x72756420
    4524:	20676e69 	.word	0x20676e69
    4528:	27732527 	.word	0x27732527
    452c:	6425203a 	.word	0x6425203a
    4530:	00000a0d 	.word	0x00000a0d
    4534:	75746573 	.word	0x75746573
    4538:	00000070 	.word	0x00000070
    453c:	74736574 	.word	0x74736574
    4540:	00000000 	.word	0x00000000
    4544:	61656c43 	.word	0x61656c43
    4548:	676e696e 	.word	0x676e696e
    454c:	20707520 	.word	0x20707520
    4550:	74786966 	.word	0x74786966
    4554:	0d657275 	.word	0x0d657275
    4558:	00000000 	.word	0x00000000
    455c:	61656c63 	.word	0x61656c63
    4560:	0070756e 	.word	0x0070756e
    4564:	74736554 	.word	0x74736554
    4568:	69757320 	.word	0x69757320
    456c:	27206574 	.word	0x27206574
    4570:	20277325 	.word	0x20277325
    4574:	706d6f63 	.word	0x706d6f63
    4578:	6574656c 	.word	0x6574656c
    457c:	7525203a 	.word	0x7525203a
    4580:	73657420 	.word	0x73657420
    4584:	202c7374 	.word	0x202c7374
    4588:	66207525 	.word	0x66207525
    458c:	756c6961 	.word	0x756c6961
    4590:	2c736572 	.word	0x2c736572
    4594:	20752520 	.word	0x20752520
    4598:	6f727265 	.word	0x6f727265
    459c:	0a0d7372 	.word	0x0a0d7372
    45a0:	00000a0d 	.word	0x00000a0d
    45a4:	732f2e2e 	.word	0x732f2e2e
    45a8:	412f6372 	.word	0x412f6372
    45ac:	732f4653 	.word	0x732f4653
    45b0:	2f306d61 	.word	0x2f306d61
    45b4:	76697264 	.word	0x76697264
    45b8:	2f737265 	.word	0x2f737265
    45bc:	74726f70 	.word	0x74726f70
    45c0:	726f702f 	.word	0x726f702f
    45c4:	00632e74 	.word	0x00632e74
    45c8:	666e6f63 	.word	0x666e6f63
    45cc:	00006769 	.word	0x00006769
    45d0:	74726f70 	.word	0x74726f70
    45d4:	00000000 	.word	0x00000000
    45d8:	42000800 	.word	0x42000800
    45dc:	42000c00 	.word	0x42000c00
    45e0:	42001000 	.word	0x42001000
    45e4:	42001400 	.word	0x42001400
    45e8:	42001800 	.word	0x42001800
    45ec:	42001c00 	.word	0x42001c00
    45f0:	732f2e2e 	.word	0x732f2e2e
    45f4:	412f6372 	.word	0x412f6372
    45f8:	732f4653 	.word	0x732f4653
    45fc:	2f306d61 	.word	0x2f306d61
    4600:	76697264 	.word	0x76697264
    4604:	2f737265 	.word	0x2f737265
    4608:	63726573 	.word	0x63726573
    460c:	732f6d6f 	.word	0x732f6d6f
    4610:	6f637265 	.word	0x6f637265
    4614:	00632e6d 	.word	0x00632e6d
    4618:	736c6166 	.word	0x736c6166
    461c:	00000065 	.word	0x00000065
    4620:	0c0b0a09 	.word	0x0c0b0a09
    4624:	00000e0d 	.word	0x00000e0d
    4628:	732f2e2e 	.word	0x732f2e2e
    462c:	412f6372 	.word	0x412f6372
    4630:	732f4653 	.word	0x732f4653
    4634:	2f306d61 	.word	0x2f306d61
    4638:	76697264 	.word	0x76697264
    463c:	2f737265 	.word	0x2f737265
    4640:	63726573 	.word	0x63726573
    4644:	732f6d6f 	.word	0x732f6d6f
    4648:	6f637265 	.word	0x6f637265
    464c:	6e695f6d 	.word	0x6e695f6d
    4650:	72726574 	.word	0x72726574
    4654:	2e747075 	.word	0x2e747075
    4658:	00000063 	.word	0x00000063
    465c:	732f2e2e 	.word	0x732f2e2e
    4660:	412f6372 	.word	0x412f6372
    4664:	732f4653 	.word	0x732f4653
    4668:	2f306d61 	.word	0x2f306d61
    466c:	76697264 	.word	0x76697264
    4670:	2f737265 	.word	0x2f737265
    4674:	63726573 	.word	0x63726573
    4678:	752f6d6f 	.word	0x752f6d6f
    467c:	74726173 	.word	0x74726173
    4680:	6173752f 	.word	0x6173752f
    4684:	632e7472 	.word	0x632e7472
    4688:	00000000 	.word	0x00000000
    468c:	75646f6d 	.word	0x75646f6d
    4690:	0000656c 	.word	0x0000656c
    4694:	75646f6d 	.word	0x75646f6d
    4698:	3e2d656c 	.word	0x3e2d656c
    469c:	00007768 	.word	0x00007768
    46a0:	732f2e2e 	.word	0x732f2e2e
    46a4:	412f6372 	.word	0x412f6372
    46a8:	732f4653 	.word	0x732f4653
    46ac:	2f306d61 	.word	0x2f306d61
    46b0:	76697264 	.word	0x76697264
    46b4:	2f737265 	.word	0x2f737265
    46b8:	63726573 	.word	0x63726573
    46bc:	752f6d6f 	.word	0x752f6d6f
    46c0:	74726173 	.word	0x74726173
    46c4:	6173752f 	.word	0x6173752f
    46c8:	682e7472 	.word	0x682e7472
    46cc:	00000000 	.word	0x00000000
    46d0:	732f2e2e 	.word	0x732f2e2e
    46d4:	412f6372 	.word	0x412f6372
    46d8:	732f4653 	.word	0x732f4653
    46dc:	2f306d61 	.word	0x2f306d61
    46e0:	76697264 	.word	0x76697264
    46e4:	2f737265 	.word	0x2f737265
    46e8:	63726573 	.word	0x63726573
    46ec:	752f6d6f 	.word	0x752f6d6f
    46f0:	74726173 	.word	0x74726173
    46f4:	6173752f 	.word	0x6173752f
    46f8:	695f7472 	.word	0x695f7472
    46fc:	7265746e 	.word	0x7265746e
    4700:	74707572 	.word	0x74707572
    4704:	0000632e 	.word	0x0000632e
    4708:	6c6c6163 	.word	0x6c6c6163
    470c:	6b636162 	.word	0x6b636162
    4710:	6e75665f 	.word	0x6e75665f
    4714:	00000063 	.word	0x00000063
    4718:	645f7874 	.word	0x645f7874
    471c:	00617461 	.word	0x00617461
    4720:	645f7872 	.word	0x645f7872
    4724:	00617461 	.word	0x00617461
    4728:	00001cd8 	.word	0x00001cd8
    472c:	00001d34 	.word	0x00001d34
    4730:	00001d34 	.word	0x00001d34
    4734:	00001cd2 	.word	0x00001cd2
    4738:	00001cd2 	.word	0x00001cd2
    473c:	00001cee 	.word	0x00001cee
    4740:	00001cde 	.word	0x00001cde
    4744:	00001cf4 	.word	0x00001cf4
    4748:	00001d22 	.word	0x00001d22
    474c:	00001dbc 	.word	0x00001dbc
    4750:	00001e1c 	.word	0x00001e1c
    4754:	00001e1c 	.word	0x00001e1c
    4758:	00001e4c 	.word	0x00001e4c
    475c:	00001dae 	.word	0x00001dae
    4760:	00001dca 	.word	0x00001dca
    4764:	00001da0 	.word	0x00001da0
    4768:	00001dd8 	.word	0x00001dd8
    476c:	00001e0c 	.word	0x00001e0c
    4770:	732f2e2e 	.word	0x732f2e2e
    4774:	412f6372 	.word	0x412f6372
    4778:	732f4653 	.word	0x732f4653
    477c:	2f306d61 	.word	0x2f306d61
    4780:	76697264 	.word	0x76697264
    4784:	2f737265 	.word	0x2f737265
    4788:	74737973 	.word	0x74737973
    478c:	632f6d65 	.word	0x632f6d65
    4790:	6b636f6c 	.word	0x6b636f6c
    4794:	6f6c632f 	.word	0x6f6c632f
    4798:	735f6b63 	.word	0x735f6b63
    479c:	32646d61 	.word	0x32646d61
    47a0:	32725f31 	.word	0x32725f31
    47a4:	6c632f31 	.word	0x6c632f31
    47a8:	2e6b636f 	.word	0x2e6b636f
    47ac:	00000063 	.word	0x00000063
    47b0:	732f2e2e 	.word	0x732f2e2e
    47b4:	412f6372 	.word	0x412f6372
    47b8:	732f4653 	.word	0x732f4653
    47bc:	2f306d61 	.word	0x2f306d61
    47c0:	76697264 	.word	0x76697264
    47c4:	2f737265 	.word	0x2f737265
    47c8:	74737973 	.word	0x74737973
    47cc:	632f6d65 	.word	0x632f6d65
    47d0:	6b636f6c 	.word	0x6b636f6c
    47d4:	6f6c632f 	.word	0x6f6c632f
    47d8:	735f6b63 	.word	0x735f6b63
    47dc:	32646d61 	.word	0x32646d61
    47e0:	32725f31 	.word	0x32725f31
    47e4:	63672f31 	.word	0x63672f31
    47e8:	632e6b6c 	.word	0x632e6b6c
    47ec:	00000000 	.word	0x00000000
    47f0:	4c434721 	.word	0x4c434721
    47f4:	433e2d4b 	.word	0x433e2d4b
    47f8:	54434b4c 	.word	0x54434b4c
    47fc:	622e4c52 	.word	0x622e4c52
    4800:	572e7469 	.word	0x572e7469
    4804:	4f4c5452 	.word	0x4f4c5452
    4808:	00004b43 	.word	0x00004b43
    480c:	732f2e2e 	.word	0x732f2e2e
    4810:	412f6372 	.word	0x412f6372
    4814:	732f4653 	.word	0x732f4653
    4818:	2f306d61 	.word	0x2f306d61
    481c:	76697264 	.word	0x76697264
    4820:	2f737265 	.word	0x2f737265
    4824:	74737973 	.word	0x74737973
    4828:	702f6d65 	.word	0x702f6d65
    482c:	756d6e69 	.word	0x756d6e69
    4830:	69702f78 	.word	0x69702f78
    4834:	78756d6e 	.word	0x78756d6e
    4838:	0000632e 	.word	0x0000632e
    483c:	732f2e2e 	.word	0x732f2e2e
    4840:	412f6372 	.word	0x412f6372
    4844:	732f4653 	.word	0x732f4653
    4848:	2f306d61 	.word	0x2f306d61
    484c:	76697264 	.word	0x76697264
    4850:	2f737265 	.word	0x2f737265
    4854:	74737973 	.word	0x74737973
    4858:	702f6d65 	.word	0x702f6d65
    485c:	756d6e69 	.word	0x756d6e69
    4860:	69702f78 	.word	0x69702f78
    4864:	78756d6e 	.word	0x78756d6e
    4868:	0000682e 	.word	0x0000682e
    486c:	000048f8 	.word	0x000048f8
    4870:	000048ac 	.word	0x000048ac
    4874:	000049dc 	.word	0x000049dc
    4878:	0000489c 	.word	0x0000489c

0000487c <_test_str_receive_buffer_test.12596>:
    487c:	66667542 69207265 7265746e 74707572     Buffer interrupt
    488c:	61657220 6e612064 72772064 00657469      read and write.

0000489c <receive_buffer_test.12597>:
    489c:	00000000 000029f9 00000000 0000487c     .....)......|H..

000048ac <transfer_single_9bit_char_test.12593>:
    48ac:	00000000 00002ae5 00000000 000048bc     .....*.......H..

000048bc <_test_str_transfer_single_9bit_char_test.12592>:
    48bc:	6e617254 72656673 6e697320 20656c67     Transfer single 
    48cc:	69622d39 68632074 63617261 00726574     9-bit character.

000048dc <_test_str_usart_suite.12599>:
    48dc:	204d4153 52415355 72642054 72657669     SAM USART driver
    48ec:	73657420 75732074 00657469               test suite.

000048f8 <transfer_single_8bit_char_test.12591>:
    48f8:	00000000 000027fd 00000000 000049ec     .....'.......I..
    4908:	732f2e2e 752f6372 5f74696e 74736574     ../src/unit_test
    4918:	0000632e 656d6954 2074756f 72206e69     .c..Timeout in r
    4928:	70656365 6e6f6974 00000000 6c696146     eception....Fail
    4938:	72206465 69656365 676e6976 72747320     ed receiving str
    4948:	2e676e69 3d585420 27732527 5852202c     ing. TX='%s', RX
    4958:	7325273d 00000027 6c6c6548 6f77206f     ='%s'...Hello wo
    4968:	21646c72 00000000 6c696146 72206465     rld!....Failed r
    4978:	69656365 676e6976 6e657320 79622074     eceiving sent by
    4988:	202e6574 253d5854 52202c64 64253d58     te. TX=%d, RX=%d
    4998:	00000000 656d6954 2074756f 73206e69     ....Timeout in s
    49a8:	2f646e65 65636572 00657669              end/receive.

000049b4 <_test_str_transfer_buffer_test.12594>:
    49b4:	66667542 77207265 65746972 6f6c6220     Buffer write blo
    49c4:	6e696b63 65722f67 69206461 7265746e     cking/read inter
    49d4:	74707572 00000000                       rupt....

000049dc <transfer_buffer_test.12595>:
    49dc:	00000000 000026e5 00000000 000049b4     .....&.......I..

000049ec <_test_str_transfer_single_8bit_char_test.12590>:
    49ec:	6e617254 72656673 6e697320 20656c67     Transfer single 
    49fc:	69622d38 68632074 63617261 00726574     8-bit character.
    4a0c:	00000043                                C...

00004a10 <_global_impure_ptr>:
    4a10:	20000004 2b302d23 6c680020 6665004c     ... #-0+ .hlL.ef
    4a20:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    4a30:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    4a40:	64636261 00006665                       abcdef..

00004a48 <__sf_fake_stdin>:
	...

00004a68 <__sf_fake_stdout>:
	...

00004a88 <__sf_fake_stderr>:
	...

00004aa8 <_init>:
    4aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4aaa:	46c0      	nop			; (mov r8, r8)
    4aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4aae:	bc08      	pop	{r3}
    4ab0:	469e      	mov	lr, r3
    4ab2:	4770      	bx	lr

00004ab4 <__init_array_start>:
    4ab4:	000000d9 	.word	0x000000d9

00004ab8 <_fini>:
    4ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4aba:	46c0      	nop			; (mov r8, r8)
    4abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4abe:	bc08      	pop	{r3}
    4ac0:	469e      	mov	lr, r3
    4ac2:	4770      	bx	lr

00004ac4 <__fini_array_start>:
    4ac4:	000000b1 	.word	0x000000b1
